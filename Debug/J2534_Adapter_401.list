
J2534_Adapter_401.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007548  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080076dc  080076dc  000176dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800773c  0800773c  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800773c  0800773c  0001773c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007744  08007744  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007744  08007744  00017744  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007748  08007748  00017748  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  0800774c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001478  200000fc  08007848  000200fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001574  08007848  00021574  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011cab  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003070  00000000  00000000  00031dd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e68  00000000  00000000  00034e48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d00  00000000  00000000  00035cb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001933e  00000000  00000000  000369b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012927  00000000  00000000  0004fcee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e0dd  00000000  00000000  00062615  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f06f2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a38  00000000  00000000  000f0744  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200000fc 	.word	0x200000fc
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080076c4 	.word	0x080076c4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000100 	.word	0x20000100
 80001d0:	080076c4 	.word	0x080076c4

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b590      	push	{r4, r7, lr}
 80004da:	b08b      	sub	sp, #44	; 0x2c
 80004dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004de:	f000 fb0b 	bl	8000af8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e2:	f000 f89f 	bl	8000624 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e6:	f000 f965 	bl	80007b4 <MX_GPIO_Init>
  MX_RTC_Init();
 80004ea:	f000 f907 	bl	80006fc <MX_RTC_Init>
  MX_SPI1_Init();
 80004ee:	f000 f92b 	bl	8000748 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80004f2:	f006 fbab 	bl	8006c4c <MX_USB_DEVICE_Init>
//  initButton.Pull = GPIO_PULLUP;
//  initButton.Speed = GPIO_SPEED_FREQ_HIGH;
//  HAL_GPIO_Init(GPIOA, &initButton);

  // Initialize button timers
  uint32_t btn1Timer = HAL_GetTick();
 80004f6:	f000 fb65 	bl	8000bc4 <HAL_GetTick>
 80004fa:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t ledTimer = HAL_GetTick();
 80004fc:	f000 fb62 	bl	8000bc4 <HAL_GetTick>
 8000500:	6238      	str	r0, [r7, #32]
  uint32_t ledDuty = 512;
 8000502:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000506:	61fb      	str	r3, [r7, #28]
  uint32_t ledPwmCounter = 0U;
 8000508:	2300      	movs	r3, #0
 800050a:	61bb      	str	r3, [r7, #24]
  uint32_t ledDutyTimer = HAL_GetTick();;
 800050c:	f000 fb5a 	bl	8000bc4 <HAL_GetTick>
 8000510:	6178      	str	r0, [r7, #20]
  uint32_t dutyDirection = 1;
 8000512:	2301      	movs	r3, #1
 8000514:	613b      	str	r3, [r7, #16]
  uint32_t ledMode = 0;
 8000516:	2300      	movs	r3, #0
 8000518:	60fb      	str	r3, [r7, #12]
  while (1)
  {
	static int buttonPressed = GPIO_PIN_RESET;

	// обработка нажатий кнопки + подавление дребезга
	if ((btn1Timer + BTN_DEBOUNCE_TIME) <= HAL_GetTick()) {
 800051a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800051c:	f103 0446 	add.w	r4, r3, #70	; 0x46
 8000520:	f000 fb50 	bl	8000bc4 <HAL_GetTick>
 8000524:	4603      	mov	r3, r0
 8000526:	429c      	cmp	r4, r3
 8000528:	d81a      	bhi.n	8000560 <main+0x88>
	  int current_state = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 800052a:	2101      	movs	r1, #1
 800052c:	4839      	ldr	r0, [pc, #228]	; (8000614 <main+0x13c>)
 800052e:	f000 fe0f 	bl	8001150 <HAL_GPIO_ReadPin>
 8000532:	4603      	mov	r3, r0
 8000534:	60bb      	str	r3, [r7, #8]

	  if (current_state != buttonPressed) {
 8000536:	4b38      	ldr	r3, [pc, #224]	; (8000618 <main+0x140>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	68ba      	ldr	r2, [r7, #8]
 800053c:	429a      	cmp	r2, r3
 800053e:	d00f      	beq.n	8000560 <main+0x88>
	    buttonPressed = current_state;
 8000540:	4a35      	ldr	r2, [pc, #212]	; (8000618 <main+0x140>)
 8000542:	68bb      	ldr	r3, [r7, #8]
 8000544:	6013      	str	r3, [r2, #0]
	    btn1Timer = HAL_GetTick();
 8000546:	f000 fb3d 	bl	8000bc4 <HAL_GetTick>
 800054a:	6278      	str	r0, [r7, #36]	; 0x24

	    if (current_state == GPIO_PIN_RESET) {
 800054c:	68bb      	ldr	r3, [r7, #8]
 800054e:	2b00      	cmp	r3, #0
 8000550:	d106      	bne.n	8000560 <main+0x88>
	    	ledMode = !ledMode;
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	2b00      	cmp	r3, #0
 8000556:	bf0c      	ite	eq
 8000558:	2301      	moveq	r3, #1
 800055a:	2300      	movne	r3, #0
 800055c:	b2db      	uxtb	r3, r3
 800055e:	60fb      	str	r3, [r7, #12]
	    }
	  }
	}

	if (ledMode == 0) {
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	2b00      	cmp	r3, #0
 8000564:	d139      	bne.n	80005da <main+0x102>
		// имитация аппаратного счетчика
		++ledPwmCounter;
 8000566:	69bb      	ldr	r3, [r7, #24]
 8000568:	3301      	adds	r3, #1
 800056a:	61bb      	str	r3, [r7, #24]
		if (ledPwmCounter > 1023) {
 800056c:	69bb      	ldr	r3, [r7, #24]
 800056e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000572:	d301      	bcc.n	8000578 <main+0xa0>
			ledPwmCounter = 0;
 8000574:	2300      	movs	r3, #0
 8000576:	61bb      	str	r3, [r7, #24]
		}

		// изменение коэффициента заполнения Ш�?М раз в 1 мс
		if (ledDutyTimer + 1 < HAL_GetTick()) {
 8000578:	697b      	ldr	r3, [r7, #20]
 800057a:	1c5c      	adds	r4, r3, #1
 800057c:	f000 fb22 	bl	8000bc4 <HAL_GetTick>
 8000580:	4603      	mov	r3, r0
 8000582:	429c      	cmp	r4, r3
 8000584:	d21b      	bcs.n	80005be <main+0xe6>
			ledDutyTimer = HAL_GetTick();
 8000586:	f000 fb1d 	bl	8000bc4 <HAL_GetTick>
 800058a:	6178      	str	r0, [r7, #20]
			if ((ledDuty == 0) || (ledDuty == 1023)) {
 800058c:	69fb      	ldr	r3, [r7, #28]
 800058e:	2b00      	cmp	r3, #0
 8000590:	d004      	beq.n	800059c <main+0xc4>
 8000592:	69fb      	ldr	r3, [r7, #28]
 8000594:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000598:	4293      	cmp	r3, r2
 800059a:	d106      	bne.n	80005aa <main+0xd2>
				dutyDirection = !dutyDirection;
 800059c:	693b      	ldr	r3, [r7, #16]
 800059e:	2b00      	cmp	r3, #0
 80005a0:	bf0c      	ite	eq
 80005a2:	2301      	moveq	r3, #1
 80005a4:	2300      	movne	r3, #0
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	613b      	str	r3, [r7, #16]
			}

			ledDuty += (dutyDirection) ? 1 : -1;
 80005aa:	693b      	ldr	r3, [r7, #16]
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <main+0xdc>
 80005b0:	2301      	movs	r3, #1
 80005b2:	e001      	b.n	80005b8 <main+0xe0>
 80005b4:	f04f 33ff 	mov.w	r3, #4294967295
 80005b8:	69fa      	ldr	r2, [r7, #28]
 80005ba:	4413      	add	r3, r2
 80005bc:	61fb      	str	r3, [r7, #28]
		}

		// установка состояния выхода в зависимости от текущего состояния счетчика и коэффициента заполнения
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, (ledPwmCounter < ledDuty) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80005be:	69ba      	ldr	r2, [r7, #24]
 80005c0:	69fb      	ldr	r3, [r7, #28]
 80005c2:	429a      	cmp	r2, r3
 80005c4:	bf2c      	ite	cs
 80005c6:	2301      	movcs	r3, #1
 80005c8:	2300      	movcc	r3, #0
 80005ca:	b2db      	uxtb	r3, r3
 80005cc:	461a      	mov	r2, r3
 80005ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005d2:	4812      	ldr	r0, [pc, #72]	; (800061c <main+0x144>)
 80005d4:	f000 fdd4 	bl	8001180 <HAL_GPIO_WritePin>
 80005d8:	e79f      	b.n	800051a <main+0x42>
	} else {
		if (ledTimer + 500 < HAL_GetTick()){
 80005da:	6a3b      	ldr	r3, [r7, #32]
 80005dc:	f503 74fa 	add.w	r4, r3, #500	; 0x1f4
 80005e0:	f000 faf0 	bl	8000bc4 <HAL_GetTick>
 80005e4:	4603      	mov	r3, r0
 80005e6:	429c      	cmp	r4, r3
 80005e8:	d297      	bcs.n	800051a <main+0x42>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80005ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005ee:	480b      	ldr	r0, [pc, #44]	; (800061c <main+0x144>)
 80005f0:	f000 fddf 	bl	80011b2 <HAL_GPIO_TogglePin>
			ledTimer = HAL_GetTick();
 80005f4:	f000 fae6 	bl	8000bc4 <HAL_GetTick>
 80005f8:	6238      	str	r0, [r7, #32]
			char testData[] = "Aboba";
 80005fa:	4a09      	ldr	r2, [pc, #36]	; (8000620 <main+0x148>)
 80005fc:	463b      	mov	r3, r7
 80005fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000602:	6018      	str	r0, [r3, #0]
 8000604:	3304      	adds	r3, #4
 8000606:	8019      	strh	r1, [r3, #0]
			CDC_Transmit_FS(testData, 6);
 8000608:	463b      	mov	r3, r7
 800060a:	2106      	movs	r1, #6
 800060c:	4618      	mov	r0, r3
 800060e:	f006 fbdb 	bl	8006dc8 <CDC_Transmit_FS>
  {
 8000612:	e782      	b.n	800051a <main+0x42>
 8000614:	40020000 	.word	0x40020000
 8000618:	20000190 	.word	0x20000190
 800061c:	40020800 	.word	0x40020800
 8000620:	080076dc 	.word	0x080076dc

08000624 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b094      	sub	sp, #80	; 0x50
 8000628:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062a:	f107 0320 	add.w	r3, r7, #32
 800062e:	2230      	movs	r2, #48	; 0x30
 8000630:	2100      	movs	r1, #0
 8000632:	4618      	mov	r0, r3
 8000634:	f007 f83e 	bl	80076b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000638:	f107 030c 	add.w	r3, r7, #12
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]
 8000646:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000648:	2300      	movs	r3, #0
 800064a:	60bb      	str	r3, [r7, #8]
 800064c:	4b29      	ldr	r3, [pc, #164]	; (80006f4 <SystemClock_Config+0xd0>)
 800064e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000650:	4a28      	ldr	r2, [pc, #160]	; (80006f4 <SystemClock_Config+0xd0>)
 8000652:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000656:	6413      	str	r3, [r2, #64]	; 0x40
 8000658:	4b26      	ldr	r3, [pc, #152]	; (80006f4 <SystemClock_Config+0xd0>)
 800065a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800065c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000660:	60bb      	str	r3, [r7, #8]
 8000662:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000664:	2300      	movs	r3, #0
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	4b23      	ldr	r3, [pc, #140]	; (80006f8 <SystemClock_Config+0xd4>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000670:	4a21      	ldr	r2, [pc, #132]	; (80006f8 <SystemClock_Config+0xd4>)
 8000672:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000676:	6013      	str	r3, [r2, #0]
 8000678:	4b1f      	ldr	r3, [pc, #124]	; (80006f8 <SystemClock_Config+0xd4>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000680:	607b      	str	r3, [r7, #4]
 8000682:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000684:	2305      	movs	r3, #5
 8000686:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000688:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800068c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800068e:	2301      	movs	r3, #1
 8000690:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000692:	2302      	movs	r3, #2
 8000694:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000696:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800069a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800069c:	2319      	movs	r3, #25
 800069e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80006a0:	2390      	movs	r3, #144	; 0x90
 80006a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a4:	2302      	movs	r3, #2
 80006a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80006a8:	2303      	movs	r3, #3
 80006aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ac:	f107 0320 	add.w	r3, r7, #32
 80006b0:	4618      	mov	r0, r3
 80006b2:	f002 f815 	bl	80026e0 <HAL_RCC_OscConfig>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80006bc:	f000 f90a 	bl	80008d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c0:	230f      	movs	r3, #15
 80006c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c4:	2302      	movs	r3, #2
 80006c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c8:	2300      	movs	r3, #0
 80006ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d2:	2300      	movs	r3, #0
 80006d4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006d6:	f107 030c 	add.w	r3, r7, #12
 80006da:	2102      	movs	r1, #2
 80006dc:	4618      	mov	r0, r3
 80006de:	f002 fa77 	bl	8002bd0 <HAL_RCC_ClockConfig>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80006e8:	f000 f8f4 	bl	80008d4 <Error_Handler>
  }
}
 80006ec:	bf00      	nop
 80006ee:	3750      	adds	r7, #80	; 0x50
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	40023800 	.word	0x40023800
 80006f8:	40007000 	.word	0x40007000

080006fc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000700:	4b0f      	ldr	r3, [pc, #60]	; (8000740 <MX_RTC_Init+0x44>)
 8000702:	4a10      	ldr	r2, [pc, #64]	; (8000744 <MX_RTC_Init+0x48>)
 8000704:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000706:	4b0e      	ldr	r3, [pc, #56]	; (8000740 <MX_RTC_Init+0x44>)
 8000708:	2200      	movs	r2, #0
 800070a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800070c:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <MX_RTC_Init+0x44>)
 800070e:	227f      	movs	r2, #127	; 0x7f
 8000710:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000712:	4b0b      	ldr	r3, [pc, #44]	; (8000740 <MX_RTC_Init+0x44>)
 8000714:	22ff      	movs	r2, #255	; 0xff
 8000716:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000718:	4b09      	ldr	r3, [pc, #36]	; (8000740 <MX_RTC_Init+0x44>)
 800071a:	2200      	movs	r2, #0
 800071c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800071e:	4b08      	ldr	r3, [pc, #32]	; (8000740 <MX_RTC_Init+0x44>)
 8000720:	2200      	movs	r2, #0
 8000722:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000724:	4b06      	ldr	r3, [pc, #24]	; (8000740 <MX_RTC_Init+0x44>)
 8000726:	2200      	movs	r2, #0
 8000728:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800072a:	4805      	ldr	r0, [pc, #20]	; (8000740 <MX_RTC_Init+0x44>)
 800072c:	f002 fcf6 	bl	800311c <HAL_RTC_Init>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000736:	f000 f8cd 	bl	80008d4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800073a:	bf00      	nop
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	20000118 	.word	0x20000118
 8000744:	40002800 	.word	0x40002800

08000748 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800074c:	4b17      	ldr	r3, [pc, #92]	; (80007ac <MX_SPI1_Init+0x64>)
 800074e:	4a18      	ldr	r2, [pc, #96]	; (80007b0 <MX_SPI1_Init+0x68>)
 8000750:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000752:	4b16      	ldr	r3, [pc, #88]	; (80007ac <MX_SPI1_Init+0x64>)
 8000754:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000758:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800075a:	4b14      	ldr	r3, [pc, #80]	; (80007ac <MX_SPI1_Init+0x64>)
 800075c:	2200      	movs	r2, #0
 800075e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000760:	4b12      	ldr	r3, [pc, #72]	; (80007ac <MX_SPI1_Init+0x64>)
 8000762:	2200      	movs	r2, #0
 8000764:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000766:	4b11      	ldr	r3, [pc, #68]	; (80007ac <MX_SPI1_Init+0x64>)
 8000768:	2200      	movs	r2, #0
 800076a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800076c:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <MX_SPI1_Init+0x64>)
 800076e:	2200      	movs	r2, #0
 8000770:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000772:	4b0e      	ldr	r3, [pc, #56]	; (80007ac <MX_SPI1_Init+0x64>)
 8000774:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000778:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800077a:	4b0c      	ldr	r3, [pc, #48]	; (80007ac <MX_SPI1_Init+0x64>)
 800077c:	2210      	movs	r2, #16
 800077e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000780:	4b0a      	ldr	r3, [pc, #40]	; (80007ac <MX_SPI1_Init+0x64>)
 8000782:	2200      	movs	r2, #0
 8000784:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000786:	4b09      	ldr	r3, [pc, #36]	; (80007ac <MX_SPI1_Init+0x64>)
 8000788:	2200      	movs	r2, #0
 800078a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800078c:	4b07      	ldr	r3, [pc, #28]	; (80007ac <MX_SPI1_Init+0x64>)
 800078e:	2200      	movs	r2, #0
 8000790:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000792:	4b06      	ldr	r3, [pc, #24]	; (80007ac <MX_SPI1_Init+0x64>)
 8000794:	220a      	movs	r2, #10
 8000796:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000798:	4804      	ldr	r0, [pc, #16]	; (80007ac <MX_SPI1_Init+0x64>)
 800079a:	f002 fdb9 	bl	8003310 <HAL_SPI_Init>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007a4:	f000 f896 	bl	80008d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007a8:	bf00      	nop
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	20000138 	.word	0x20000138
 80007b0:	40013000 	.word	0x40013000

080007b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b08a      	sub	sp, #40	; 0x28
 80007b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ba:	f107 0314 	add.w	r3, r7, #20
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	605a      	str	r2, [r3, #4]
 80007c4:	609a      	str	r2, [r3, #8]
 80007c6:	60da      	str	r2, [r3, #12]
 80007c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	613b      	str	r3, [r7, #16]
 80007ce:	4b3d      	ldr	r3, [pc, #244]	; (80008c4 <MX_GPIO_Init+0x110>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a3c      	ldr	r2, [pc, #240]	; (80008c4 <MX_GPIO_Init+0x110>)
 80007d4:	f043 0304 	orr.w	r3, r3, #4
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b3a      	ldr	r3, [pc, #232]	; (80008c4 <MX_GPIO_Init+0x110>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0304 	and.w	r3, r3, #4
 80007e2:	613b      	str	r3, [r7, #16]
 80007e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	60fb      	str	r3, [r7, #12]
 80007ea:	4b36      	ldr	r3, [pc, #216]	; (80008c4 <MX_GPIO_Init+0x110>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a35      	ldr	r2, [pc, #212]	; (80008c4 <MX_GPIO_Init+0x110>)
 80007f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b33      	ldr	r3, [pc, #204]	; (80008c4 <MX_GPIO_Init+0x110>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007fe:	60fb      	str	r3, [r7, #12]
 8000800:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	60bb      	str	r3, [r7, #8]
 8000806:	4b2f      	ldr	r3, [pc, #188]	; (80008c4 <MX_GPIO_Init+0x110>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4a2e      	ldr	r2, [pc, #184]	; (80008c4 <MX_GPIO_Init+0x110>)
 800080c:	f043 0301 	orr.w	r3, r3, #1
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4b2c      	ldr	r3, [pc, #176]	; (80008c4 <MX_GPIO_Init+0x110>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0301 	and.w	r3, r3, #1
 800081a:	60bb      	str	r3, [r7, #8]
 800081c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	607b      	str	r3, [r7, #4]
 8000822:	4b28      	ldr	r3, [pc, #160]	; (80008c4 <MX_GPIO_Init+0x110>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4a27      	ldr	r2, [pc, #156]	; (80008c4 <MX_GPIO_Init+0x110>)
 8000828:	f043 0302 	orr.w	r3, r3, #2
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
 800082e:	4b25      	ldr	r3, [pc, #148]	; (80008c4 <MX_GPIO_Init+0x110>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	f003 0302 	and.w	r3, r3, #2
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_SET);
 800083a:	2201      	movs	r2, #1
 800083c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000840:	4821      	ldr	r0, [pc, #132]	; (80008c8 <MX_GPIO_Init+0x114>)
 8000842:	f000 fc9d 	bl	8001180 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CAN1_CS_Pin|CAN2_CS_Pin, GPIO_PIN_RESET);
 8000846:	2200      	movs	r2, #0
 8000848:	2106      	movs	r1, #6
 800084a:	4820      	ldr	r0, [pc, #128]	; (80008cc <MX_GPIO_Init+0x118>)
 800084c:	f000 fc98 	bl	8001180 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_LED_Pin */
  GPIO_InitStruct.Pin = USER_LED_Pin;
 8000850:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000854:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000856:	2311      	movs	r3, #17
 8000858:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085e:	2300      	movs	r3, #0
 8000860:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USER_LED_GPIO_Port, &GPIO_InitStruct);
 8000862:	f107 0314 	add.w	r3, r7, #20
 8000866:	4619      	mov	r1, r3
 8000868:	4817      	ldr	r0, [pc, #92]	; (80008c8 <MX_GPIO_Init+0x114>)
 800086a:	f000 faed 	bl	8000e48 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BTN_Pin */
  GPIO_InitStruct.Pin = USER_BTN_Pin;
 800086e:	2301      	movs	r3, #1
 8000870:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000872:	2300      	movs	r3, #0
 8000874:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000876:	2301      	movs	r3, #1
 8000878:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BTN_GPIO_Port, &GPIO_InitStruct);
 800087a:	f107 0314 	add.w	r3, r7, #20
 800087e:	4619      	mov	r1, r3
 8000880:	4812      	ldr	r0, [pc, #72]	; (80008cc <MX_GPIO_Init+0x118>)
 8000882:	f000 fae1 	bl	8000e48 <HAL_GPIO_Init>

  /*Configure GPIO pins : CAN1_CS_Pin CAN2_CS_Pin */
  GPIO_InitStruct.Pin = CAN1_CS_Pin|CAN2_CS_Pin;
 8000886:	2306      	movs	r3, #6
 8000888:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088a:	2301      	movs	r3, #1
 800088c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000892:	2300      	movs	r3, #0
 8000894:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000896:	f107 0314 	add.w	r3, r7, #20
 800089a:	4619      	mov	r1, r3
 800089c:	480b      	ldr	r0, [pc, #44]	; (80008cc <MX_GPIO_Init+0x118>)
 800089e:	f000 fad3 	bl	8000e48 <HAL_GPIO_Init>

  /*Configure GPIO pins : CAN1_INT_Pin CAN2_INT_Pin */
  GPIO_InitStruct.Pin = CAN1_INT_Pin|CAN2_INT_Pin;
 80008a2:	2303      	movs	r3, #3
 80008a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008a6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b0:	f107 0314 	add.w	r3, r7, #20
 80008b4:	4619      	mov	r1, r3
 80008b6:	4806      	ldr	r0, [pc, #24]	; (80008d0 <MX_GPIO_Init+0x11c>)
 80008b8:	f000 fac6 	bl	8000e48 <HAL_GPIO_Init>

}
 80008bc:	bf00      	nop
 80008be:	3728      	adds	r7, #40	; 0x28
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	40023800 	.word	0x40023800
 80008c8:	40020800 	.word	0x40020800
 80008cc:	40020000 	.word	0x40020000
 80008d0:	40020400 	.word	0x40020400

080008d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d8:	b672      	cpsid	i
}
 80008da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008dc:	e7fe      	b.n	80008dc <Error_Handler+0x8>
	...

080008e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	607b      	str	r3, [r7, #4]
 80008ea:	4b10      	ldr	r3, [pc, #64]	; (800092c <HAL_MspInit+0x4c>)
 80008ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ee:	4a0f      	ldr	r2, [pc, #60]	; (800092c <HAL_MspInit+0x4c>)
 80008f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008f4:	6453      	str	r3, [r2, #68]	; 0x44
 80008f6:	4b0d      	ldr	r3, [pc, #52]	; (800092c <HAL_MspInit+0x4c>)
 80008f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008fe:	607b      	str	r3, [r7, #4]
 8000900:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	603b      	str	r3, [r7, #0]
 8000906:	4b09      	ldr	r3, [pc, #36]	; (800092c <HAL_MspInit+0x4c>)
 8000908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090a:	4a08      	ldr	r2, [pc, #32]	; (800092c <HAL_MspInit+0x4c>)
 800090c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000910:	6413      	str	r3, [r2, #64]	; 0x40
 8000912:	4b06      	ldr	r3, [pc, #24]	; (800092c <HAL_MspInit+0x4c>)
 8000914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800091a:	603b      	str	r3, [r7, #0]
 800091c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800091e:	bf00      	nop
 8000920:	370c      	adds	r7, #12
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	40023800 	.word	0x40023800

08000930 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b088      	sub	sp, #32
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000938:	f107 030c 	add.w	r3, r7, #12
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	605a      	str	r2, [r3, #4]
 8000942:	609a      	str	r2, [r3, #8]
 8000944:	60da      	str	r2, [r3, #12]
 8000946:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a0c      	ldr	r2, [pc, #48]	; (8000980 <HAL_RTC_MspInit+0x50>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d111      	bne.n	8000976 <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000952:	2302      	movs	r3, #2
 8000954:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000956:	f44f 7380 	mov.w	r3, #256	; 0x100
 800095a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800095c:	f107 030c 	add.w	r3, r7, #12
 8000960:	4618      	mov	r0, r3
 8000962:	f002 faed 	bl	8002f40 <HAL_RCCEx_PeriphCLKConfig>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 800096c:	f7ff ffb2 	bl	80008d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000970:	4b04      	ldr	r3, [pc, #16]	; (8000984 <HAL_RTC_MspInit+0x54>)
 8000972:	2201      	movs	r2, #1
 8000974:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000976:	bf00      	nop
 8000978:	3720      	adds	r7, #32
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	40002800 	.word	0x40002800
 8000984:	42470e3c 	.word	0x42470e3c

08000988 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b08a      	sub	sp, #40	; 0x28
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000990:	f107 0314 	add.w	r3, r7, #20
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	605a      	str	r2, [r3, #4]
 800099a:	609a      	str	r2, [r3, #8]
 800099c:	60da      	str	r2, [r3, #12]
 800099e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a19      	ldr	r2, [pc, #100]	; (8000a0c <HAL_SPI_MspInit+0x84>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d12b      	bne.n	8000a02 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	613b      	str	r3, [r7, #16]
 80009ae:	4b18      	ldr	r3, [pc, #96]	; (8000a10 <HAL_SPI_MspInit+0x88>)
 80009b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b2:	4a17      	ldr	r2, [pc, #92]	; (8000a10 <HAL_SPI_MspInit+0x88>)
 80009b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009b8:	6453      	str	r3, [r2, #68]	; 0x44
 80009ba:	4b15      	ldr	r3, [pc, #84]	; (8000a10 <HAL_SPI_MspInit+0x88>)
 80009bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009c2:	613b      	str	r3, [r7, #16]
 80009c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	60fb      	str	r3, [r7, #12]
 80009ca:	4b11      	ldr	r3, [pc, #68]	; (8000a10 <HAL_SPI_MspInit+0x88>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	4a10      	ldr	r2, [pc, #64]	; (8000a10 <HAL_SPI_MspInit+0x88>)
 80009d0:	f043 0301 	orr.w	r3, r3, #1
 80009d4:	6313      	str	r3, [r2, #48]	; 0x30
 80009d6:	4b0e      	ldr	r3, [pc, #56]	; (8000a10 <HAL_SPI_MspInit+0x88>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	f003 0301 	and.w	r3, r3, #1
 80009de:	60fb      	str	r3, [r7, #12]
 80009e0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80009e2:	23e0      	movs	r3, #224	; 0xe0
 80009e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e6:	2302      	movs	r3, #2
 80009e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	2300      	movs	r3, #0
 80009ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ee:	2303      	movs	r3, #3
 80009f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80009f2:	2305      	movs	r3, #5
 80009f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f6:	f107 0314 	add.w	r3, r7, #20
 80009fa:	4619      	mov	r1, r3
 80009fc:	4805      	ldr	r0, [pc, #20]	; (8000a14 <HAL_SPI_MspInit+0x8c>)
 80009fe:	f000 fa23 	bl	8000e48 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000a02:	bf00      	nop
 8000a04:	3728      	adds	r7, #40	; 0x28
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	40013000 	.word	0x40013000
 8000a10:	40023800 	.word	0x40023800
 8000a14:	40020000 	.word	0x40020000

08000a18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a1c:	e7fe      	b.n	8000a1c <NMI_Handler+0x4>

08000a1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a22:	e7fe      	b.n	8000a22 <HardFault_Handler+0x4>

08000a24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a28:	e7fe      	b.n	8000a28 <MemManage_Handler+0x4>

08000a2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a2e:	e7fe      	b.n	8000a2e <BusFault_Handler+0x4>

08000a30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a34:	e7fe      	b.n	8000a34 <UsageFault_Handler+0x4>

08000a36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a36:	b480      	push	{r7}
 8000a38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr

08000a44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a48:	bf00      	nop
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr

08000a52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a52:	b480      	push	{r7}
 8000a54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a56:	bf00      	nop
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr

08000a60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a64:	f000 f89a 	bl	8000b9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a68:	bf00      	nop
 8000a6a:	bd80      	pop	{r7, pc}

08000a6c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000a70:	4802      	ldr	r0, [pc, #8]	; (8000a7c <OTG_FS_IRQHandler+0x10>)
 8000a72:	f000 fd08 	bl	8001486 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	20000e48 	.word	0x20000e48

08000a80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a84:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <SystemInit+0x20>)
 8000a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a8a:	4a05      	ldr	r2, [pc, #20]	; (8000aa0 <SystemInit+0x20>)
 8000a8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a94:	bf00      	nop
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	e000ed00 	.word	0xe000ed00

08000aa4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000aa4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000adc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000aa8:	480d      	ldr	r0, [pc, #52]	; (8000ae0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000aaa:	490e      	ldr	r1, [pc, #56]	; (8000ae4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000aac:	4a0e      	ldr	r2, [pc, #56]	; (8000ae8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000aae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ab0:	e002      	b.n	8000ab8 <LoopCopyDataInit>

08000ab2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ab2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ab4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ab6:	3304      	adds	r3, #4

08000ab8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ab8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000abc:	d3f9      	bcc.n	8000ab2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000abe:	4a0b      	ldr	r2, [pc, #44]	; (8000aec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ac0:	4c0b      	ldr	r4, [pc, #44]	; (8000af0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ac2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ac4:	e001      	b.n	8000aca <LoopFillZerobss>

08000ac6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ac6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ac8:	3204      	adds	r2, #4

08000aca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000acc:	d3fb      	bcc.n	8000ac6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ace:	f7ff ffd7 	bl	8000a80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ad2:	f006 fdcb 	bl	800766c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ad6:	f7ff fcff 	bl	80004d8 <main>
  bx  lr    
 8000ada:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000adc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000ae0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ae4:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8000ae8:	0800774c 	.word	0x0800774c
  ldr r2, =_sbss
 8000aec:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8000af0:	20001574 	.word	0x20001574

08000af4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000af4:	e7fe      	b.n	8000af4 <ADC_IRQHandler>
	...

08000af8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000afc:	4b0e      	ldr	r3, [pc, #56]	; (8000b38 <HAL_Init+0x40>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a0d      	ldr	r2, [pc, #52]	; (8000b38 <HAL_Init+0x40>)
 8000b02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b08:	4b0b      	ldr	r3, [pc, #44]	; (8000b38 <HAL_Init+0x40>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a0a      	ldr	r2, [pc, #40]	; (8000b38 <HAL_Init+0x40>)
 8000b0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b14:	4b08      	ldr	r3, [pc, #32]	; (8000b38 <HAL_Init+0x40>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a07      	ldr	r2, [pc, #28]	; (8000b38 <HAL_Init+0x40>)
 8000b1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b20:	2003      	movs	r0, #3
 8000b22:	f000 f94f 	bl	8000dc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b26:	200f      	movs	r0, #15
 8000b28:	f000 f808 	bl	8000b3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b2c:	f7ff fed8 	bl	80008e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b30:	2300      	movs	r3, #0
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	40023c00 	.word	0x40023c00

08000b3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b44:	4b12      	ldr	r3, [pc, #72]	; (8000b90 <HAL_InitTick+0x54>)
 8000b46:	681a      	ldr	r2, [r3, #0]
 8000b48:	4b12      	ldr	r3, [pc, #72]	; (8000b94 <HAL_InitTick+0x58>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f000 f967 	bl	8000e2e <HAL_SYSTICK_Config>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b66:	2301      	movs	r3, #1
 8000b68:	e00e      	b.n	8000b88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	2b0f      	cmp	r3, #15
 8000b6e:	d80a      	bhi.n	8000b86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b70:	2200      	movs	r2, #0
 8000b72:	6879      	ldr	r1, [r7, #4]
 8000b74:	f04f 30ff 	mov.w	r0, #4294967295
 8000b78:	f000 f92f 	bl	8000dda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b7c:	4a06      	ldr	r2, [pc, #24]	; (8000b98 <HAL_InitTick+0x5c>)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b82:	2300      	movs	r3, #0
 8000b84:	e000      	b.n	8000b88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b86:	2301      	movs	r3, #1
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	3708      	adds	r7, #8
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	20000000 	.word	0x20000000
 8000b94:	20000008 	.word	0x20000008
 8000b98:	20000004 	.word	0x20000004

08000b9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ba0:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <HAL_IncTick+0x20>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <HAL_IncTick+0x24>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	4413      	add	r3, r2
 8000bac:	4a04      	ldr	r2, [pc, #16]	; (8000bc0 <HAL_IncTick+0x24>)
 8000bae:	6013      	str	r3, [r2, #0]
}
 8000bb0:	bf00      	nop
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	20000008 	.word	0x20000008
 8000bc0:	20000194 	.word	0x20000194

08000bc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bc8:	4b03      	ldr	r3, [pc, #12]	; (8000bd8 <HAL_GetTick+0x14>)
 8000bca:	681b      	ldr	r3, [r3, #0]
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	20000194 	.word	0x20000194

08000bdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000be4:	f7ff ffee 	bl	8000bc4 <HAL_GetTick>
 8000be8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bf4:	d005      	beq.n	8000c02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bf6:	4b0a      	ldr	r3, [pc, #40]	; (8000c20 <HAL_Delay+0x44>)
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	4413      	add	r3, r2
 8000c00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c02:	bf00      	nop
 8000c04:	f7ff ffde 	bl	8000bc4 <HAL_GetTick>
 8000c08:	4602      	mov	r2, r0
 8000c0a:	68bb      	ldr	r3, [r7, #8]
 8000c0c:	1ad3      	subs	r3, r2, r3
 8000c0e:	68fa      	ldr	r2, [r7, #12]
 8000c10:	429a      	cmp	r2, r3
 8000c12:	d8f7      	bhi.n	8000c04 <HAL_Delay+0x28>
  {
  }
}
 8000c14:	bf00      	nop
 8000c16:	bf00      	nop
 8000c18:	3710      	adds	r7, #16
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	20000008 	.word	0x20000008

08000c24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b085      	sub	sp, #20
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	f003 0307 	and.w	r3, r3, #7
 8000c32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c34:	4b0c      	ldr	r3, [pc, #48]	; (8000c68 <__NVIC_SetPriorityGrouping+0x44>)
 8000c36:	68db      	ldr	r3, [r3, #12]
 8000c38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c3a:	68ba      	ldr	r2, [r7, #8]
 8000c3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c40:	4013      	ands	r3, r2
 8000c42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c56:	4a04      	ldr	r2, [pc, #16]	; (8000c68 <__NVIC_SetPriorityGrouping+0x44>)
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	60d3      	str	r3, [r2, #12]
}
 8000c5c:	bf00      	nop
 8000c5e:	3714      	adds	r7, #20
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr
 8000c68:	e000ed00 	.word	0xe000ed00

08000c6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c70:	4b04      	ldr	r3, [pc, #16]	; (8000c84 <__NVIC_GetPriorityGrouping+0x18>)
 8000c72:	68db      	ldr	r3, [r3, #12]
 8000c74:	0a1b      	lsrs	r3, r3, #8
 8000c76:	f003 0307 	and.w	r3, r3, #7
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr
 8000c84:	e000ed00 	.word	0xe000ed00

08000c88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	4603      	mov	r3, r0
 8000c90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	db0b      	blt.n	8000cb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c9a:	79fb      	ldrb	r3, [r7, #7]
 8000c9c:	f003 021f 	and.w	r2, r3, #31
 8000ca0:	4907      	ldr	r1, [pc, #28]	; (8000cc0 <__NVIC_EnableIRQ+0x38>)
 8000ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca6:	095b      	lsrs	r3, r3, #5
 8000ca8:	2001      	movs	r0, #1
 8000caa:	fa00 f202 	lsl.w	r2, r0, r2
 8000cae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cb2:	bf00      	nop
 8000cb4:	370c      	adds	r7, #12
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	e000e100 	.word	0xe000e100

08000cc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	6039      	str	r1, [r7, #0]
 8000cce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	db0a      	blt.n	8000cee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	b2da      	uxtb	r2, r3
 8000cdc:	490c      	ldr	r1, [pc, #48]	; (8000d10 <__NVIC_SetPriority+0x4c>)
 8000cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce2:	0112      	lsls	r2, r2, #4
 8000ce4:	b2d2      	uxtb	r2, r2
 8000ce6:	440b      	add	r3, r1
 8000ce8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cec:	e00a      	b.n	8000d04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	b2da      	uxtb	r2, r3
 8000cf2:	4908      	ldr	r1, [pc, #32]	; (8000d14 <__NVIC_SetPriority+0x50>)
 8000cf4:	79fb      	ldrb	r3, [r7, #7]
 8000cf6:	f003 030f 	and.w	r3, r3, #15
 8000cfa:	3b04      	subs	r3, #4
 8000cfc:	0112      	lsls	r2, r2, #4
 8000cfe:	b2d2      	uxtb	r2, r2
 8000d00:	440b      	add	r3, r1
 8000d02:	761a      	strb	r2, [r3, #24]
}
 8000d04:	bf00      	nop
 8000d06:	370c      	adds	r7, #12
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr
 8000d10:	e000e100 	.word	0xe000e100
 8000d14:	e000ed00 	.word	0xe000ed00

08000d18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b089      	sub	sp, #36	; 0x24
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	60f8      	str	r0, [r7, #12]
 8000d20:	60b9      	str	r1, [r7, #8]
 8000d22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	f003 0307 	and.w	r3, r3, #7
 8000d2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d2c:	69fb      	ldr	r3, [r7, #28]
 8000d2e:	f1c3 0307 	rsb	r3, r3, #7
 8000d32:	2b04      	cmp	r3, #4
 8000d34:	bf28      	it	cs
 8000d36:	2304      	movcs	r3, #4
 8000d38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	3304      	adds	r3, #4
 8000d3e:	2b06      	cmp	r3, #6
 8000d40:	d902      	bls.n	8000d48 <NVIC_EncodePriority+0x30>
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	3b03      	subs	r3, #3
 8000d46:	e000      	b.n	8000d4a <NVIC_EncodePriority+0x32>
 8000d48:	2300      	movs	r3, #0
 8000d4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d50:	69bb      	ldr	r3, [r7, #24]
 8000d52:	fa02 f303 	lsl.w	r3, r2, r3
 8000d56:	43da      	mvns	r2, r3
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	401a      	ands	r2, r3
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d60:	f04f 31ff 	mov.w	r1, #4294967295
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	fa01 f303 	lsl.w	r3, r1, r3
 8000d6a:	43d9      	mvns	r1, r3
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d70:	4313      	orrs	r3, r2
         );
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3724      	adds	r7, #36	; 0x24
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
	...

08000d80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	3b01      	subs	r3, #1
 8000d8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d90:	d301      	bcc.n	8000d96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d92:	2301      	movs	r3, #1
 8000d94:	e00f      	b.n	8000db6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d96:	4a0a      	ldr	r2, [pc, #40]	; (8000dc0 <SysTick_Config+0x40>)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	3b01      	subs	r3, #1
 8000d9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d9e:	210f      	movs	r1, #15
 8000da0:	f04f 30ff 	mov.w	r0, #4294967295
 8000da4:	f7ff ff8e 	bl	8000cc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000da8:	4b05      	ldr	r3, [pc, #20]	; (8000dc0 <SysTick_Config+0x40>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dae:	4b04      	ldr	r3, [pc, #16]	; (8000dc0 <SysTick_Config+0x40>)
 8000db0:	2207      	movs	r2, #7
 8000db2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000db4:	2300      	movs	r3, #0
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	e000e010 	.word	0xe000e010

08000dc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dcc:	6878      	ldr	r0, [r7, #4]
 8000dce:	f7ff ff29 	bl	8000c24 <__NVIC_SetPriorityGrouping>
}
 8000dd2:	bf00      	nop
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}

08000dda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dda:	b580      	push	{r7, lr}
 8000ddc:	b086      	sub	sp, #24
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	4603      	mov	r3, r0
 8000de2:	60b9      	str	r1, [r7, #8]
 8000de4:	607a      	str	r2, [r7, #4]
 8000de6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000de8:	2300      	movs	r3, #0
 8000dea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dec:	f7ff ff3e 	bl	8000c6c <__NVIC_GetPriorityGrouping>
 8000df0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000df2:	687a      	ldr	r2, [r7, #4]
 8000df4:	68b9      	ldr	r1, [r7, #8]
 8000df6:	6978      	ldr	r0, [r7, #20]
 8000df8:	f7ff ff8e 	bl	8000d18 <NVIC_EncodePriority>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e02:	4611      	mov	r1, r2
 8000e04:	4618      	mov	r0, r3
 8000e06:	f7ff ff5d 	bl	8000cc4 <__NVIC_SetPriority>
}
 8000e0a:	bf00      	nop
 8000e0c:	3718      	adds	r7, #24
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e12:	b580      	push	{r7, lr}
 8000e14:	b082      	sub	sp, #8
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	4603      	mov	r3, r0
 8000e1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e20:	4618      	mov	r0, r3
 8000e22:	f7ff ff31 	bl	8000c88 <__NVIC_EnableIRQ>
}
 8000e26:	bf00      	nop
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b082      	sub	sp, #8
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e36:	6878      	ldr	r0, [r7, #4]
 8000e38:	f7ff ffa2 	bl	8000d80 <SysTick_Config>
 8000e3c:	4603      	mov	r3, r0
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
	...

08000e48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b089      	sub	sp, #36	; 0x24
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
 8000e50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e52:	2300      	movs	r3, #0
 8000e54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e56:	2300      	movs	r3, #0
 8000e58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e5e:	2300      	movs	r3, #0
 8000e60:	61fb      	str	r3, [r7, #28]
 8000e62:	e159      	b.n	8001118 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e64:	2201      	movs	r2, #1
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	697a      	ldr	r2, [r7, #20]
 8000e74:	4013      	ands	r3, r2
 8000e76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e78:	693a      	ldr	r2, [r7, #16]
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	f040 8148 	bne.w	8001112 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	f003 0303 	and.w	r3, r3, #3
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	d005      	beq.n	8000e9a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e96:	2b02      	cmp	r3, #2
 8000e98:	d130      	bne.n	8000efc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	689b      	ldr	r3, [r3, #8]
 8000e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	005b      	lsls	r3, r3, #1
 8000ea4:	2203      	movs	r2, #3
 8000ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eaa:	43db      	mvns	r3, r3
 8000eac:	69ba      	ldr	r2, [r7, #24]
 8000eae:	4013      	ands	r3, r2
 8000eb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	68da      	ldr	r2, [r3, #12]
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	005b      	lsls	r3, r3, #1
 8000eba:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebe:	69ba      	ldr	r2, [r7, #24]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	69ba      	ldr	r2, [r7, #24]
 8000ec8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	43db      	mvns	r3, r3
 8000eda:	69ba      	ldr	r2, [r7, #24]
 8000edc:	4013      	ands	r3, r2
 8000ede:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	091b      	lsrs	r3, r3, #4
 8000ee6:	f003 0201 	and.w	r2, r3, #1
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f003 0303 	and.w	r3, r3, #3
 8000f04:	2b03      	cmp	r3, #3
 8000f06:	d017      	beq.n	8000f38 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	2203      	movs	r2, #3
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	43db      	mvns	r3, r3
 8000f1a:	69ba      	ldr	r2, [r7, #24]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	689a      	ldr	r2, [r3, #8]
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	005b      	lsls	r3, r3, #1
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f003 0303 	and.w	r3, r3, #3
 8000f40:	2b02      	cmp	r3, #2
 8000f42:	d123      	bne.n	8000f8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	08da      	lsrs	r2, r3, #3
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	3208      	adds	r2, #8
 8000f4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	f003 0307 	and.w	r3, r3, #7
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	220f      	movs	r2, #15
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	43db      	mvns	r3, r3
 8000f62:	69ba      	ldr	r2, [r7, #24]
 8000f64:	4013      	ands	r3, r2
 8000f66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	691a      	ldr	r2, [r3, #16]
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	f003 0307 	and.w	r3, r3, #7
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	08da      	lsrs	r2, r3, #3
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	3208      	adds	r2, #8
 8000f86:	69b9      	ldr	r1, [r7, #24]
 8000f88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	2203      	movs	r2, #3
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	69ba      	ldr	r2, [r7, #24]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f003 0203 	and.w	r2, r3, #3
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	f000 80a2 	beq.w	8001112 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60fb      	str	r3, [r7, #12]
 8000fd2:	4b57      	ldr	r3, [pc, #348]	; (8001130 <HAL_GPIO_Init+0x2e8>)
 8000fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd6:	4a56      	ldr	r2, [pc, #344]	; (8001130 <HAL_GPIO_Init+0x2e8>)
 8000fd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fdc:	6453      	str	r3, [r2, #68]	; 0x44
 8000fde:	4b54      	ldr	r3, [pc, #336]	; (8001130 <HAL_GPIO_Init+0x2e8>)
 8000fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fea:	4a52      	ldr	r2, [pc, #328]	; (8001134 <HAL_GPIO_Init+0x2ec>)
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	089b      	lsrs	r3, r3, #2
 8000ff0:	3302      	adds	r3, #2
 8000ff2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	f003 0303 	and.w	r3, r3, #3
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	220f      	movs	r2, #15
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	43db      	mvns	r3, r3
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	4013      	ands	r3, r2
 800100c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a49      	ldr	r2, [pc, #292]	; (8001138 <HAL_GPIO_Init+0x2f0>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d019      	beq.n	800104a <HAL_GPIO_Init+0x202>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a48      	ldr	r2, [pc, #288]	; (800113c <HAL_GPIO_Init+0x2f4>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d013      	beq.n	8001046 <HAL_GPIO_Init+0x1fe>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a47      	ldr	r2, [pc, #284]	; (8001140 <HAL_GPIO_Init+0x2f8>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d00d      	beq.n	8001042 <HAL_GPIO_Init+0x1fa>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a46      	ldr	r2, [pc, #280]	; (8001144 <HAL_GPIO_Init+0x2fc>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d007      	beq.n	800103e <HAL_GPIO_Init+0x1f6>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4a45      	ldr	r2, [pc, #276]	; (8001148 <HAL_GPIO_Init+0x300>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d101      	bne.n	800103a <HAL_GPIO_Init+0x1f2>
 8001036:	2304      	movs	r3, #4
 8001038:	e008      	b.n	800104c <HAL_GPIO_Init+0x204>
 800103a:	2307      	movs	r3, #7
 800103c:	e006      	b.n	800104c <HAL_GPIO_Init+0x204>
 800103e:	2303      	movs	r3, #3
 8001040:	e004      	b.n	800104c <HAL_GPIO_Init+0x204>
 8001042:	2302      	movs	r3, #2
 8001044:	e002      	b.n	800104c <HAL_GPIO_Init+0x204>
 8001046:	2301      	movs	r3, #1
 8001048:	e000      	b.n	800104c <HAL_GPIO_Init+0x204>
 800104a:	2300      	movs	r3, #0
 800104c:	69fa      	ldr	r2, [r7, #28]
 800104e:	f002 0203 	and.w	r2, r2, #3
 8001052:	0092      	lsls	r2, r2, #2
 8001054:	4093      	lsls	r3, r2
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	4313      	orrs	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800105c:	4935      	ldr	r1, [pc, #212]	; (8001134 <HAL_GPIO_Init+0x2ec>)
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	089b      	lsrs	r3, r3, #2
 8001062:	3302      	adds	r3, #2
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800106a:	4b38      	ldr	r3, [pc, #224]	; (800114c <HAL_GPIO_Init+0x304>)
 800106c:	689b      	ldr	r3, [r3, #8]
 800106e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	43db      	mvns	r3, r3
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	4013      	ands	r3, r2
 8001078:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001082:	2b00      	cmp	r3, #0
 8001084:	d003      	beq.n	800108e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	4313      	orrs	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800108e:	4a2f      	ldr	r2, [pc, #188]	; (800114c <HAL_GPIO_Init+0x304>)
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001094:	4b2d      	ldr	r3, [pc, #180]	; (800114c <HAL_GPIO_Init+0x304>)
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	43db      	mvns	r3, r3
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	4013      	ands	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d003      	beq.n	80010b8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010b8:	4a24      	ldr	r2, [pc, #144]	; (800114c <HAL_GPIO_Init+0x304>)
 80010ba:	69bb      	ldr	r3, [r7, #24]
 80010bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010be:	4b23      	ldr	r3, [pc, #140]	; (800114c <HAL_GPIO_Init+0x304>)
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	43db      	mvns	r3, r3
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	4013      	ands	r3, r2
 80010cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d003      	beq.n	80010e2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	4313      	orrs	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010e2:	4a1a      	ldr	r2, [pc, #104]	; (800114c <HAL_GPIO_Init+0x304>)
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010e8:	4b18      	ldr	r3, [pc, #96]	; (800114c <HAL_GPIO_Init+0x304>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	43db      	mvns	r3, r3
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	4013      	ands	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001100:	2b00      	cmp	r3, #0
 8001102:	d003      	beq.n	800110c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	4313      	orrs	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800110c:	4a0f      	ldr	r2, [pc, #60]	; (800114c <HAL_GPIO_Init+0x304>)
 800110e:	69bb      	ldr	r3, [r7, #24]
 8001110:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	3301      	adds	r3, #1
 8001116:	61fb      	str	r3, [r7, #28]
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	2b0f      	cmp	r3, #15
 800111c:	f67f aea2 	bls.w	8000e64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001120:	bf00      	nop
 8001122:	bf00      	nop
 8001124:	3724      	adds	r7, #36	; 0x24
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	40023800 	.word	0x40023800
 8001134:	40013800 	.word	0x40013800
 8001138:	40020000 	.word	0x40020000
 800113c:	40020400 	.word	0x40020400
 8001140:	40020800 	.word	0x40020800
 8001144:	40020c00 	.word	0x40020c00
 8001148:	40021000 	.word	0x40021000
 800114c:	40013c00 	.word	0x40013c00

08001150 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001150:	b480      	push	{r7}
 8001152:	b085      	sub	sp, #20
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	460b      	mov	r3, r1
 800115a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	691a      	ldr	r2, [r3, #16]
 8001160:	887b      	ldrh	r3, [r7, #2]
 8001162:	4013      	ands	r3, r2
 8001164:	2b00      	cmp	r3, #0
 8001166:	d002      	beq.n	800116e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001168:	2301      	movs	r3, #1
 800116a:	73fb      	strb	r3, [r7, #15]
 800116c:	e001      	b.n	8001172 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800116e:	2300      	movs	r3, #0
 8001170:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001172:	7bfb      	ldrb	r3, [r7, #15]
}
 8001174:	4618      	mov	r0, r3
 8001176:	3714      	adds	r7, #20
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr

08001180 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	460b      	mov	r3, r1
 800118a:	807b      	strh	r3, [r7, #2]
 800118c:	4613      	mov	r3, r2
 800118e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001190:	787b      	ldrb	r3, [r7, #1]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d003      	beq.n	800119e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001196:	887a      	ldrh	r2, [r7, #2]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800119c:	e003      	b.n	80011a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800119e:	887b      	ldrh	r3, [r7, #2]
 80011a0:	041a      	lsls	r2, r3, #16
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	619a      	str	r2, [r3, #24]
}
 80011a6:	bf00      	nop
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr

080011b2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011b2:	b480      	push	{r7}
 80011b4:	b085      	sub	sp, #20
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
 80011ba:	460b      	mov	r3, r1
 80011bc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	695b      	ldr	r3, [r3, #20]
 80011c2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011c4:	887a      	ldrh	r2, [r7, #2]
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	4013      	ands	r3, r2
 80011ca:	041a      	lsls	r2, r3, #16
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	43d9      	mvns	r1, r3
 80011d0:	887b      	ldrh	r3, [r7, #2]
 80011d2:	400b      	ands	r3, r1
 80011d4:	431a      	orrs	r2, r3
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	619a      	str	r2, [r3, #24]
}
 80011da:	bf00      	nop
 80011dc:	3714      	adds	r7, #20
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr

080011e6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80011e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011e8:	b08f      	sub	sp, #60	; 0x3c
 80011ea:	af0a      	add	r7, sp, #40	; 0x28
 80011ec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d101      	bne.n	80011f8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80011f4:	2301      	movs	r3, #1
 80011f6:	e10f      	b.n	8001418 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001204:	b2db      	uxtb	r3, r3
 8001206:	2b00      	cmp	r3, #0
 8001208:	d106      	bne.n	8001218 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2200      	movs	r2, #0
 800120e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f005 ff20 	bl	8007058 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2203      	movs	r2, #3
 800121c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001228:	2b00      	cmp	r3, #0
 800122a:	d102      	bne.n	8001232 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2200      	movs	r2, #0
 8001230:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4618      	mov	r0, r3
 8001238:	f002 fa07 	bl	800364a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	603b      	str	r3, [r7, #0]
 8001242:	687e      	ldr	r6, [r7, #4]
 8001244:	466d      	mov	r5, sp
 8001246:	f106 0410 	add.w	r4, r6, #16
 800124a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800124c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800124e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001250:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001252:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001256:	e885 0003 	stmia.w	r5, {r0, r1}
 800125a:	1d33      	adds	r3, r6, #4
 800125c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800125e:	6838      	ldr	r0, [r7, #0]
 8001260:	f002 f8df 	bl	8003422 <USB_CoreInit>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d005      	beq.n	8001276 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2202      	movs	r2, #2
 800126e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	e0d0      	b.n	8001418 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	2100      	movs	r1, #0
 800127c:	4618      	mov	r0, r3
 800127e:	f002 f9f5 	bl	800366c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001282:	2300      	movs	r3, #0
 8001284:	73fb      	strb	r3, [r7, #15]
 8001286:	e04a      	b.n	800131e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001288:	7bfa      	ldrb	r2, [r7, #15]
 800128a:	6879      	ldr	r1, [r7, #4]
 800128c:	4613      	mov	r3, r2
 800128e:	00db      	lsls	r3, r3, #3
 8001290:	4413      	add	r3, r2
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	440b      	add	r3, r1
 8001296:	333d      	adds	r3, #61	; 0x3d
 8001298:	2201      	movs	r2, #1
 800129a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800129c:	7bfa      	ldrb	r2, [r7, #15]
 800129e:	6879      	ldr	r1, [r7, #4]
 80012a0:	4613      	mov	r3, r2
 80012a2:	00db      	lsls	r3, r3, #3
 80012a4:	4413      	add	r3, r2
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	440b      	add	r3, r1
 80012aa:	333c      	adds	r3, #60	; 0x3c
 80012ac:	7bfa      	ldrb	r2, [r7, #15]
 80012ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80012b0:	7bfa      	ldrb	r2, [r7, #15]
 80012b2:	7bfb      	ldrb	r3, [r7, #15]
 80012b4:	b298      	uxth	r0, r3
 80012b6:	6879      	ldr	r1, [r7, #4]
 80012b8:	4613      	mov	r3, r2
 80012ba:	00db      	lsls	r3, r3, #3
 80012bc:	4413      	add	r3, r2
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	440b      	add	r3, r1
 80012c2:	3344      	adds	r3, #68	; 0x44
 80012c4:	4602      	mov	r2, r0
 80012c6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80012c8:	7bfa      	ldrb	r2, [r7, #15]
 80012ca:	6879      	ldr	r1, [r7, #4]
 80012cc:	4613      	mov	r3, r2
 80012ce:	00db      	lsls	r3, r3, #3
 80012d0:	4413      	add	r3, r2
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	440b      	add	r3, r1
 80012d6:	3340      	adds	r3, #64	; 0x40
 80012d8:	2200      	movs	r2, #0
 80012da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80012dc:	7bfa      	ldrb	r2, [r7, #15]
 80012de:	6879      	ldr	r1, [r7, #4]
 80012e0:	4613      	mov	r3, r2
 80012e2:	00db      	lsls	r3, r3, #3
 80012e4:	4413      	add	r3, r2
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	440b      	add	r3, r1
 80012ea:	3348      	adds	r3, #72	; 0x48
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80012f0:	7bfa      	ldrb	r2, [r7, #15]
 80012f2:	6879      	ldr	r1, [r7, #4]
 80012f4:	4613      	mov	r3, r2
 80012f6:	00db      	lsls	r3, r3, #3
 80012f8:	4413      	add	r3, r2
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	440b      	add	r3, r1
 80012fe:	334c      	adds	r3, #76	; 0x4c
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001304:	7bfa      	ldrb	r2, [r7, #15]
 8001306:	6879      	ldr	r1, [r7, #4]
 8001308:	4613      	mov	r3, r2
 800130a:	00db      	lsls	r3, r3, #3
 800130c:	4413      	add	r3, r2
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	440b      	add	r3, r1
 8001312:	3354      	adds	r3, #84	; 0x54
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001318:	7bfb      	ldrb	r3, [r7, #15]
 800131a:	3301      	adds	r3, #1
 800131c:	73fb      	strb	r3, [r7, #15]
 800131e:	7bfa      	ldrb	r2, [r7, #15]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	429a      	cmp	r2, r3
 8001326:	d3af      	bcc.n	8001288 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001328:	2300      	movs	r3, #0
 800132a:	73fb      	strb	r3, [r7, #15]
 800132c:	e044      	b.n	80013b8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800132e:	7bfa      	ldrb	r2, [r7, #15]
 8001330:	6879      	ldr	r1, [r7, #4]
 8001332:	4613      	mov	r3, r2
 8001334:	00db      	lsls	r3, r3, #3
 8001336:	4413      	add	r3, r2
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	440b      	add	r3, r1
 800133c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001340:	2200      	movs	r2, #0
 8001342:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001344:	7bfa      	ldrb	r2, [r7, #15]
 8001346:	6879      	ldr	r1, [r7, #4]
 8001348:	4613      	mov	r3, r2
 800134a:	00db      	lsls	r3, r3, #3
 800134c:	4413      	add	r3, r2
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	440b      	add	r3, r1
 8001352:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001356:	7bfa      	ldrb	r2, [r7, #15]
 8001358:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800135a:	7bfa      	ldrb	r2, [r7, #15]
 800135c:	6879      	ldr	r1, [r7, #4]
 800135e:	4613      	mov	r3, r2
 8001360:	00db      	lsls	r3, r3, #3
 8001362:	4413      	add	r3, r2
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	440b      	add	r3, r1
 8001368:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800136c:	2200      	movs	r2, #0
 800136e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001370:	7bfa      	ldrb	r2, [r7, #15]
 8001372:	6879      	ldr	r1, [r7, #4]
 8001374:	4613      	mov	r3, r2
 8001376:	00db      	lsls	r3, r3, #3
 8001378:	4413      	add	r3, r2
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	440b      	add	r3, r1
 800137e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001386:	7bfa      	ldrb	r2, [r7, #15]
 8001388:	6879      	ldr	r1, [r7, #4]
 800138a:	4613      	mov	r3, r2
 800138c:	00db      	lsls	r3, r3, #3
 800138e:	4413      	add	r3, r2
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	440b      	add	r3, r1
 8001394:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800139c:	7bfa      	ldrb	r2, [r7, #15]
 800139e:	6879      	ldr	r1, [r7, #4]
 80013a0:	4613      	mov	r3, r2
 80013a2:	00db      	lsls	r3, r3, #3
 80013a4:	4413      	add	r3, r2
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	440b      	add	r3, r1
 80013aa:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013b2:	7bfb      	ldrb	r3, [r7, #15]
 80013b4:	3301      	adds	r3, #1
 80013b6:	73fb      	strb	r3, [r7, #15]
 80013b8:	7bfa      	ldrb	r2, [r7, #15]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	429a      	cmp	r2, r3
 80013c0:	d3b5      	bcc.n	800132e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	603b      	str	r3, [r7, #0]
 80013c8:	687e      	ldr	r6, [r7, #4]
 80013ca:	466d      	mov	r5, sp
 80013cc:	f106 0410 	add.w	r4, r6, #16
 80013d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013d8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80013dc:	e885 0003 	stmia.w	r5, {r0, r1}
 80013e0:	1d33      	adds	r3, r6, #4
 80013e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013e4:	6838      	ldr	r0, [r7, #0]
 80013e6:	f002 f98d 	bl	8003704 <USB_DevInit>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d005      	beq.n	80013fc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2202      	movs	r2, #2
 80013f4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80013f8:	2301      	movs	r3, #1
 80013fa:	e00d      	b.n	8001418 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2200      	movs	r2, #0
 8001400:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2201      	movs	r2, #1
 8001408:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4618      	mov	r0, r3
 8001412:	f003 fadc 	bl	80049ce <USB_DevDisconnect>

  return HAL_OK;
 8001416:	2300      	movs	r3, #0
}
 8001418:	4618      	mov	r0, r3
 800141a:	3714      	adds	r7, #20
 800141c:	46bd      	mov	sp, r7
 800141e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001420 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001434:	2b01      	cmp	r3, #1
 8001436:	d101      	bne.n	800143c <HAL_PCD_Start+0x1c>
 8001438:	2302      	movs	r3, #2
 800143a:	e020      	b.n	800147e <HAL_PCD_Start+0x5e>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2201      	movs	r2, #1
 8001440:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001448:	2b01      	cmp	r3, #1
 800144a:	d109      	bne.n	8001460 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001450:	2b01      	cmp	r3, #1
 8001452:	d005      	beq.n	8001460 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001458:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4618      	mov	r0, r3
 8001466:	f002 f8df 	bl	8003628 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4618      	mov	r0, r3
 8001470:	f003 fa8c 	bl	800498c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2200      	movs	r2, #0
 8001478:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800147c:	2300      	movs	r3, #0
}
 800147e:	4618      	mov	r0, r3
 8001480:	3710      	adds	r7, #16
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001486:	b590      	push	{r4, r7, lr}
 8001488:	b08d      	sub	sp, #52	; 0x34
 800148a:	af00      	add	r7, sp, #0
 800148c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001494:	6a3b      	ldr	r3, [r7, #32]
 8001496:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4618      	mov	r0, r3
 800149e:	f003 fb4a 	bl	8004b36 <USB_GetMode>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	f040 848a 	bne.w	8001dbe <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4618      	mov	r0, r3
 80014b0:	f003 faae 	bl	8004a10 <USB_ReadInterrupts>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	f000 8480 	beq.w	8001dbc <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	0a1b      	lsrs	r3, r3, #8
 80014c6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f003 fa9b 	bl	8004a10 <USB_ReadInterrupts>
 80014da:	4603      	mov	r3, r0
 80014dc:	f003 0302 	and.w	r3, r3, #2
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d107      	bne.n	80014f4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	695a      	ldr	r2, [r3, #20]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f002 0202 	and.w	r2, r2, #2
 80014f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4618      	mov	r0, r3
 80014fa:	f003 fa89 	bl	8004a10 <USB_ReadInterrupts>
 80014fe:	4603      	mov	r3, r0
 8001500:	f003 0310 	and.w	r3, r3, #16
 8001504:	2b10      	cmp	r3, #16
 8001506:	d161      	bne.n	80015cc <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	699a      	ldr	r2, [r3, #24]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f022 0210 	bic.w	r2, r2, #16
 8001516:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001518:	6a3b      	ldr	r3, [r7, #32]
 800151a:	6a1b      	ldr	r3, [r3, #32]
 800151c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800151e:	69bb      	ldr	r3, [r7, #24]
 8001520:	f003 020f 	and.w	r2, r3, #15
 8001524:	4613      	mov	r3, r2
 8001526:	00db      	lsls	r3, r3, #3
 8001528:	4413      	add	r3, r2
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	4413      	add	r3, r2
 8001534:	3304      	adds	r3, #4
 8001536:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	0c5b      	lsrs	r3, r3, #17
 800153c:	f003 030f 	and.w	r3, r3, #15
 8001540:	2b02      	cmp	r3, #2
 8001542:	d124      	bne.n	800158e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800154a:	4013      	ands	r3, r2
 800154c:	2b00      	cmp	r3, #0
 800154e:	d035      	beq.n	80015bc <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001554:	69bb      	ldr	r3, [r7, #24]
 8001556:	091b      	lsrs	r3, r3, #4
 8001558:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800155a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800155e:	b29b      	uxth	r3, r3
 8001560:	461a      	mov	r2, r3
 8001562:	6a38      	ldr	r0, [r7, #32]
 8001564:	f003 f8c0 	bl	80046e8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	691a      	ldr	r2, [r3, #16]
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	091b      	lsrs	r3, r3, #4
 8001570:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001574:	441a      	add	r2, r3
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	6a1a      	ldr	r2, [r3, #32]
 800157e:	69bb      	ldr	r3, [r7, #24]
 8001580:	091b      	lsrs	r3, r3, #4
 8001582:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001586:	441a      	add	r2, r3
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	621a      	str	r2, [r3, #32]
 800158c:	e016      	b.n	80015bc <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800158e:	69bb      	ldr	r3, [r7, #24]
 8001590:	0c5b      	lsrs	r3, r3, #17
 8001592:	f003 030f 	and.w	r3, r3, #15
 8001596:	2b06      	cmp	r3, #6
 8001598:	d110      	bne.n	80015bc <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80015a0:	2208      	movs	r2, #8
 80015a2:	4619      	mov	r1, r3
 80015a4:	6a38      	ldr	r0, [r7, #32]
 80015a6:	f003 f89f 	bl	80046e8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	6a1a      	ldr	r2, [r3, #32]
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	091b      	lsrs	r3, r3, #4
 80015b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015b6:	441a      	add	r2, r3
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	699a      	ldr	r2, [r3, #24]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f042 0210 	orr.w	r2, r2, #16
 80015ca:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f003 fa1d 	bl	8004a10 <USB_ReadInterrupts>
 80015d6:	4603      	mov	r3, r0
 80015d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015dc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80015e0:	f040 80a7 	bne.w	8001732 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80015e4:	2300      	movs	r3, #0
 80015e6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4618      	mov	r0, r3
 80015ee:	f003 fa22 	bl	8004a36 <USB_ReadDevAllOutEpInterrupt>
 80015f2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80015f4:	e099      	b.n	800172a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80015f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015f8:	f003 0301 	and.w	r3, r3, #1
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	f000 808e 	beq.w	800171e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001608:	b2d2      	uxtb	r2, r2
 800160a:	4611      	mov	r1, r2
 800160c:	4618      	mov	r0, r3
 800160e:	f003 fa46 	bl	8004a9e <USB_ReadDevOutEPInterrupt>
 8001612:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	2b00      	cmp	r3, #0
 800161c:	d00c      	beq.n	8001638 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800161e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001620:	015a      	lsls	r2, r3, #5
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	4413      	add	r3, r2
 8001626:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800162a:	461a      	mov	r2, r3
 800162c:	2301      	movs	r3, #1
 800162e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001630:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f000 fec2 	bl	80023bc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	f003 0308 	and.w	r3, r3, #8
 800163e:	2b00      	cmp	r3, #0
 8001640:	d00c      	beq.n	800165c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001644:	015a      	lsls	r2, r3, #5
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	4413      	add	r3, r2
 800164a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800164e:	461a      	mov	r2, r3
 8001650:	2308      	movs	r3, #8
 8001652:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001654:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f000 ff98 	bl	800258c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	f003 0310 	and.w	r3, r3, #16
 8001662:	2b00      	cmp	r3, #0
 8001664:	d008      	beq.n	8001678 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001668:	015a      	lsls	r2, r3, #5
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	4413      	add	r3, r2
 800166e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001672:	461a      	mov	r2, r3
 8001674:	2310      	movs	r3, #16
 8001676:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	f003 0302 	and.w	r3, r3, #2
 800167e:	2b00      	cmp	r3, #0
 8001680:	d030      	beq.n	80016e4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001682:	6a3b      	ldr	r3, [r7, #32]
 8001684:	695b      	ldr	r3, [r3, #20]
 8001686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800168a:	2b80      	cmp	r3, #128	; 0x80
 800168c:	d109      	bne.n	80016a2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	69fa      	ldr	r2, [r7, #28]
 8001698:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800169c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016a0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80016a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016a4:	4613      	mov	r3, r2
 80016a6:	00db      	lsls	r3, r3, #3
 80016a8:	4413      	add	r3, r2
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	4413      	add	r3, r2
 80016b4:	3304      	adds	r3, #4
 80016b6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	78db      	ldrb	r3, [r3, #3]
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d108      	bne.n	80016d2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	2200      	movs	r2, #0
 80016c4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80016c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	4619      	mov	r1, r3
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f005 fdbf 	bl	8007250 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80016d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d4:	015a      	lsls	r2, r3, #5
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	4413      	add	r3, r2
 80016da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016de:	461a      	mov	r2, r3
 80016e0:	2302      	movs	r3, #2
 80016e2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	f003 0320 	and.w	r3, r3, #32
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d008      	beq.n	8001700 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80016ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f0:	015a      	lsls	r2, r3, #5
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	4413      	add	r3, r2
 80016f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016fa:	461a      	mov	r2, r3
 80016fc:	2320      	movs	r3, #32
 80016fe:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d009      	beq.n	800171e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800170a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170c:	015a      	lsls	r2, r3, #5
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	4413      	add	r3, r2
 8001712:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001716:	461a      	mov	r2, r3
 8001718:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800171c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800171e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001720:	3301      	adds	r3, #1
 8001722:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001726:	085b      	lsrs	r3, r3, #1
 8001728:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800172a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800172c:	2b00      	cmp	r3, #0
 800172e:	f47f af62 	bne.w	80015f6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4618      	mov	r0, r3
 8001738:	f003 f96a 	bl	8004a10 <USB_ReadInterrupts>
 800173c:	4603      	mov	r3, r0
 800173e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001742:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001746:	f040 80db 	bne.w	8001900 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4618      	mov	r0, r3
 8001750:	f003 f98b 	bl	8004a6a <USB_ReadDevAllInEpInterrupt>
 8001754:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001756:	2300      	movs	r3, #0
 8001758:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800175a:	e0cd      	b.n	80018f8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800175c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	2b00      	cmp	r3, #0
 8001764:	f000 80c2 	beq.w	80018ec <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800176e:	b2d2      	uxtb	r2, r2
 8001770:	4611      	mov	r1, r2
 8001772:	4618      	mov	r0, r3
 8001774:	f003 f9b1 	bl	8004ada <USB_ReadDevInEPInterrupt>
 8001778:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	f003 0301 	and.w	r3, r3, #1
 8001780:	2b00      	cmp	r3, #0
 8001782:	d057      	beq.n	8001834 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001786:	f003 030f 	and.w	r3, r3, #15
 800178a:	2201      	movs	r2, #1
 800178c:	fa02 f303 	lsl.w	r3, r2, r3
 8001790:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001798:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	43db      	mvns	r3, r3
 800179e:	69f9      	ldr	r1, [r7, #28]
 80017a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80017a4:	4013      	ands	r3, r2
 80017a6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80017a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017aa:	015a      	lsls	r2, r3, #5
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	4413      	add	r3, r2
 80017b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017b4:	461a      	mov	r2, r3
 80017b6:	2301      	movs	r3, #1
 80017b8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	691b      	ldr	r3, [r3, #16]
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d132      	bne.n	8001828 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80017c2:	6879      	ldr	r1, [r7, #4]
 80017c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017c6:	4613      	mov	r3, r2
 80017c8:	00db      	lsls	r3, r3, #3
 80017ca:	4413      	add	r3, r2
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	440b      	add	r3, r1
 80017d0:	334c      	adds	r3, #76	; 0x4c
 80017d2:	6819      	ldr	r1, [r3, #0]
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017d8:	4613      	mov	r3, r2
 80017da:	00db      	lsls	r3, r3, #3
 80017dc:	4413      	add	r3, r2
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	4403      	add	r3, r0
 80017e2:	3348      	adds	r3, #72	; 0x48
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4419      	add	r1, r3
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017ec:	4613      	mov	r3, r2
 80017ee:	00db      	lsls	r3, r3, #3
 80017f0:	4413      	add	r3, r2
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	4403      	add	r3, r0
 80017f6:	334c      	adds	r3, #76	; 0x4c
 80017f8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80017fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d113      	bne.n	8001828 <HAL_PCD_IRQHandler+0x3a2>
 8001800:	6879      	ldr	r1, [r7, #4]
 8001802:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001804:	4613      	mov	r3, r2
 8001806:	00db      	lsls	r3, r3, #3
 8001808:	4413      	add	r3, r2
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	440b      	add	r3, r1
 800180e:	3354      	adds	r3, #84	; 0x54
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d108      	bne.n	8001828 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6818      	ldr	r0, [r3, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001820:	461a      	mov	r2, r3
 8001822:	2101      	movs	r1, #1
 8001824:	f003 f9b8 	bl	8004b98 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182a:	b2db      	uxtb	r3, r3
 800182c:	4619      	mov	r1, r3
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f005 fc93 	bl	800715a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	f003 0308 	and.w	r3, r3, #8
 800183a:	2b00      	cmp	r3, #0
 800183c:	d008      	beq.n	8001850 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800183e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001840:	015a      	lsls	r2, r3, #5
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	4413      	add	r3, r2
 8001846:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800184a:	461a      	mov	r2, r3
 800184c:	2308      	movs	r3, #8
 800184e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	f003 0310 	and.w	r3, r3, #16
 8001856:	2b00      	cmp	r3, #0
 8001858:	d008      	beq.n	800186c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800185a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185c:	015a      	lsls	r2, r3, #5
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	4413      	add	r3, r2
 8001862:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001866:	461a      	mov	r2, r3
 8001868:	2310      	movs	r3, #16
 800186a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001872:	2b00      	cmp	r3, #0
 8001874:	d008      	beq.n	8001888 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001878:	015a      	lsls	r2, r3, #5
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	4413      	add	r3, r2
 800187e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001882:	461a      	mov	r2, r3
 8001884:	2340      	movs	r3, #64	; 0x40
 8001886:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	f003 0302 	and.w	r3, r3, #2
 800188e:	2b00      	cmp	r3, #0
 8001890:	d023      	beq.n	80018da <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001892:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001894:	6a38      	ldr	r0, [r7, #32]
 8001896:	f002 f899 	bl	80039cc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800189a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800189c:	4613      	mov	r3, r2
 800189e:	00db      	lsls	r3, r3, #3
 80018a0:	4413      	add	r3, r2
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	3338      	adds	r3, #56	; 0x38
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	4413      	add	r3, r2
 80018aa:	3304      	adds	r3, #4
 80018ac:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	78db      	ldrb	r3, [r3, #3]
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d108      	bne.n	80018c8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	2200      	movs	r2, #0
 80018ba:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80018bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	4619      	mov	r1, r3
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f005 fcd6 	bl	8007274 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80018c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ca:	015a      	lsls	r2, r3, #5
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	4413      	add	r3, r2
 80018d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018d4:	461a      	mov	r2, r3
 80018d6:	2302      	movs	r3, #2
 80018d8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d003      	beq.n	80018ec <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80018e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f000 fcdb 	bl	80022a2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80018ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ee:	3301      	adds	r3, #1
 80018f0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80018f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018f4:	085b      	lsrs	r3, r3, #1
 80018f6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80018f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	f47f af2e 	bne.w	800175c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4618      	mov	r0, r3
 8001906:	f003 f883 	bl	8004a10 <USB_ReadInterrupts>
 800190a:	4603      	mov	r3, r0
 800190c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001910:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001914:	d122      	bne.n	800195c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	69fa      	ldr	r2, [r7, #28]
 8001920:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001924:	f023 0301 	bic.w	r3, r3, #1
 8001928:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001930:	2b01      	cmp	r3, #1
 8001932:	d108      	bne.n	8001946 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2200      	movs	r2, #0
 8001938:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800193c:	2100      	movs	r1, #0
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f000 fec2 	bl	80026c8 <HAL_PCDEx_LPM_Callback>
 8001944:	e002      	b.n	800194c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f005 fc74 	bl	8007234 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	695a      	ldr	r2, [r3, #20]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800195a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4618      	mov	r0, r3
 8001962:	f003 f855 	bl	8004a10 <USB_ReadInterrupts>
 8001966:	4603      	mov	r3, r0
 8001968:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800196c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001970:	d112      	bne.n	8001998 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	f003 0301 	and.w	r3, r3, #1
 800197e:	2b01      	cmp	r3, #1
 8001980:	d102      	bne.n	8001988 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f005 fc30 	bl	80071e8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	695a      	ldr	r2, [r3, #20]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001996:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4618      	mov	r0, r3
 800199e:	f003 f837 	bl	8004a10 <USB_ReadInterrupts>
 80019a2:	4603      	mov	r3, r0
 80019a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019ac:	f040 80b7 	bne.w	8001b1e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	69fa      	ldr	r2, [r7, #28]
 80019ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019be:	f023 0301 	bic.w	r3, r3, #1
 80019c2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2110      	movs	r1, #16
 80019ca:	4618      	mov	r0, r3
 80019cc:	f001 fffe 	bl	80039cc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019d0:	2300      	movs	r3, #0
 80019d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019d4:	e046      	b.n	8001a64 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80019d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019d8:	015a      	lsls	r2, r3, #5
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	4413      	add	r3, r2
 80019de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019e2:	461a      	mov	r2, r3
 80019e4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80019e8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80019ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019ec:	015a      	lsls	r2, r3, #5
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	4413      	add	r3, r2
 80019f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019fa:	0151      	lsls	r1, r2, #5
 80019fc:	69fa      	ldr	r2, [r7, #28]
 80019fe:	440a      	add	r2, r1
 8001a00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001a04:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001a08:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a0c:	015a      	lsls	r2, r3, #5
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	4413      	add	r3, r2
 8001a12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a16:	461a      	mov	r2, r3
 8001a18:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001a1c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a20:	015a      	lsls	r2, r3, #5
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	4413      	add	r3, r2
 8001a26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a2e:	0151      	lsls	r1, r2, #5
 8001a30:	69fa      	ldr	r2, [r7, #28]
 8001a32:	440a      	add	r2, r1
 8001a34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001a38:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001a3c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a40:	015a      	lsls	r2, r3, #5
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	4413      	add	r3, r2
 8001a46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a4e:	0151      	lsls	r1, r2, #5
 8001a50:	69fa      	ldr	r2, [r7, #28]
 8001a52:	440a      	add	r2, r1
 8001a54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001a58:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001a5c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a60:	3301      	adds	r3, #1
 8001a62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d3b3      	bcc.n	80019d6 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a74:	69db      	ldr	r3, [r3, #28]
 8001a76:	69fa      	ldr	r2, [r7, #28]
 8001a78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a7c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001a80:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d016      	beq.n	8001ab8 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a94:	69fa      	ldr	r2, [r7, #28]
 8001a96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a9a:	f043 030b 	orr.w	r3, r3, #11
 8001a9e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aaa:	69fa      	ldr	r2, [r7, #28]
 8001aac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ab0:	f043 030b 	orr.w	r3, r3, #11
 8001ab4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ab6:	e015      	b.n	8001ae4 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001abe:	695b      	ldr	r3, [r3, #20]
 8001ac0:	69fa      	ldr	r2, [r7, #28]
 8001ac2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ac6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001aca:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001ace:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ad6:	691b      	ldr	r3, [r3, #16]
 8001ad8:	69fa      	ldr	r2, [r7, #28]
 8001ada:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ade:	f043 030b 	orr.w	r3, r3, #11
 8001ae2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	69fa      	ldr	r2, [r7, #28]
 8001aee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001af2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001af6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6818      	ldr	r0, [r3, #0]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	691b      	ldr	r3, [r3, #16]
 8001b00:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001b08:	461a      	mov	r2, r3
 8001b0a:	f003 f845 	bl	8004b98 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	695a      	ldr	r2, [r3, #20]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001b1c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f002 ff74 	bl	8004a10 <USB_ReadInterrupts>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b32:	d124      	bne.n	8001b7e <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f003 f80a 	bl	8004b52 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f001 ffbf 	bl	8003ac6 <USB_GetDevSpeed>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681c      	ldr	r4, [r3, #0]
 8001b54:	f001 f9e8 	bl	8002f28 <HAL_RCC_GetHCLKFreq>
 8001b58:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	461a      	mov	r2, r3
 8001b62:	4620      	mov	r0, r4
 8001b64:	f001 fcbe 	bl	80034e4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f005 fb1e 	bl	80071aa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	695a      	ldr	r2, [r3, #20]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001b7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f002 ff44 	bl	8004a10 <USB_ReadInterrupts>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	f003 0308 	and.w	r3, r3, #8
 8001b8e:	2b08      	cmp	r3, #8
 8001b90:	d10a      	bne.n	8001ba8 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f005 fafb 	bl	800718e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	695a      	ldr	r2, [r3, #20]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f002 0208 	and.w	r2, r2, #8
 8001ba6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f002 ff2f 	bl	8004a10 <USB_ReadInterrupts>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bb8:	2b80      	cmp	r3, #128	; 0x80
 8001bba:	d122      	bne.n	8001c02 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001bbc:	6a3b      	ldr	r3, [r7, #32]
 8001bbe:	699b      	ldr	r3, [r3, #24]
 8001bc0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001bc4:	6a3b      	ldr	r3, [r7, #32]
 8001bc6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001bc8:	2301      	movs	r3, #1
 8001bca:	627b      	str	r3, [r7, #36]	; 0x24
 8001bcc:	e014      	b.n	8001bf8 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001bce:	6879      	ldr	r1, [r7, #4]
 8001bd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	00db      	lsls	r3, r3, #3
 8001bd6:	4413      	add	r3, r2
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	440b      	add	r3, r1
 8001bdc:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d105      	bne.n	8001bf2 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	4619      	mov	r1, r3
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f000 fb27 	bl	8002240 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	627b      	str	r3, [r7, #36]	; 0x24
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d3e5      	bcc.n	8001bce <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f002 ff02 	bl	8004a10 <USB_ReadInterrupts>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001c16:	d13b      	bne.n	8001c90 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001c18:	2301      	movs	r3, #1
 8001c1a:	627b      	str	r3, [r7, #36]	; 0x24
 8001c1c:	e02b      	b.n	8001c76 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c20:	015a      	lsls	r2, r3, #5
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	4413      	add	r3, r2
 8001c26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001c2e:	6879      	ldr	r1, [r7, #4]
 8001c30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c32:	4613      	mov	r3, r2
 8001c34:	00db      	lsls	r3, r3, #3
 8001c36:	4413      	add	r3, r2
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	440b      	add	r3, r1
 8001c3c:	3340      	adds	r3, #64	; 0x40
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d115      	bne.n	8001c70 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001c44:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	da12      	bge.n	8001c70 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001c4a:	6879      	ldr	r1, [r7, #4]
 8001c4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c4e:	4613      	mov	r3, r2
 8001c50:	00db      	lsls	r3, r3, #3
 8001c52:	4413      	add	r3, r2
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	440b      	add	r3, r1
 8001c58:	333f      	adds	r3, #63	; 0x3f
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	4619      	mov	r1, r3
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f000 fae8 	bl	8002240 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c72:	3301      	adds	r3, #1
 8001c74:	627b      	str	r3, [r7, #36]	; 0x24
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d3ce      	bcc.n	8001c1e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	695a      	ldr	r2, [r3, #20]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001c8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4618      	mov	r0, r3
 8001c96:	f002 febb 	bl	8004a10 <USB_ReadInterrupts>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ca0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001ca4:	d155      	bne.n	8001d52 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	627b      	str	r3, [r7, #36]	; 0x24
 8001caa:	e045      	b.n	8001d38 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cae:	015a      	lsls	r2, r3, #5
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001cbc:	6879      	ldr	r1, [r7, #4]
 8001cbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	00db      	lsls	r3, r3, #3
 8001cc4:	4413      	add	r3, r2
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	440b      	add	r3, r1
 8001cca:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d12e      	bne.n	8001d32 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001cd4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	da2b      	bge.n	8001d32 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001ce6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d121      	bne.n	8001d32 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001cee:	6879      	ldr	r1, [r7, #4]
 8001cf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	00db      	lsls	r3, r3, #3
 8001cf6:	4413      	add	r3, r2
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	440b      	add	r3, r1
 8001cfc:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001d00:	2201      	movs	r2, #1
 8001d02:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001d04:	6a3b      	ldr	r3, [r7, #32]
 8001d06:	699b      	ldr	r3, [r3, #24]
 8001d08:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001d0c:	6a3b      	ldr	r3, [r7, #32]
 8001d0e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001d10:	6a3b      	ldr	r3, [r7, #32]
 8001d12:	695b      	ldr	r3, [r3, #20]
 8001d14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d10a      	bne.n	8001d32 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	69fa      	ldr	r2, [r7, #28]
 8001d26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d2e:	6053      	str	r3, [r2, #4]
            break;
 8001d30:	e007      	b.n	8001d42 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d34:	3301      	adds	r3, #1
 8001d36:	627b      	str	r3, [r7, #36]	; 0x24
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d3b4      	bcc.n	8001cac <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	695a      	ldr	r2, [r3, #20]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001d50:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f002 fe5a 	bl	8004a10 <USB_ReadInterrupts>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001d62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d66:	d10a      	bne.n	8001d7e <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f005 fa95 	bl	8007298 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	695a      	ldr	r2, [r3, #20]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001d7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f002 fe44 	bl	8004a10 <USB_ReadInterrupts>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	f003 0304 	and.w	r3, r3, #4
 8001d8e:	2b04      	cmp	r3, #4
 8001d90:	d115      	bne.n	8001dbe <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	f003 0304 	and.w	r3, r3, #4
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d002      	beq.n	8001daa <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f005 fa85 	bl	80072b4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	6859      	ldr	r1, [r3, #4]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	430a      	orrs	r2, r1
 8001db8:	605a      	str	r2, [r3, #4]
 8001dba:	e000      	b.n	8001dbe <HAL_PCD_IRQHandler+0x938>
      return;
 8001dbc:	bf00      	nop
    }
  }
}
 8001dbe:	3734      	adds	r7, #52	; 0x34
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd90      	pop	{r4, r7, pc}

08001dc4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	460b      	mov	r3, r1
 8001dce:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d101      	bne.n	8001dde <HAL_PCD_SetAddress+0x1a>
 8001dda:	2302      	movs	r3, #2
 8001ddc:	e013      	b.n	8001e06 <HAL_PCD_SetAddress+0x42>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2201      	movs	r2, #1
 8001de2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	78fa      	ldrb	r2, [r7, #3]
 8001dea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	78fa      	ldrb	r2, [r7, #3]
 8001df4:	4611      	mov	r1, r2
 8001df6:	4618      	mov	r0, r3
 8001df8:	f002 fda2 	bl	8004940 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b084      	sub	sp, #16
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
 8001e16:	4608      	mov	r0, r1
 8001e18:	4611      	mov	r1, r2
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	70fb      	strb	r3, [r7, #3]
 8001e20:	460b      	mov	r3, r1
 8001e22:	803b      	strh	r3, [r7, #0]
 8001e24:	4613      	mov	r3, r2
 8001e26:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	da0f      	bge.n	8001e54 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e34:	78fb      	ldrb	r3, [r7, #3]
 8001e36:	f003 020f 	and.w	r2, r3, #15
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	00db      	lsls	r3, r3, #3
 8001e3e:	4413      	add	r3, r2
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	3338      	adds	r3, #56	; 0x38
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	4413      	add	r3, r2
 8001e48:	3304      	adds	r3, #4
 8001e4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	705a      	strb	r2, [r3, #1]
 8001e52:	e00f      	b.n	8001e74 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e54:	78fb      	ldrb	r3, [r7, #3]
 8001e56:	f003 020f 	and.w	r2, r3, #15
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	00db      	lsls	r3, r3, #3
 8001e5e:	4413      	add	r3, r2
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	4413      	add	r3, r2
 8001e6a:	3304      	adds	r3, #4
 8001e6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2200      	movs	r2, #0
 8001e72:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001e74:	78fb      	ldrb	r3, [r7, #3]
 8001e76:	f003 030f 	and.w	r3, r3, #15
 8001e7a:	b2da      	uxtb	r2, r3
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001e80:	883a      	ldrh	r2, [r7, #0]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	78ba      	ldrb	r2, [r7, #2]
 8001e8a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	785b      	ldrb	r3, [r3, #1]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d004      	beq.n	8001e9e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	b29a      	uxth	r2, r3
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001e9e:	78bb      	ldrb	r3, [r7, #2]
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d102      	bne.n	8001eaa <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d101      	bne.n	8001eb8 <HAL_PCD_EP_Open+0xaa>
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	e00e      	b.n	8001ed6 <HAL_PCD_EP_Open+0xc8>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	68f9      	ldr	r1, [r7, #12]
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f001 fe22 	bl	8003b10 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001ed4:	7afb      	ldrb	r3, [r7, #11]
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3710      	adds	r7, #16
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}

08001ede <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	b084      	sub	sp, #16
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001eea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	da0f      	bge.n	8001f12 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ef2:	78fb      	ldrb	r3, [r7, #3]
 8001ef4:	f003 020f 	and.w	r2, r3, #15
 8001ef8:	4613      	mov	r3, r2
 8001efa:	00db      	lsls	r3, r3, #3
 8001efc:	4413      	add	r3, r2
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	3338      	adds	r3, #56	; 0x38
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	4413      	add	r3, r2
 8001f06:	3304      	adds	r3, #4
 8001f08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	705a      	strb	r2, [r3, #1]
 8001f10:	e00f      	b.n	8001f32 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f12:	78fb      	ldrb	r3, [r7, #3]
 8001f14:	f003 020f 	and.w	r2, r3, #15
 8001f18:	4613      	mov	r3, r2
 8001f1a:	00db      	lsls	r3, r3, #3
 8001f1c:	4413      	add	r3, r2
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	4413      	add	r3, r2
 8001f28:	3304      	adds	r3, #4
 8001f2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001f32:	78fb      	ldrb	r3, [r7, #3]
 8001f34:	f003 030f 	and.w	r3, r3, #15
 8001f38:	b2da      	uxtb	r2, r3
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d101      	bne.n	8001f4c <HAL_PCD_EP_Close+0x6e>
 8001f48:	2302      	movs	r3, #2
 8001f4a:	e00e      	b.n	8001f6a <HAL_PCD_EP_Close+0x8c>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	68f9      	ldr	r1, [r7, #12]
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f001 fe60 	bl	8003c20 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2200      	movs	r2, #0
 8001f64:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001f68:	2300      	movs	r3, #0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3710      	adds	r7, #16
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}

08001f72 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f72:	b580      	push	{r7, lr}
 8001f74:	b086      	sub	sp, #24
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	60f8      	str	r0, [r7, #12]
 8001f7a:	607a      	str	r2, [r7, #4]
 8001f7c:	603b      	str	r3, [r7, #0]
 8001f7e:	460b      	mov	r3, r1
 8001f80:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f82:	7afb      	ldrb	r3, [r7, #11]
 8001f84:	f003 020f 	and.w	r2, r3, #15
 8001f88:	4613      	mov	r3, r2
 8001f8a:	00db      	lsls	r3, r3, #3
 8001f8c:	4413      	add	r3, r2
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001f94:	68fa      	ldr	r2, [r7, #12]
 8001f96:	4413      	add	r3, r2
 8001f98:	3304      	adds	r3, #4
 8001f9a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	683a      	ldr	r2, [r7, #0]
 8001fa6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	2200      	movs	r2, #0
 8001fac:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fb4:	7afb      	ldrb	r3, [r7, #11]
 8001fb6:	f003 030f 	and.w	r3, r3, #15
 8001fba:	b2da      	uxtb	r2, r3
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	691b      	ldr	r3, [r3, #16]
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d102      	bne.n	8001fce <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001fce:	7afb      	ldrb	r3, [r7, #11]
 8001fd0:	f003 030f 	and.w	r3, r3, #15
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d109      	bne.n	8001fec <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	6818      	ldr	r0, [r3, #0]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	691b      	ldr	r3, [r3, #16]
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	6979      	ldr	r1, [r7, #20]
 8001fe6:	f002 f93f 	bl	8004268 <USB_EP0StartXfer>
 8001fea:	e008      	b.n	8001ffe <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	6818      	ldr	r0, [r3, #0]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	691b      	ldr	r3, [r3, #16]
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	6979      	ldr	r1, [r7, #20]
 8001ffa:	f001 feed 	bl	8003dd8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001ffe:	2300      	movs	r3, #0
}
 8002000:	4618      	mov	r0, r3
 8002002:	3718      	adds	r7, #24
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}

08002008 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	460b      	mov	r3, r1
 8002012:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002014:	78fb      	ldrb	r3, [r7, #3]
 8002016:	f003 020f 	and.w	r2, r3, #15
 800201a:	6879      	ldr	r1, [r7, #4]
 800201c:	4613      	mov	r3, r2
 800201e:	00db      	lsls	r3, r3, #3
 8002020:	4413      	add	r3, r2
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	440b      	add	r3, r1
 8002026:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800202a:	681b      	ldr	r3, [r3, #0]
}
 800202c:	4618      	mov	r0, r3
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b086      	sub	sp, #24
 800203c:	af00      	add	r7, sp, #0
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	607a      	str	r2, [r7, #4]
 8002042:	603b      	str	r3, [r7, #0]
 8002044:	460b      	mov	r3, r1
 8002046:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002048:	7afb      	ldrb	r3, [r7, #11]
 800204a:	f003 020f 	and.w	r2, r3, #15
 800204e:	4613      	mov	r3, r2
 8002050:	00db      	lsls	r3, r3, #3
 8002052:	4413      	add	r3, r2
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	3338      	adds	r3, #56	; 0x38
 8002058:	68fa      	ldr	r2, [r7, #12]
 800205a:	4413      	add	r3, r2
 800205c:	3304      	adds	r3, #4
 800205e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	683a      	ldr	r2, [r7, #0]
 800206a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	2200      	movs	r2, #0
 8002070:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	2201      	movs	r2, #1
 8002076:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002078:	7afb      	ldrb	r3, [r7, #11]
 800207a:	f003 030f 	and.w	r3, r3, #15
 800207e:	b2da      	uxtb	r2, r3
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	691b      	ldr	r3, [r3, #16]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d102      	bne.n	8002092 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002092:	7afb      	ldrb	r3, [r7, #11]
 8002094:	f003 030f 	and.w	r3, r3, #15
 8002098:	2b00      	cmp	r3, #0
 800209a:	d109      	bne.n	80020b0 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	6818      	ldr	r0, [r3, #0]
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	691b      	ldr	r3, [r3, #16]
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	461a      	mov	r2, r3
 80020a8:	6979      	ldr	r1, [r7, #20]
 80020aa:	f002 f8dd 	bl	8004268 <USB_EP0StartXfer>
 80020ae:	e008      	b.n	80020c2 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	6818      	ldr	r0, [r3, #0]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	691b      	ldr	r3, [r3, #16]
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	461a      	mov	r2, r3
 80020bc:	6979      	ldr	r1, [r7, #20]
 80020be:	f001 fe8b 	bl	8003dd8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80020c2:	2300      	movs	r3, #0
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3718      	adds	r7, #24
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	460b      	mov	r3, r1
 80020d6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80020d8:	78fb      	ldrb	r3, [r7, #3]
 80020da:	f003 020f 	and.w	r2, r3, #15
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d901      	bls.n	80020ea <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e050      	b.n	800218c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80020ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	da0f      	bge.n	8002112 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020f2:	78fb      	ldrb	r3, [r7, #3]
 80020f4:	f003 020f 	and.w	r2, r3, #15
 80020f8:	4613      	mov	r3, r2
 80020fa:	00db      	lsls	r3, r3, #3
 80020fc:	4413      	add	r3, r2
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	3338      	adds	r3, #56	; 0x38
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	4413      	add	r3, r2
 8002106:	3304      	adds	r3, #4
 8002108:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2201      	movs	r2, #1
 800210e:	705a      	strb	r2, [r3, #1]
 8002110:	e00d      	b.n	800212e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002112:	78fa      	ldrb	r2, [r7, #3]
 8002114:	4613      	mov	r3, r2
 8002116:	00db      	lsls	r3, r3, #3
 8002118:	4413      	add	r3, r2
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	4413      	add	r3, r2
 8002124:	3304      	adds	r3, #4
 8002126:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2200      	movs	r2, #0
 800212c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2201      	movs	r2, #1
 8002132:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002134:	78fb      	ldrb	r3, [r7, #3]
 8002136:	f003 030f 	and.w	r3, r3, #15
 800213a:	b2da      	uxtb	r2, r3
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002146:	2b01      	cmp	r3, #1
 8002148:	d101      	bne.n	800214e <HAL_PCD_EP_SetStall+0x82>
 800214a:	2302      	movs	r3, #2
 800214c:	e01e      	b.n	800218c <HAL_PCD_EP_SetStall+0xc0>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2201      	movs	r2, #1
 8002152:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	68f9      	ldr	r1, [r7, #12]
 800215c:	4618      	mov	r0, r3
 800215e:	f002 fb1b 	bl	8004798 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002162:	78fb      	ldrb	r3, [r7, #3]
 8002164:	f003 030f 	and.w	r3, r3, #15
 8002168:	2b00      	cmp	r3, #0
 800216a:	d10a      	bne.n	8002182 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6818      	ldr	r0, [r3, #0]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	691b      	ldr	r3, [r3, #16]
 8002174:	b2d9      	uxtb	r1, r3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800217c:	461a      	mov	r2, r3
 800217e:	f002 fd0b 	bl	8004b98 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800218a:	2300      	movs	r3, #0
}
 800218c:	4618      	mov	r0, r3
 800218e:	3710      	adds	r7, #16
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}

08002194 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	460b      	mov	r3, r1
 800219e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80021a0:	78fb      	ldrb	r3, [r7, #3]
 80021a2:	f003 020f 	and.w	r2, r3, #15
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d901      	bls.n	80021b2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e042      	b.n	8002238 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80021b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	da0f      	bge.n	80021da <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021ba:	78fb      	ldrb	r3, [r7, #3]
 80021bc:	f003 020f 	and.w	r2, r3, #15
 80021c0:	4613      	mov	r3, r2
 80021c2:	00db      	lsls	r3, r3, #3
 80021c4:	4413      	add	r3, r2
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	3338      	adds	r3, #56	; 0x38
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	4413      	add	r3, r2
 80021ce:	3304      	adds	r3, #4
 80021d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2201      	movs	r2, #1
 80021d6:	705a      	strb	r2, [r3, #1]
 80021d8:	e00f      	b.n	80021fa <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021da:	78fb      	ldrb	r3, [r7, #3]
 80021dc:	f003 020f 	and.w	r2, r3, #15
 80021e0:	4613      	mov	r3, r2
 80021e2:	00db      	lsls	r3, r3, #3
 80021e4:	4413      	add	r3, r2
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	4413      	add	r3, r2
 80021f0:	3304      	adds	r3, #4
 80021f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2200      	movs	r2, #0
 80021f8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2200      	movs	r2, #0
 80021fe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002200:	78fb      	ldrb	r3, [r7, #3]
 8002202:	f003 030f 	and.w	r3, r3, #15
 8002206:	b2da      	uxtb	r2, r3
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002212:	2b01      	cmp	r3, #1
 8002214:	d101      	bne.n	800221a <HAL_PCD_EP_ClrStall+0x86>
 8002216:	2302      	movs	r3, #2
 8002218:	e00e      	b.n	8002238 <HAL_PCD_EP_ClrStall+0xa4>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2201      	movs	r2, #1
 800221e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	68f9      	ldr	r1, [r7, #12]
 8002228:	4618      	mov	r0, r3
 800222a:	f002 fb23 	bl	8004874 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002236:	2300      	movs	r3, #0
}
 8002238:	4618      	mov	r0, r3
 800223a:	3710      	adds	r7, #16
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}

08002240 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	460b      	mov	r3, r1
 800224a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800224c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002250:	2b00      	cmp	r3, #0
 8002252:	da0c      	bge.n	800226e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002254:	78fb      	ldrb	r3, [r7, #3]
 8002256:	f003 020f 	and.w	r2, r3, #15
 800225a:	4613      	mov	r3, r2
 800225c:	00db      	lsls	r3, r3, #3
 800225e:	4413      	add	r3, r2
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	3338      	adds	r3, #56	; 0x38
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	4413      	add	r3, r2
 8002268:	3304      	adds	r3, #4
 800226a:	60fb      	str	r3, [r7, #12]
 800226c:	e00c      	b.n	8002288 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800226e:	78fb      	ldrb	r3, [r7, #3]
 8002270:	f003 020f 	and.w	r2, r3, #15
 8002274:	4613      	mov	r3, r2
 8002276:	00db      	lsls	r3, r3, #3
 8002278:	4413      	add	r3, r2
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	4413      	add	r3, r2
 8002284:	3304      	adds	r3, #4
 8002286:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	68f9      	ldr	r1, [r7, #12]
 800228e:	4618      	mov	r0, r3
 8002290:	f002 f942 	bl	8004518 <USB_EPStopXfer>
 8002294:	4603      	mov	r3, r0
 8002296:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002298:	7afb      	ldrb	r3, [r7, #11]
}
 800229a:	4618      	mov	r0, r3
 800229c:	3710      	adds	r7, #16
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80022a2:	b580      	push	{r7, lr}
 80022a4:	b08a      	sub	sp, #40	; 0x28
 80022a6:	af02      	add	r7, sp, #8
 80022a8:	6078      	str	r0, [r7, #4]
 80022aa:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80022b6:	683a      	ldr	r2, [r7, #0]
 80022b8:	4613      	mov	r3, r2
 80022ba:	00db      	lsls	r3, r3, #3
 80022bc:	4413      	add	r3, r2
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	3338      	adds	r3, #56	; 0x38
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	4413      	add	r3, r2
 80022c6:	3304      	adds	r3, #4
 80022c8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	6a1a      	ldr	r2, [r3, #32]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	699b      	ldr	r3, [r3, #24]
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d901      	bls.n	80022da <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e06c      	b.n	80023b4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	699a      	ldr	r2, [r3, #24]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	6a1b      	ldr	r3, [r3, #32]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	69fa      	ldr	r2, [r7, #28]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d902      	bls.n	80022f6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	3303      	adds	r3, #3
 80022fa:	089b      	lsrs	r3, r3, #2
 80022fc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80022fe:	e02b      	b.n	8002358 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	699a      	ldr	r2, [r3, #24]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	6a1b      	ldr	r3, [r3, #32]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	69fa      	ldr	r2, [r7, #28]
 8002312:	429a      	cmp	r2, r3
 8002314:	d902      	bls.n	800231c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	3303      	adds	r3, #3
 8002320:	089b      	lsrs	r3, r3, #2
 8002322:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	6919      	ldr	r1, [r3, #16]
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	b2da      	uxtb	r2, r3
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002334:	b2db      	uxtb	r3, r3
 8002336:	9300      	str	r3, [sp, #0]
 8002338:	4603      	mov	r3, r0
 800233a:	6978      	ldr	r0, [r7, #20]
 800233c:	f002 f996 	bl	800466c <USB_WritePacket>

    ep->xfer_buff  += len;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	691a      	ldr	r2, [r3, #16]
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	441a      	add	r2, r3
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	6a1a      	ldr	r2, [r3, #32]
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	441a      	add	r2, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	015a      	lsls	r2, r3, #5
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	4413      	add	r3, r2
 8002360:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002364:	699b      	ldr	r3, [r3, #24]
 8002366:	b29b      	uxth	r3, r3
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	429a      	cmp	r2, r3
 800236c:	d809      	bhi.n	8002382 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	6a1a      	ldr	r2, [r3, #32]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002376:	429a      	cmp	r2, r3
 8002378:	d203      	bcs.n	8002382 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	699b      	ldr	r3, [r3, #24]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d1be      	bne.n	8002300 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	699a      	ldr	r2, [r3, #24]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	6a1b      	ldr	r3, [r3, #32]
 800238a:	429a      	cmp	r2, r3
 800238c:	d811      	bhi.n	80023b2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	f003 030f 	and.w	r3, r3, #15
 8002394:	2201      	movs	r2, #1
 8002396:	fa02 f303 	lsl.w	r3, r2, r3
 800239a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	43db      	mvns	r3, r3
 80023a8:	6939      	ldr	r1, [r7, #16]
 80023aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80023ae:	4013      	ands	r3, r2
 80023b0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80023b2:	2300      	movs	r3, #0
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3720      	adds	r7, #32
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b088      	sub	sp, #32
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	333c      	adds	r3, #60	; 0x3c
 80023d4:	3304      	adds	r3, #4
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	015a      	lsls	r2, r3, #5
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	4413      	add	r3, r2
 80023e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d17b      	bne.n	80024ea <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	f003 0308 	and.w	r3, r3, #8
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d015      	beq.n	8002428 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	4a61      	ldr	r2, [pc, #388]	; (8002584 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002400:	4293      	cmp	r3, r2
 8002402:	f240 80b9 	bls.w	8002578 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800240c:	2b00      	cmp	r3, #0
 800240e:	f000 80b3 	beq.w	8002578 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	015a      	lsls	r2, r3, #5
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	4413      	add	r3, r2
 800241a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800241e:	461a      	mov	r2, r3
 8002420:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002424:	6093      	str	r3, [r2, #8]
 8002426:	e0a7      	b.n	8002578 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	f003 0320 	and.w	r3, r3, #32
 800242e:	2b00      	cmp	r3, #0
 8002430:	d009      	beq.n	8002446 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	015a      	lsls	r2, r3, #5
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	4413      	add	r3, r2
 800243a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800243e:	461a      	mov	r2, r3
 8002440:	2320      	movs	r3, #32
 8002442:	6093      	str	r3, [r2, #8]
 8002444:	e098      	b.n	8002578 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800244c:	2b00      	cmp	r3, #0
 800244e:	f040 8093 	bne.w	8002578 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	4a4b      	ldr	r2, [pc, #300]	; (8002584 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d90f      	bls.n	800247a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002460:	2b00      	cmp	r3, #0
 8002462:	d00a      	beq.n	800247a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	015a      	lsls	r2, r3, #5
 8002468:	69bb      	ldr	r3, [r7, #24]
 800246a:	4413      	add	r3, r2
 800246c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002470:	461a      	mov	r2, r3
 8002472:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002476:	6093      	str	r3, [r2, #8]
 8002478:	e07e      	b.n	8002578 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800247a:	683a      	ldr	r2, [r7, #0]
 800247c:	4613      	mov	r3, r2
 800247e:	00db      	lsls	r3, r3, #3
 8002480:	4413      	add	r3, r2
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	4413      	add	r3, r2
 800248c:	3304      	adds	r3, #4
 800248e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	69da      	ldr	r2, [r3, #28]
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	0159      	lsls	r1, r3, #5
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	440b      	add	r3, r1
 800249c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024a0:	691b      	ldr	r3, [r3, #16]
 80024a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024a6:	1ad2      	subs	r2, r2, r3
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d114      	bne.n	80024dc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	699b      	ldr	r3, [r3, #24]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d109      	bne.n	80024ce <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6818      	ldr	r0, [r3, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80024c4:	461a      	mov	r2, r3
 80024c6:	2101      	movs	r1, #1
 80024c8:	f002 fb66 	bl	8004b98 <USB_EP0_OutStart>
 80024cc:	e006      	b.n	80024dc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	691a      	ldr	r2, [r3, #16]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	6a1b      	ldr	r3, [r3, #32]
 80024d6:	441a      	add	r2, r3
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	4619      	mov	r1, r3
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f004 fe1e 	bl	8007124 <HAL_PCD_DataOutStageCallback>
 80024e8:	e046      	b.n	8002578 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	4a26      	ldr	r2, [pc, #152]	; (8002588 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d124      	bne.n	800253c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d00a      	beq.n	8002512 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	015a      	lsls	r2, r3, #5
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	4413      	add	r3, r2
 8002504:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002508:	461a      	mov	r2, r3
 800250a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800250e:	6093      	str	r3, [r2, #8]
 8002510:	e032      	b.n	8002578 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	f003 0320 	and.w	r3, r3, #32
 8002518:	2b00      	cmp	r3, #0
 800251a:	d008      	beq.n	800252e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	015a      	lsls	r2, r3, #5
 8002520:	69bb      	ldr	r3, [r7, #24]
 8002522:	4413      	add	r3, r2
 8002524:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002528:	461a      	mov	r2, r3
 800252a:	2320      	movs	r3, #32
 800252c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	b2db      	uxtb	r3, r3
 8002532:	4619      	mov	r1, r3
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f004 fdf5 	bl	8007124 <HAL_PCD_DataOutStageCallback>
 800253a:	e01d      	b.n	8002578 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d114      	bne.n	800256c <PCD_EP_OutXfrComplete_int+0x1b0>
 8002542:	6879      	ldr	r1, [r7, #4]
 8002544:	683a      	ldr	r2, [r7, #0]
 8002546:	4613      	mov	r3, r2
 8002548:	00db      	lsls	r3, r3, #3
 800254a:	4413      	add	r3, r2
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	440b      	add	r3, r1
 8002550:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d108      	bne.n	800256c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6818      	ldr	r0, [r3, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002564:	461a      	mov	r2, r3
 8002566:	2100      	movs	r1, #0
 8002568:	f002 fb16 	bl	8004b98 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	b2db      	uxtb	r3, r3
 8002570:	4619      	mov	r1, r3
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f004 fdd6 	bl	8007124 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	3720      	adds	r7, #32
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	4f54300a 	.word	0x4f54300a
 8002588:	4f54310a 	.word	0x4f54310a

0800258c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b086      	sub	sp, #24
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	333c      	adds	r3, #60	; 0x3c
 80025a4:	3304      	adds	r3, #4
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	015a      	lsls	r2, r3, #5
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	4413      	add	r3, r2
 80025b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	4a15      	ldr	r2, [pc, #84]	; (8002614 <PCD_EP_OutSetupPacket_int+0x88>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d90e      	bls.n	80025e0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d009      	beq.n	80025e0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	015a      	lsls	r2, r3, #5
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	4413      	add	r3, r2
 80025d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025d8:	461a      	mov	r2, r3
 80025da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025de:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f004 fd8d 	bl	8007100 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	4a0a      	ldr	r2, [pc, #40]	; (8002614 <PCD_EP_OutSetupPacket_int+0x88>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d90c      	bls.n	8002608 <PCD_EP_OutSetupPacket_int+0x7c>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d108      	bne.n	8002608 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6818      	ldr	r0, [r3, #0]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002600:	461a      	mov	r2, r3
 8002602:	2101      	movs	r1, #1
 8002604:	f002 fac8 	bl	8004b98 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	3718      	adds	r7, #24
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	4f54300a 	.word	0x4f54300a

08002618 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002618:	b480      	push	{r7}
 800261a:	b085      	sub	sp, #20
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	460b      	mov	r3, r1
 8002622:	70fb      	strb	r3, [r7, #3]
 8002624:	4613      	mov	r3, r2
 8002626:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002630:	78fb      	ldrb	r3, [r7, #3]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d107      	bne.n	8002646 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002636:	883b      	ldrh	r3, [r7, #0]
 8002638:	0419      	lsls	r1, r3, #16
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	68ba      	ldr	r2, [r7, #8]
 8002640:	430a      	orrs	r2, r1
 8002642:	629a      	str	r2, [r3, #40]	; 0x28
 8002644:	e028      	b.n	8002698 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800264c:	0c1b      	lsrs	r3, r3, #16
 800264e:	68ba      	ldr	r2, [r7, #8]
 8002650:	4413      	add	r3, r2
 8002652:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002654:	2300      	movs	r3, #0
 8002656:	73fb      	strb	r3, [r7, #15]
 8002658:	e00d      	b.n	8002676 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	7bfb      	ldrb	r3, [r7, #15]
 8002660:	3340      	adds	r3, #64	; 0x40
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	4413      	add	r3, r2
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	0c1b      	lsrs	r3, r3, #16
 800266a:	68ba      	ldr	r2, [r7, #8]
 800266c:	4413      	add	r3, r2
 800266e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002670:	7bfb      	ldrb	r3, [r7, #15]
 8002672:	3301      	adds	r3, #1
 8002674:	73fb      	strb	r3, [r7, #15]
 8002676:	7bfa      	ldrb	r2, [r7, #15]
 8002678:	78fb      	ldrb	r3, [r7, #3]
 800267a:	3b01      	subs	r3, #1
 800267c:	429a      	cmp	r2, r3
 800267e:	d3ec      	bcc.n	800265a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002680:	883b      	ldrh	r3, [r7, #0]
 8002682:	0418      	lsls	r0, r3, #16
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6819      	ldr	r1, [r3, #0]
 8002688:	78fb      	ldrb	r3, [r7, #3]
 800268a:	3b01      	subs	r3, #1
 800268c:	68ba      	ldr	r2, [r7, #8]
 800268e:	4302      	orrs	r2, r0
 8002690:	3340      	adds	r3, #64	; 0x40
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	440b      	add	r3, r1
 8002696:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3714      	adds	r7, #20
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr

080026a6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80026a6:	b480      	push	{r7}
 80026a8:	b083      	sub	sp, #12
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
 80026ae:	460b      	mov	r3, r1
 80026b0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	887a      	ldrh	r2, [r7, #2]
 80026b8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80026ba:	2300      	movs	r3, #0
}
 80026bc:	4618      	mov	r0, r3
 80026be:	370c      	adds	r7, #12
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr

080026c8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	460b      	mov	r3, r1
 80026d2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80026d4:	bf00      	nop
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b086      	sub	sp, #24
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d101      	bne.n	80026f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e267      	b.n	8002bc2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0301 	and.w	r3, r3, #1
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d075      	beq.n	80027ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026fe:	4b88      	ldr	r3, [pc, #544]	; (8002920 <HAL_RCC_OscConfig+0x240>)
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f003 030c 	and.w	r3, r3, #12
 8002706:	2b04      	cmp	r3, #4
 8002708:	d00c      	beq.n	8002724 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800270a:	4b85      	ldr	r3, [pc, #532]	; (8002920 <HAL_RCC_OscConfig+0x240>)
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002712:	2b08      	cmp	r3, #8
 8002714:	d112      	bne.n	800273c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002716:	4b82      	ldr	r3, [pc, #520]	; (8002920 <HAL_RCC_OscConfig+0x240>)
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800271e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002722:	d10b      	bne.n	800273c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002724:	4b7e      	ldr	r3, [pc, #504]	; (8002920 <HAL_RCC_OscConfig+0x240>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d05b      	beq.n	80027e8 <HAL_RCC_OscConfig+0x108>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d157      	bne.n	80027e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e242      	b.n	8002bc2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002744:	d106      	bne.n	8002754 <HAL_RCC_OscConfig+0x74>
 8002746:	4b76      	ldr	r3, [pc, #472]	; (8002920 <HAL_RCC_OscConfig+0x240>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a75      	ldr	r2, [pc, #468]	; (8002920 <HAL_RCC_OscConfig+0x240>)
 800274c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002750:	6013      	str	r3, [r2, #0]
 8002752:	e01d      	b.n	8002790 <HAL_RCC_OscConfig+0xb0>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800275c:	d10c      	bne.n	8002778 <HAL_RCC_OscConfig+0x98>
 800275e:	4b70      	ldr	r3, [pc, #448]	; (8002920 <HAL_RCC_OscConfig+0x240>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a6f      	ldr	r2, [pc, #444]	; (8002920 <HAL_RCC_OscConfig+0x240>)
 8002764:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002768:	6013      	str	r3, [r2, #0]
 800276a:	4b6d      	ldr	r3, [pc, #436]	; (8002920 <HAL_RCC_OscConfig+0x240>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a6c      	ldr	r2, [pc, #432]	; (8002920 <HAL_RCC_OscConfig+0x240>)
 8002770:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002774:	6013      	str	r3, [r2, #0]
 8002776:	e00b      	b.n	8002790 <HAL_RCC_OscConfig+0xb0>
 8002778:	4b69      	ldr	r3, [pc, #420]	; (8002920 <HAL_RCC_OscConfig+0x240>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a68      	ldr	r2, [pc, #416]	; (8002920 <HAL_RCC_OscConfig+0x240>)
 800277e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002782:	6013      	str	r3, [r2, #0]
 8002784:	4b66      	ldr	r3, [pc, #408]	; (8002920 <HAL_RCC_OscConfig+0x240>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a65      	ldr	r2, [pc, #404]	; (8002920 <HAL_RCC_OscConfig+0x240>)
 800278a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800278e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d013      	beq.n	80027c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002798:	f7fe fa14 	bl	8000bc4 <HAL_GetTick>
 800279c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800279e:	e008      	b.n	80027b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027a0:	f7fe fa10 	bl	8000bc4 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b64      	cmp	r3, #100	; 0x64
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e207      	b.n	8002bc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027b2:	4b5b      	ldr	r3, [pc, #364]	; (8002920 <HAL_RCC_OscConfig+0x240>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d0f0      	beq.n	80027a0 <HAL_RCC_OscConfig+0xc0>
 80027be:	e014      	b.n	80027ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c0:	f7fe fa00 	bl	8000bc4 <HAL_GetTick>
 80027c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027c6:	e008      	b.n	80027da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027c8:	f7fe f9fc 	bl	8000bc4 <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	2b64      	cmp	r3, #100	; 0x64
 80027d4:	d901      	bls.n	80027da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e1f3      	b.n	8002bc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027da:	4b51      	ldr	r3, [pc, #324]	; (8002920 <HAL_RCC_OscConfig+0x240>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d1f0      	bne.n	80027c8 <HAL_RCC_OscConfig+0xe8>
 80027e6:	e000      	b.n	80027ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0302 	and.w	r3, r3, #2
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d063      	beq.n	80028be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027f6:	4b4a      	ldr	r3, [pc, #296]	; (8002920 <HAL_RCC_OscConfig+0x240>)
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f003 030c 	and.w	r3, r3, #12
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d00b      	beq.n	800281a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002802:	4b47      	ldr	r3, [pc, #284]	; (8002920 <HAL_RCC_OscConfig+0x240>)
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800280a:	2b08      	cmp	r3, #8
 800280c:	d11c      	bne.n	8002848 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800280e:	4b44      	ldr	r3, [pc, #272]	; (8002920 <HAL_RCC_OscConfig+0x240>)
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d116      	bne.n	8002848 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800281a:	4b41      	ldr	r3, [pc, #260]	; (8002920 <HAL_RCC_OscConfig+0x240>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0302 	and.w	r3, r3, #2
 8002822:	2b00      	cmp	r3, #0
 8002824:	d005      	beq.n	8002832 <HAL_RCC_OscConfig+0x152>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	2b01      	cmp	r3, #1
 800282c:	d001      	beq.n	8002832 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e1c7      	b.n	8002bc2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002832:	4b3b      	ldr	r3, [pc, #236]	; (8002920 <HAL_RCC_OscConfig+0x240>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	691b      	ldr	r3, [r3, #16]
 800283e:	00db      	lsls	r3, r3, #3
 8002840:	4937      	ldr	r1, [pc, #220]	; (8002920 <HAL_RCC_OscConfig+0x240>)
 8002842:	4313      	orrs	r3, r2
 8002844:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002846:	e03a      	b.n	80028be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d020      	beq.n	8002892 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002850:	4b34      	ldr	r3, [pc, #208]	; (8002924 <HAL_RCC_OscConfig+0x244>)
 8002852:	2201      	movs	r2, #1
 8002854:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002856:	f7fe f9b5 	bl	8000bc4 <HAL_GetTick>
 800285a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800285c:	e008      	b.n	8002870 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800285e:	f7fe f9b1 	bl	8000bc4 <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	2b02      	cmp	r3, #2
 800286a:	d901      	bls.n	8002870 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800286c:	2303      	movs	r3, #3
 800286e:	e1a8      	b.n	8002bc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002870:	4b2b      	ldr	r3, [pc, #172]	; (8002920 <HAL_RCC_OscConfig+0x240>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0302 	and.w	r3, r3, #2
 8002878:	2b00      	cmp	r3, #0
 800287a:	d0f0      	beq.n	800285e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800287c:	4b28      	ldr	r3, [pc, #160]	; (8002920 <HAL_RCC_OscConfig+0x240>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	691b      	ldr	r3, [r3, #16]
 8002888:	00db      	lsls	r3, r3, #3
 800288a:	4925      	ldr	r1, [pc, #148]	; (8002920 <HAL_RCC_OscConfig+0x240>)
 800288c:	4313      	orrs	r3, r2
 800288e:	600b      	str	r3, [r1, #0]
 8002890:	e015      	b.n	80028be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002892:	4b24      	ldr	r3, [pc, #144]	; (8002924 <HAL_RCC_OscConfig+0x244>)
 8002894:	2200      	movs	r2, #0
 8002896:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002898:	f7fe f994 	bl	8000bc4 <HAL_GetTick>
 800289c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800289e:	e008      	b.n	80028b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028a0:	f7fe f990 	bl	8000bc4 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e187      	b.n	8002bc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028b2:	4b1b      	ldr	r3, [pc, #108]	; (8002920 <HAL_RCC_OscConfig+0x240>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d1f0      	bne.n	80028a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0308 	and.w	r3, r3, #8
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d036      	beq.n	8002938 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	695b      	ldr	r3, [r3, #20]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d016      	beq.n	8002900 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028d2:	4b15      	ldr	r3, [pc, #84]	; (8002928 <HAL_RCC_OscConfig+0x248>)
 80028d4:	2201      	movs	r2, #1
 80028d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028d8:	f7fe f974 	bl	8000bc4 <HAL_GetTick>
 80028dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028de:	e008      	b.n	80028f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028e0:	f7fe f970 	bl	8000bc4 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e167      	b.n	8002bc2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028f2:	4b0b      	ldr	r3, [pc, #44]	; (8002920 <HAL_RCC_OscConfig+0x240>)
 80028f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d0f0      	beq.n	80028e0 <HAL_RCC_OscConfig+0x200>
 80028fe:	e01b      	b.n	8002938 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002900:	4b09      	ldr	r3, [pc, #36]	; (8002928 <HAL_RCC_OscConfig+0x248>)
 8002902:	2200      	movs	r2, #0
 8002904:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002906:	f7fe f95d 	bl	8000bc4 <HAL_GetTick>
 800290a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800290c:	e00e      	b.n	800292c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800290e:	f7fe f959 	bl	8000bc4 <HAL_GetTick>
 8002912:	4602      	mov	r2, r0
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	2b02      	cmp	r3, #2
 800291a:	d907      	bls.n	800292c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800291c:	2303      	movs	r3, #3
 800291e:	e150      	b.n	8002bc2 <HAL_RCC_OscConfig+0x4e2>
 8002920:	40023800 	.word	0x40023800
 8002924:	42470000 	.word	0x42470000
 8002928:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800292c:	4b88      	ldr	r3, [pc, #544]	; (8002b50 <HAL_RCC_OscConfig+0x470>)
 800292e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002930:	f003 0302 	and.w	r3, r3, #2
 8002934:	2b00      	cmp	r3, #0
 8002936:	d1ea      	bne.n	800290e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0304 	and.w	r3, r3, #4
 8002940:	2b00      	cmp	r3, #0
 8002942:	f000 8097 	beq.w	8002a74 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002946:	2300      	movs	r3, #0
 8002948:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800294a:	4b81      	ldr	r3, [pc, #516]	; (8002b50 <HAL_RCC_OscConfig+0x470>)
 800294c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d10f      	bne.n	8002976 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002956:	2300      	movs	r3, #0
 8002958:	60bb      	str	r3, [r7, #8]
 800295a:	4b7d      	ldr	r3, [pc, #500]	; (8002b50 <HAL_RCC_OscConfig+0x470>)
 800295c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295e:	4a7c      	ldr	r2, [pc, #496]	; (8002b50 <HAL_RCC_OscConfig+0x470>)
 8002960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002964:	6413      	str	r3, [r2, #64]	; 0x40
 8002966:	4b7a      	ldr	r3, [pc, #488]	; (8002b50 <HAL_RCC_OscConfig+0x470>)
 8002968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800296e:	60bb      	str	r3, [r7, #8]
 8002970:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002972:	2301      	movs	r3, #1
 8002974:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002976:	4b77      	ldr	r3, [pc, #476]	; (8002b54 <HAL_RCC_OscConfig+0x474>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800297e:	2b00      	cmp	r3, #0
 8002980:	d118      	bne.n	80029b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002982:	4b74      	ldr	r3, [pc, #464]	; (8002b54 <HAL_RCC_OscConfig+0x474>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a73      	ldr	r2, [pc, #460]	; (8002b54 <HAL_RCC_OscConfig+0x474>)
 8002988:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800298c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800298e:	f7fe f919 	bl	8000bc4 <HAL_GetTick>
 8002992:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002994:	e008      	b.n	80029a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002996:	f7fe f915 	bl	8000bc4 <HAL_GetTick>
 800299a:	4602      	mov	r2, r0
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d901      	bls.n	80029a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80029a4:	2303      	movs	r3, #3
 80029a6:	e10c      	b.n	8002bc2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029a8:	4b6a      	ldr	r3, [pc, #424]	; (8002b54 <HAL_RCC_OscConfig+0x474>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d0f0      	beq.n	8002996 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d106      	bne.n	80029ca <HAL_RCC_OscConfig+0x2ea>
 80029bc:	4b64      	ldr	r3, [pc, #400]	; (8002b50 <HAL_RCC_OscConfig+0x470>)
 80029be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c0:	4a63      	ldr	r2, [pc, #396]	; (8002b50 <HAL_RCC_OscConfig+0x470>)
 80029c2:	f043 0301 	orr.w	r3, r3, #1
 80029c6:	6713      	str	r3, [r2, #112]	; 0x70
 80029c8:	e01c      	b.n	8002a04 <HAL_RCC_OscConfig+0x324>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	2b05      	cmp	r3, #5
 80029d0:	d10c      	bne.n	80029ec <HAL_RCC_OscConfig+0x30c>
 80029d2:	4b5f      	ldr	r3, [pc, #380]	; (8002b50 <HAL_RCC_OscConfig+0x470>)
 80029d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d6:	4a5e      	ldr	r2, [pc, #376]	; (8002b50 <HAL_RCC_OscConfig+0x470>)
 80029d8:	f043 0304 	orr.w	r3, r3, #4
 80029dc:	6713      	str	r3, [r2, #112]	; 0x70
 80029de:	4b5c      	ldr	r3, [pc, #368]	; (8002b50 <HAL_RCC_OscConfig+0x470>)
 80029e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e2:	4a5b      	ldr	r2, [pc, #364]	; (8002b50 <HAL_RCC_OscConfig+0x470>)
 80029e4:	f043 0301 	orr.w	r3, r3, #1
 80029e8:	6713      	str	r3, [r2, #112]	; 0x70
 80029ea:	e00b      	b.n	8002a04 <HAL_RCC_OscConfig+0x324>
 80029ec:	4b58      	ldr	r3, [pc, #352]	; (8002b50 <HAL_RCC_OscConfig+0x470>)
 80029ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f0:	4a57      	ldr	r2, [pc, #348]	; (8002b50 <HAL_RCC_OscConfig+0x470>)
 80029f2:	f023 0301 	bic.w	r3, r3, #1
 80029f6:	6713      	str	r3, [r2, #112]	; 0x70
 80029f8:	4b55      	ldr	r3, [pc, #340]	; (8002b50 <HAL_RCC_OscConfig+0x470>)
 80029fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029fc:	4a54      	ldr	r2, [pc, #336]	; (8002b50 <HAL_RCC_OscConfig+0x470>)
 80029fe:	f023 0304 	bic.w	r3, r3, #4
 8002a02:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d015      	beq.n	8002a38 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a0c:	f7fe f8da 	bl	8000bc4 <HAL_GetTick>
 8002a10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a12:	e00a      	b.n	8002a2a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a14:	f7fe f8d6 	bl	8000bc4 <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d901      	bls.n	8002a2a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e0cb      	b.n	8002bc2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a2a:	4b49      	ldr	r3, [pc, #292]	; (8002b50 <HAL_RCC_OscConfig+0x470>)
 8002a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a2e:	f003 0302 	and.w	r3, r3, #2
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d0ee      	beq.n	8002a14 <HAL_RCC_OscConfig+0x334>
 8002a36:	e014      	b.n	8002a62 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a38:	f7fe f8c4 	bl	8000bc4 <HAL_GetTick>
 8002a3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a3e:	e00a      	b.n	8002a56 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a40:	f7fe f8c0 	bl	8000bc4 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d901      	bls.n	8002a56 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e0b5      	b.n	8002bc2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a56:	4b3e      	ldr	r3, [pc, #248]	; (8002b50 <HAL_RCC_OscConfig+0x470>)
 8002a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a5a:	f003 0302 	and.w	r3, r3, #2
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d1ee      	bne.n	8002a40 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a62:	7dfb      	ldrb	r3, [r7, #23]
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d105      	bne.n	8002a74 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a68:	4b39      	ldr	r3, [pc, #228]	; (8002b50 <HAL_RCC_OscConfig+0x470>)
 8002a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6c:	4a38      	ldr	r2, [pc, #224]	; (8002b50 <HAL_RCC_OscConfig+0x470>)
 8002a6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a72:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	699b      	ldr	r3, [r3, #24]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	f000 80a1 	beq.w	8002bc0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a7e:	4b34      	ldr	r3, [pc, #208]	; (8002b50 <HAL_RCC_OscConfig+0x470>)
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f003 030c 	and.w	r3, r3, #12
 8002a86:	2b08      	cmp	r3, #8
 8002a88:	d05c      	beq.n	8002b44 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	699b      	ldr	r3, [r3, #24]
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d141      	bne.n	8002b16 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a92:	4b31      	ldr	r3, [pc, #196]	; (8002b58 <HAL_RCC_OscConfig+0x478>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a98:	f7fe f894 	bl	8000bc4 <HAL_GetTick>
 8002a9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a9e:	e008      	b.n	8002ab2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002aa0:	f7fe f890 	bl	8000bc4 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e087      	b.n	8002bc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ab2:	4b27      	ldr	r3, [pc, #156]	; (8002b50 <HAL_RCC_OscConfig+0x470>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d1f0      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	69da      	ldr	r2, [r3, #28]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a1b      	ldr	r3, [r3, #32]
 8002ac6:	431a      	orrs	r2, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002acc:	019b      	lsls	r3, r3, #6
 8002ace:	431a      	orrs	r2, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad4:	085b      	lsrs	r3, r3, #1
 8002ad6:	3b01      	subs	r3, #1
 8002ad8:	041b      	lsls	r3, r3, #16
 8002ada:	431a      	orrs	r2, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae0:	061b      	lsls	r3, r3, #24
 8002ae2:	491b      	ldr	r1, [pc, #108]	; (8002b50 <HAL_RCC_OscConfig+0x470>)
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ae8:	4b1b      	ldr	r3, [pc, #108]	; (8002b58 <HAL_RCC_OscConfig+0x478>)
 8002aea:	2201      	movs	r2, #1
 8002aec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aee:	f7fe f869 	bl	8000bc4 <HAL_GetTick>
 8002af2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002af4:	e008      	b.n	8002b08 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002af6:	f7fe f865 	bl	8000bc4 <HAL_GetTick>
 8002afa:	4602      	mov	r2, r0
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d901      	bls.n	8002b08 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	e05c      	b.n	8002bc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b08:	4b11      	ldr	r3, [pc, #68]	; (8002b50 <HAL_RCC_OscConfig+0x470>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d0f0      	beq.n	8002af6 <HAL_RCC_OscConfig+0x416>
 8002b14:	e054      	b.n	8002bc0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b16:	4b10      	ldr	r3, [pc, #64]	; (8002b58 <HAL_RCC_OscConfig+0x478>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b1c:	f7fe f852 	bl	8000bc4 <HAL_GetTick>
 8002b20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b22:	e008      	b.n	8002b36 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b24:	f7fe f84e 	bl	8000bc4 <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d901      	bls.n	8002b36 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e045      	b.n	8002bc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b36:	4b06      	ldr	r3, [pc, #24]	; (8002b50 <HAL_RCC_OscConfig+0x470>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d1f0      	bne.n	8002b24 <HAL_RCC_OscConfig+0x444>
 8002b42:	e03d      	b.n	8002bc0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	699b      	ldr	r3, [r3, #24]
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d107      	bne.n	8002b5c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e038      	b.n	8002bc2 <HAL_RCC_OscConfig+0x4e2>
 8002b50:	40023800 	.word	0x40023800
 8002b54:	40007000 	.word	0x40007000
 8002b58:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b5c:	4b1b      	ldr	r3, [pc, #108]	; (8002bcc <HAL_RCC_OscConfig+0x4ec>)
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	699b      	ldr	r3, [r3, #24]
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d028      	beq.n	8002bbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d121      	bne.n	8002bbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d11a      	bne.n	8002bbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b86:	68fa      	ldr	r2, [r7, #12]
 8002b88:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b92:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d111      	bne.n	8002bbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba2:	085b      	lsrs	r3, r3, #1
 8002ba4:	3b01      	subs	r3, #1
 8002ba6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d107      	bne.n	8002bbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d001      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e000      	b.n	8002bc2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3718      	adds	r7, #24
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	40023800 	.word	0x40023800

08002bd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d101      	bne.n	8002be4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e0cc      	b.n	8002d7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002be4:	4b68      	ldr	r3, [pc, #416]	; (8002d88 <HAL_RCC_ClockConfig+0x1b8>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0307 	and.w	r3, r3, #7
 8002bec:	683a      	ldr	r2, [r7, #0]
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d90c      	bls.n	8002c0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bf2:	4b65      	ldr	r3, [pc, #404]	; (8002d88 <HAL_RCC_ClockConfig+0x1b8>)
 8002bf4:	683a      	ldr	r2, [r7, #0]
 8002bf6:	b2d2      	uxtb	r2, r2
 8002bf8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bfa:	4b63      	ldr	r3, [pc, #396]	; (8002d88 <HAL_RCC_ClockConfig+0x1b8>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0307 	and.w	r3, r3, #7
 8002c02:	683a      	ldr	r2, [r7, #0]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d001      	beq.n	8002c0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e0b8      	b.n	8002d7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0302 	and.w	r3, r3, #2
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d020      	beq.n	8002c5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0304 	and.w	r3, r3, #4
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d005      	beq.n	8002c30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c24:	4b59      	ldr	r3, [pc, #356]	; (8002d8c <HAL_RCC_ClockConfig+0x1bc>)
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	4a58      	ldr	r2, [pc, #352]	; (8002d8c <HAL_RCC_ClockConfig+0x1bc>)
 8002c2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c2e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0308 	and.w	r3, r3, #8
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d005      	beq.n	8002c48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c3c:	4b53      	ldr	r3, [pc, #332]	; (8002d8c <HAL_RCC_ClockConfig+0x1bc>)
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	4a52      	ldr	r2, [pc, #328]	; (8002d8c <HAL_RCC_ClockConfig+0x1bc>)
 8002c42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c48:	4b50      	ldr	r3, [pc, #320]	; (8002d8c <HAL_RCC_ClockConfig+0x1bc>)
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	494d      	ldr	r1, [pc, #308]	; (8002d8c <HAL_RCC_ClockConfig+0x1bc>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0301 	and.w	r3, r3, #1
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d044      	beq.n	8002cf0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d107      	bne.n	8002c7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c6e:	4b47      	ldr	r3, [pc, #284]	; (8002d8c <HAL_RCC_ClockConfig+0x1bc>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d119      	bne.n	8002cae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e07f      	b.n	8002d7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d003      	beq.n	8002c8e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c8a:	2b03      	cmp	r3, #3
 8002c8c:	d107      	bne.n	8002c9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c8e:	4b3f      	ldr	r3, [pc, #252]	; (8002d8c <HAL_RCC_ClockConfig+0x1bc>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d109      	bne.n	8002cae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e06f      	b.n	8002d7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c9e:	4b3b      	ldr	r3, [pc, #236]	; (8002d8c <HAL_RCC_ClockConfig+0x1bc>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0302 	and.w	r3, r3, #2
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d101      	bne.n	8002cae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e067      	b.n	8002d7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cae:	4b37      	ldr	r3, [pc, #220]	; (8002d8c <HAL_RCC_ClockConfig+0x1bc>)
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	f023 0203 	bic.w	r2, r3, #3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	4934      	ldr	r1, [pc, #208]	; (8002d8c <HAL_RCC_ClockConfig+0x1bc>)
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cc0:	f7fd ff80 	bl	8000bc4 <HAL_GetTick>
 8002cc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cc6:	e00a      	b.n	8002cde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cc8:	f7fd ff7c 	bl	8000bc4 <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d901      	bls.n	8002cde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e04f      	b.n	8002d7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cde:	4b2b      	ldr	r3, [pc, #172]	; (8002d8c <HAL_RCC_ClockConfig+0x1bc>)
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f003 020c 	and.w	r2, r3, #12
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d1eb      	bne.n	8002cc8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cf0:	4b25      	ldr	r3, [pc, #148]	; (8002d88 <HAL_RCC_ClockConfig+0x1b8>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0307 	and.w	r3, r3, #7
 8002cf8:	683a      	ldr	r2, [r7, #0]
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d20c      	bcs.n	8002d18 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cfe:	4b22      	ldr	r3, [pc, #136]	; (8002d88 <HAL_RCC_ClockConfig+0x1b8>)
 8002d00:	683a      	ldr	r2, [r7, #0]
 8002d02:	b2d2      	uxtb	r2, r2
 8002d04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d06:	4b20      	ldr	r3, [pc, #128]	; (8002d88 <HAL_RCC_ClockConfig+0x1b8>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0307 	and.w	r3, r3, #7
 8002d0e:	683a      	ldr	r2, [r7, #0]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d001      	beq.n	8002d18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e032      	b.n	8002d7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0304 	and.w	r3, r3, #4
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d008      	beq.n	8002d36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d24:	4b19      	ldr	r3, [pc, #100]	; (8002d8c <HAL_RCC_ClockConfig+0x1bc>)
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	4916      	ldr	r1, [pc, #88]	; (8002d8c <HAL_RCC_ClockConfig+0x1bc>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0308 	and.w	r3, r3, #8
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d009      	beq.n	8002d56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d42:	4b12      	ldr	r3, [pc, #72]	; (8002d8c <HAL_RCC_ClockConfig+0x1bc>)
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	691b      	ldr	r3, [r3, #16]
 8002d4e:	00db      	lsls	r3, r3, #3
 8002d50:	490e      	ldr	r1, [pc, #56]	; (8002d8c <HAL_RCC_ClockConfig+0x1bc>)
 8002d52:	4313      	orrs	r3, r2
 8002d54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d56:	f000 f821 	bl	8002d9c <HAL_RCC_GetSysClockFreq>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	4b0b      	ldr	r3, [pc, #44]	; (8002d8c <HAL_RCC_ClockConfig+0x1bc>)
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	091b      	lsrs	r3, r3, #4
 8002d62:	f003 030f 	and.w	r3, r3, #15
 8002d66:	490a      	ldr	r1, [pc, #40]	; (8002d90 <HAL_RCC_ClockConfig+0x1c0>)
 8002d68:	5ccb      	ldrb	r3, [r1, r3]
 8002d6a:	fa22 f303 	lsr.w	r3, r2, r3
 8002d6e:	4a09      	ldr	r2, [pc, #36]	; (8002d94 <HAL_RCC_ClockConfig+0x1c4>)
 8002d70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d72:	4b09      	ldr	r3, [pc, #36]	; (8002d98 <HAL_RCC_ClockConfig+0x1c8>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7fd fee0 	bl	8000b3c <HAL_InitTick>

  return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3710      	adds	r7, #16
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	40023c00 	.word	0x40023c00
 8002d8c:	40023800 	.word	0x40023800
 8002d90:	0800772c 	.word	0x0800772c
 8002d94:	20000000 	.word	0x20000000
 8002d98:	20000004 	.word	0x20000004

08002d9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002da0:	b090      	sub	sp, #64	; 0x40
 8002da2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002da4:	2300      	movs	r3, #0
 8002da6:	637b      	str	r3, [r7, #52]	; 0x34
 8002da8:	2300      	movs	r3, #0
 8002daa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002dac:	2300      	movs	r3, #0
 8002dae:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002db0:	2300      	movs	r3, #0
 8002db2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002db4:	4b59      	ldr	r3, [pc, #356]	; (8002f1c <HAL_RCC_GetSysClockFreq+0x180>)
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	f003 030c 	and.w	r3, r3, #12
 8002dbc:	2b08      	cmp	r3, #8
 8002dbe:	d00d      	beq.n	8002ddc <HAL_RCC_GetSysClockFreq+0x40>
 8002dc0:	2b08      	cmp	r3, #8
 8002dc2:	f200 80a1 	bhi.w	8002f08 <HAL_RCC_GetSysClockFreq+0x16c>
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d002      	beq.n	8002dd0 <HAL_RCC_GetSysClockFreq+0x34>
 8002dca:	2b04      	cmp	r3, #4
 8002dcc:	d003      	beq.n	8002dd6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002dce:	e09b      	b.n	8002f08 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002dd0:	4b53      	ldr	r3, [pc, #332]	; (8002f20 <HAL_RCC_GetSysClockFreq+0x184>)
 8002dd2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002dd4:	e09b      	b.n	8002f0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002dd6:	4b53      	ldr	r3, [pc, #332]	; (8002f24 <HAL_RCC_GetSysClockFreq+0x188>)
 8002dd8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002dda:	e098      	b.n	8002f0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ddc:	4b4f      	ldr	r3, [pc, #316]	; (8002f1c <HAL_RCC_GetSysClockFreq+0x180>)
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002de4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002de6:	4b4d      	ldr	r3, [pc, #308]	; (8002f1c <HAL_RCC_GetSysClockFreq+0x180>)
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d028      	beq.n	8002e44 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002df2:	4b4a      	ldr	r3, [pc, #296]	; (8002f1c <HAL_RCC_GetSysClockFreq+0x180>)
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	099b      	lsrs	r3, r3, #6
 8002df8:	2200      	movs	r2, #0
 8002dfa:	623b      	str	r3, [r7, #32]
 8002dfc:	627a      	str	r2, [r7, #36]	; 0x24
 8002dfe:	6a3b      	ldr	r3, [r7, #32]
 8002e00:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002e04:	2100      	movs	r1, #0
 8002e06:	4b47      	ldr	r3, [pc, #284]	; (8002f24 <HAL_RCC_GetSysClockFreq+0x188>)
 8002e08:	fb03 f201 	mul.w	r2, r3, r1
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	fb00 f303 	mul.w	r3, r0, r3
 8002e12:	4413      	add	r3, r2
 8002e14:	4a43      	ldr	r2, [pc, #268]	; (8002f24 <HAL_RCC_GetSysClockFreq+0x188>)
 8002e16:	fba0 1202 	umull	r1, r2, r0, r2
 8002e1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e1c:	460a      	mov	r2, r1
 8002e1e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002e20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e22:	4413      	add	r3, r2
 8002e24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e28:	2200      	movs	r2, #0
 8002e2a:	61bb      	str	r3, [r7, #24]
 8002e2c:	61fa      	str	r2, [r7, #28]
 8002e2e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e32:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002e36:	f7fd f9cd 	bl	80001d4 <__aeabi_uldivmod>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	4613      	mov	r3, r2
 8002e40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e42:	e053      	b.n	8002eec <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e44:	4b35      	ldr	r3, [pc, #212]	; (8002f1c <HAL_RCC_GetSysClockFreq+0x180>)
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	099b      	lsrs	r3, r3, #6
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	613b      	str	r3, [r7, #16]
 8002e4e:	617a      	str	r2, [r7, #20]
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002e56:	f04f 0b00 	mov.w	fp, #0
 8002e5a:	4652      	mov	r2, sl
 8002e5c:	465b      	mov	r3, fp
 8002e5e:	f04f 0000 	mov.w	r0, #0
 8002e62:	f04f 0100 	mov.w	r1, #0
 8002e66:	0159      	lsls	r1, r3, #5
 8002e68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e6c:	0150      	lsls	r0, r2, #5
 8002e6e:	4602      	mov	r2, r0
 8002e70:	460b      	mov	r3, r1
 8002e72:	ebb2 080a 	subs.w	r8, r2, sl
 8002e76:	eb63 090b 	sbc.w	r9, r3, fp
 8002e7a:	f04f 0200 	mov.w	r2, #0
 8002e7e:	f04f 0300 	mov.w	r3, #0
 8002e82:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002e86:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002e8a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002e8e:	ebb2 0408 	subs.w	r4, r2, r8
 8002e92:	eb63 0509 	sbc.w	r5, r3, r9
 8002e96:	f04f 0200 	mov.w	r2, #0
 8002e9a:	f04f 0300 	mov.w	r3, #0
 8002e9e:	00eb      	lsls	r3, r5, #3
 8002ea0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ea4:	00e2      	lsls	r2, r4, #3
 8002ea6:	4614      	mov	r4, r2
 8002ea8:	461d      	mov	r5, r3
 8002eaa:	eb14 030a 	adds.w	r3, r4, sl
 8002eae:	603b      	str	r3, [r7, #0]
 8002eb0:	eb45 030b 	adc.w	r3, r5, fp
 8002eb4:	607b      	str	r3, [r7, #4]
 8002eb6:	f04f 0200 	mov.w	r2, #0
 8002eba:	f04f 0300 	mov.w	r3, #0
 8002ebe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ec2:	4629      	mov	r1, r5
 8002ec4:	028b      	lsls	r3, r1, #10
 8002ec6:	4621      	mov	r1, r4
 8002ec8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ecc:	4621      	mov	r1, r4
 8002ece:	028a      	lsls	r2, r1, #10
 8002ed0:	4610      	mov	r0, r2
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	60bb      	str	r3, [r7, #8]
 8002eda:	60fa      	str	r2, [r7, #12]
 8002edc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ee0:	f7fd f978 	bl	80001d4 <__aeabi_uldivmod>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	460b      	mov	r3, r1
 8002ee8:	4613      	mov	r3, r2
 8002eea:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002eec:	4b0b      	ldr	r3, [pc, #44]	; (8002f1c <HAL_RCC_GetSysClockFreq+0x180>)
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	0c1b      	lsrs	r3, r3, #16
 8002ef2:	f003 0303 	and.w	r3, r3, #3
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	005b      	lsls	r3, r3, #1
 8002efa:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002efc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f00:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f04:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002f06:	e002      	b.n	8002f0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f08:	4b05      	ldr	r3, [pc, #20]	; (8002f20 <HAL_RCC_GetSysClockFreq+0x184>)
 8002f0a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002f0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3740      	adds	r7, #64	; 0x40
 8002f14:	46bd      	mov	sp, r7
 8002f16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f1a:	bf00      	nop
 8002f1c:	40023800 	.word	0x40023800
 8002f20:	00f42400 	.word	0x00f42400
 8002f24:	017d7840 	.word	0x017d7840

08002f28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f2c:	4b03      	ldr	r3, [pc, #12]	; (8002f3c <HAL_RCC_GetHCLKFreq+0x14>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	20000000 	.word	0x20000000

08002f40 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b086      	sub	sp, #24
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0301 	and.w	r3, r3, #1
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d105      	bne.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d035      	beq.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002f68:	4b67      	ldr	r3, [pc, #412]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002f6e:	f7fd fe29 	bl	8000bc4 <HAL_GetTick>
 8002f72:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f74:	e008      	b.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002f76:	f7fd fe25 	bl	8000bc4 <HAL_GetTick>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d901      	bls.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f84:	2303      	movs	r3, #3
 8002f86:	e0ba      	b.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f88:	4b60      	ldr	r3, [pc, #384]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d1f0      	bne.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	019a      	lsls	r2, r3, #6
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	071b      	lsls	r3, r3, #28
 8002fa0:	495a      	ldr	r1, [pc, #360]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002fa8:	4b57      	ldr	r3, [pc, #348]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002faa:	2201      	movs	r2, #1
 8002fac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002fae:	f7fd fe09 	bl	8000bc4 <HAL_GetTick>
 8002fb2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002fb4:	e008      	b.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002fb6:	f7fd fe05 	bl	8000bc4 <HAL_GetTick>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d901      	bls.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	e09a      	b.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002fc8:	4b50      	ldr	r3, [pc, #320]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d0f0      	beq.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0302 	and.w	r3, r3, #2
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	f000 8083 	beq.w	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	60fb      	str	r3, [r7, #12]
 8002fe6:	4b49      	ldr	r3, [pc, #292]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fea:	4a48      	ldr	r2, [pc, #288]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002fec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ff0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ff2:	4b46      	ldr	r3, [pc, #280]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ffa:	60fb      	str	r3, [r7, #12]
 8002ffc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002ffe:	4b44      	ldr	r3, [pc, #272]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a43      	ldr	r2, [pc, #268]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003004:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003008:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800300a:	f7fd fddb 	bl	8000bc4 <HAL_GetTick>
 800300e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003010:	e008      	b.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003012:	f7fd fdd7 	bl	8000bc4 <HAL_GetTick>
 8003016:	4602      	mov	r2, r0
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	2b02      	cmp	r3, #2
 800301e:	d901      	bls.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	e06c      	b.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003024:	4b3a      	ldr	r3, [pc, #232]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800302c:	2b00      	cmp	r3, #0
 800302e:	d0f0      	beq.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003030:	4b36      	ldr	r3, [pc, #216]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003034:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003038:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d02f      	beq.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003048:	693a      	ldr	r2, [r7, #16]
 800304a:	429a      	cmp	r2, r3
 800304c:	d028      	beq.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800304e:	4b2f      	ldr	r3, [pc, #188]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003052:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003056:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003058:	4b2e      	ldr	r3, [pc, #184]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800305a:	2201      	movs	r2, #1
 800305c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800305e:	4b2d      	ldr	r3, [pc, #180]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003060:	2200      	movs	r2, #0
 8003062:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003064:	4a29      	ldr	r2, [pc, #164]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800306a:	4b28      	ldr	r3, [pc, #160]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800306c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800306e:	f003 0301 	and.w	r3, r3, #1
 8003072:	2b01      	cmp	r3, #1
 8003074:	d114      	bne.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003076:	f7fd fda5 	bl	8000bc4 <HAL_GetTick>
 800307a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800307c:	e00a      	b.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800307e:	f7fd fda1 	bl	8000bc4 <HAL_GetTick>
 8003082:	4602      	mov	r2, r0
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	f241 3288 	movw	r2, #5000	; 0x1388
 800308c:	4293      	cmp	r3, r2
 800308e:	d901      	bls.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e034      	b.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003094:	4b1d      	ldr	r3, [pc, #116]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003096:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003098:	f003 0302 	and.w	r3, r3, #2
 800309c:	2b00      	cmp	r3, #0
 800309e:	d0ee      	beq.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030ac:	d10d      	bne.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80030ae:	4b17      	ldr	r3, [pc, #92]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80030be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030c2:	4912      	ldr	r1, [pc, #72]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80030c4:	4313      	orrs	r3, r2
 80030c6:	608b      	str	r3, [r1, #8]
 80030c8:	e005      	b.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80030ca:	4b10      	ldr	r3, [pc, #64]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	4a0f      	ldr	r2, [pc, #60]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80030d0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80030d4:	6093      	str	r3, [r2, #8]
 80030d6:	4b0d      	ldr	r3, [pc, #52]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80030d8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030e2:	490a      	ldr	r1, [pc, #40]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0308 	and.w	r3, r3, #8
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d003      	beq.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	7c1a      	ldrb	r2, [r3, #16]
 80030f8:	4b07      	ldr	r3, [pc, #28]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80030fa:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80030fc:	2300      	movs	r3, #0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3718      	adds	r7, #24
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	42470068 	.word	0x42470068
 800310c:	40023800 	.word	0x40023800
 8003110:	40007000 	.word	0x40007000
 8003114:	42470e40 	.word	0x42470e40
 8003118:	424711e0 	.word	0x424711e0

0800311c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d101      	bne.n	8003132 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e066      	b.n	8003200 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	7f5b      	ldrb	r3, [r3, #29]
 8003136:	b2db      	uxtb	r3, r3
 8003138:	2b00      	cmp	r3, #0
 800313a:	d105      	bne.n	8003148 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f7fd fbf4 	bl	8000930 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2202      	movs	r2, #2
 800314c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	22ca      	movs	r2, #202	; 0xca
 8003154:	625a      	str	r2, [r3, #36]	; 0x24
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2253      	movs	r2, #83	; 0x53
 800315c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f000 f87a 	bl	8003258 <RTC_EnterInitMode>
 8003164:	4603      	mov	r3, r0
 8003166:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003168:	7bfb      	ldrb	r3, [r7, #15]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d12c      	bne.n	80031c8 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	6812      	ldr	r2, [r2, #0]
 8003178:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800317c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003180:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	6899      	ldr	r1, [r3, #8]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685a      	ldr	r2, [r3, #4]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	691b      	ldr	r3, [r3, #16]
 8003190:	431a      	orrs	r2, r3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	695b      	ldr	r3, [r3, #20]
 8003196:	431a      	orrs	r2, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	430a      	orrs	r2, r1
 800319e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	68d2      	ldr	r2, [r2, #12]
 80031a8:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	6919      	ldr	r1, [r3, #16]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	041a      	lsls	r2, r3, #16
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	430a      	orrs	r2, r1
 80031bc:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f000 f881 	bl	80032c6 <RTC_ExitInitMode>
 80031c4:	4603      	mov	r3, r0
 80031c6:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80031c8:	7bfb      	ldrb	r3, [r7, #15]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d113      	bne.n	80031f6 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80031dc:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	699a      	ldr	r2, [r3, #24]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	430a      	orrs	r2, r1
 80031ee:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	22ff      	movs	r2, #255	; 0xff
 80031fc:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80031fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003200:	4618      	mov	r0, r3
 8003202:	3710      	adds	r7, #16
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}

08003208 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003210:	2300      	movs	r3, #0
 8003212:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	68da      	ldr	r2, [r3, #12]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003222:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003224:	f7fd fcce 	bl	8000bc4 <HAL_GetTick>
 8003228:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800322a:	e009      	b.n	8003240 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800322c:	f7fd fcca 	bl	8000bc4 <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800323a:	d901      	bls.n	8003240 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800323c:	2303      	movs	r3, #3
 800323e:	e007      	b.n	8003250 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	f003 0320 	and.w	r3, r3, #32
 800324a:	2b00      	cmp	r3, #0
 800324c:	d0ee      	beq.n	800322c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800324e:	2300      	movs	r3, #0
}
 8003250:	4618      	mov	r0, r3
 8003252:	3710      	adds	r7, #16
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}

08003258 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003260:	2300      	movs	r3, #0
 8003262:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003264:	2300      	movs	r3, #0
 8003266:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003272:	2b00      	cmp	r3, #0
 8003274:	d122      	bne.n	80032bc <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	68da      	ldr	r2, [r3, #12]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003284:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003286:	f7fd fc9d 	bl	8000bc4 <HAL_GetTick>
 800328a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800328c:	e00c      	b.n	80032a8 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800328e:	f7fd fc99 	bl	8000bc4 <HAL_GetTick>
 8003292:	4602      	mov	r2, r0
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800329c:	d904      	bls.n	80032a8 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2204      	movs	r2, #4
 80032a2:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d102      	bne.n	80032bc <RTC_EnterInitMode+0x64>
 80032b6:	7bfb      	ldrb	r3, [r7, #15]
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d1e8      	bne.n	800328e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80032bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3710      	adds	r7, #16
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}

080032c6 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80032c6:	b580      	push	{r7, lr}
 80032c8:	b084      	sub	sp, #16
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032ce:	2300      	movs	r3, #0
 80032d0:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	68da      	ldr	r2, [r3, #12]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032e0:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	f003 0320 	and.w	r3, r3, #32
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d10a      	bne.n	8003306 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f7ff ff89 	bl	8003208 <HAL_RTC_WaitForSynchro>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d004      	beq.n	8003306 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2204      	movs	r2, #4
 8003300:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003306:	7bfb      	ldrb	r3, [r7, #15]
}
 8003308:	4618      	mov	r0, r3
 800330a:	3710      	adds	r7, #16
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d101      	bne.n	8003322 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e07b      	b.n	800341a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003326:	2b00      	cmp	r3, #0
 8003328:	d108      	bne.n	800333c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003332:	d009      	beq.n	8003348 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	61da      	str	r2, [r3, #28]
 800333a:	e005      	b.n	8003348 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003354:	b2db      	uxtb	r3, r3
 8003356:	2b00      	cmp	r3, #0
 8003358:	d106      	bne.n	8003368 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f7fd fb10 	bl	8000988 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2202      	movs	r2, #2
 800336c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800337e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003390:	431a      	orrs	r2, r3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800339a:	431a      	orrs	r2, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	691b      	ldr	r3, [r3, #16]
 80033a0:	f003 0302 	and.w	r3, r3, #2
 80033a4:	431a      	orrs	r2, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	695b      	ldr	r3, [r3, #20]
 80033aa:	f003 0301 	and.w	r3, r3, #1
 80033ae:	431a      	orrs	r2, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	699b      	ldr	r3, [r3, #24]
 80033b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033b8:	431a      	orrs	r2, r3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	69db      	ldr	r3, [r3, #28]
 80033be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80033c2:	431a      	orrs	r2, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a1b      	ldr	r3, [r3, #32]
 80033c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033cc:	ea42 0103 	orr.w	r1, r2, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	430a      	orrs	r2, r1
 80033de:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	699b      	ldr	r3, [r3, #24]
 80033e4:	0c1b      	lsrs	r3, r3, #16
 80033e6:	f003 0104 	and.w	r1, r3, #4
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ee:	f003 0210 	and.w	r2, r3, #16
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	430a      	orrs	r2, r1
 80033f8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	69da      	ldr	r2, [r3, #28]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003408:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003418:	2300      	movs	r3, #0
}
 800341a:	4618      	mov	r0, r3
 800341c:	3708      	adds	r7, #8
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}

08003422 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003422:	b084      	sub	sp, #16
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	f107 001c 	add.w	r0, r7, #28
 8003430:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003436:	2b01      	cmp	r3, #1
 8003438:	d122      	bne.n	8003480 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800343e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800344e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003462:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003464:	2b01      	cmp	r3, #1
 8003466:	d105      	bne.n	8003474 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f001 fbed 	bl	8004c54 <USB_CoreReset>
 800347a:	4603      	mov	r3, r0
 800347c:	73fb      	strb	r3, [r7, #15]
 800347e:	e01a      	b.n	80034b6 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f001 fbe1 	bl	8004c54 <USB_CoreReset>
 8003492:	4603      	mov	r3, r0
 8003494:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003496:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003498:	2b00      	cmp	r3, #0
 800349a:	d106      	bne.n	80034aa <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	639a      	str	r2, [r3, #56]	; 0x38
 80034a8:	e005      	b.n	80034b6 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ae:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80034b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d10b      	bne.n	80034d4 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f043 0206 	orr.w	r2, r3, #6
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	f043 0220 	orr.w	r2, r3, #32
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80034d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3710      	adds	r7, #16
 80034da:	46bd      	mov	sp, r7
 80034dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80034e0:	b004      	add	sp, #16
 80034e2:	4770      	bx	lr

080034e4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b087      	sub	sp, #28
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	60f8      	str	r0, [r7, #12]
 80034ec:	60b9      	str	r1, [r7, #8]
 80034ee:	4613      	mov	r3, r2
 80034f0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80034f2:	79fb      	ldrb	r3, [r7, #7]
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d165      	bne.n	80035c4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	4a41      	ldr	r2, [pc, #260]	; (8003600 <USB_SetTurnaroundTime+0x11c>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d906      	bls.n	800350e <USB_SetTurnaroundTime+0x2a>
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	4a40      	ldr	r2, [pc, #256]	; (8003604 <USB_SetTurnaroundTime+0x120>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d202      	bcs.n	800350e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003508:	230f      	movs	r3, #15
 800350a:	617b      	str	r3, [r7, #20]
 800350c:	e062      	b.n	80035d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	4a3c      	ldr	r2, [pc, #240]	; (8003604 <USB_SetTurnaroundTime+0x120>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d306      	bcc.n	8003524 <USB_SetTurnaroundTime+0x40>
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	4a3b      	ldr	r2, [pc, #236]	; (8003608 <USB_SetTurnaroundTime+0x124>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d202      	bcs.n	8003524 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800351e:	230e      	movs	r3, #14
 8003520:	617b      	str	r3, [r7, #20]
 8003522:	e057      	b.n	80035d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	4a38      	ldr	r2, [pc, #224]	; (8003608 <USB_SetTurnaroundTime+0x124>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d306      	bcc.n	800353a <USB_SetTurnaroundTime+0x56>
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	4a37      	ldr	r2, [pc, #220]	; (800360c <USB_SetTurnaroundTime+0x128>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d202      	bcs.n	800353a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003534:	230d      	movs	r3, #13
 8003536:	617b      	str	r3, [r7, #20]
 8003538:	e04c      	b.n	80035d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	4a33      	ldr	r2, [pc, #204]	; (800360c <USB_SetTurnaroundTime+0x128>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d306      	bcc.n	8003550 <USB_SetTurnaroundTime+0x6c>
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	4a32      	ldr	r2, [pc, #200]	; (8003610 <USB_SetTurnaroundTime+0x12c>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d802      	bhi.n	8003550 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800354a:	230c      	movs	r3, #12
 800354c:	617b      	str	r3, [r7, #20]
 800354e:	e041      	b.n	80035d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	4a2f      	ldr	r2, [pc, #188]	; (8003610 <USB_SetTurnaroundTime+0x12c>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d906      	bls.n	8003566 <USB_SetTurnaroundTime+0x82>
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	4a2e      	ldr	r2, [pc, #184]	; (8003614 <USB_SetTurnaroundTime+0x130>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d802      	bhi.n	8003566 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003560:	230b      	movs	r3, #11
 8003562:	617b      	str	r3, [r7, #20]
 8003564:	e036      	b.n	80035d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	4a2a      	ldr	r2, [pc, #168]	; (8003614 <USB_SetTurnaroundTime+0x130>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d906      	bls.n	800357c <USB_SetTurnaroundTime+0x98>
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	4a29      	ldr	r2, [pc, #164]	; (8003618 <USB_SetTurnaroundTime+0x134>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d802      	bhi.n	800357c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003576:	230a      	movs	r3, #10
 8003578:	617b      	str	r3, [r7, #20]
 800357a:	e02b      	b.n	80035d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	4a26      	ldr	r2, [pc, #152]	; (8003618 <USB_SetTurnaroundTime+0x134>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d906      	bls.n	8003592 <USB_SetTurnaroundTime+0xae>
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	4a25      	ldr	r2, [pc, #148]	; (800361c <USB_SetTurnaroundTime+0x138>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d202      	bcs.n	8003592 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800358c:	2309      	movs	r3, #9
 800358e:	617b      	str	r3, [r7, #20]
 8003590:	e020      	b.n	80035d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	4a21      	ldr	r2, [pc, #132]	; (800361c <USB_SetTurnaroundTime+0x138>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d306      	bcc.n	80035a8 <USB_SetTurnaroundTime+0xc4>
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	4a20      	ldr	r2, [pc, #128]	; (8003620 <USB_SetTurnaroundTime+0x13c>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d802      	bhi.n	80035a8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80035a2:	2308      	movs	r3, #8
 80035a4:	617b      	str	r3, [r7, #20]
 80035a6:	e015      	b.n	80035d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	4a1d      	ldr	r2, [pc, #116]	; (8003620 <USB_SetTurnaroundTime+0x13c>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d906      	bls.n	80035be <USB_SetTurnaroundTime+0xda>
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	4a1c      	ldr	r2, [pc, #112]	; (8003624 <USB_SetTurnaroundTime+0x140>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d202      	bcs.n	80035be <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80035b8:	2307      	movs	r3, #7
 80035ba:	617b      	str	r3, [r7, #20]
 80035bc:	e00a      	b.n	80035d4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80035be:	2306      	movs	r3, #6
 80035c0:	617b      	str	r3, [r7, #20]
 80035c2:	e007      	b.n	80035d4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80035c4:	79fb      	ldrb	r3, [r7, #7]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d102      	bne.n	80035d0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80035ca:	2309      	movs	r3, #9
 80035cc:	617b      	str	r3, [r7, #20]
 80035ce:	e001      	b.n	80035d4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80035d0:	2309      	movs	r3, #9
 80035d2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	68da      	ldr	r2, [r3, #12]
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	029b      	lsls	r3, r3, #10
 80035e8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80035ec:	431a      	orrs	r2, r3
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80035f2:	2300      	movs	r3, #0
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	371c      	adds	r7, #28
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr
 8003600:	00d8acbf 	.word	0x00d8acbf
 8003604:	00e4e1c0 	.word	0x00e4e1c0
 8003608:	00f42400 	.word	0x00f42400
 800360c:	01067380 	.word	0x01067380
 8003610:	011a499f 	.word	0x011a499f
 8003614:	01312cff 	.word	0x01312cff
 8003618:	014ca43f 	.word	0x014ca43f
 800361c:	016e3600 	.word	0x016e3600
 8003620:	01a6ab1f 	.word	0x01a6ab1f
 8003624:	01e84800 	.word	0x01e84800

08003628 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	f043 0201 	orr.w	r2, r3, #1
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	370c      	adds	r7, #12
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr

0800364a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800364a:	b480      	push	{r7}
 800364c:	b083      	sub	sp, #12
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	f023 0201 	bic.w	r2, r3, #1
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800365e:	2300      	movs	r3, #0
}
 8003660:	4618      	mov	r0, r3
 8003662:	370c      	adds	r7, #12
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr

0800366c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	460b      	mov	r3, r1
 8003676:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003678:	2300      	movs	r3, #0
 800367a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003688:	78fb      	ldrb	r3, [r7, #3]
 800368a:	2b01      	cmp	r3, #1
 800368c:	d115      	bne.n	80036ba <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800369a:	2001      	movs	r0, #1
 800369c:	f7fd fa9e 	bl	8000bdc <HAL_Delay>
      ms++;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	3301      	adds	r3, #1
 80036a4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f001 fa45 	bl	8004b36 <USB_GetMode>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d01e      	beq.n	80036f0 <USB_SetCurrentMode+0x84>
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2b31      	cmp	r3, #49	; 0x31
 80036b6:	d9f0      	bls.n	800369a <USB_SetCurrentMode+0x2e>
 80036b8:	e01a      	b.n	80036f0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80036ba:	78fb      	ldrb	r3, [r7, #3]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d115      	bne.n	80036ec <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80036cc:	2001      	movs	r0, #1
 80036ce:	f7fd fa85 	bl	8000bdc <HAL_Delay>
      ms++;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	3301      	adds	r3, #1
 80036d6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f001 fa2c 	bl	8004b36 <USB_GetMode>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d005      	beq.n	80036f0 <USB_SetCurrentMode+0x84>
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2b31      	cmp	r3, #49	; 0x31
 80036e8:	d9f0      	bls.n	80036cc <USB_SetCurrentMode+0x60>
 80036ea:	e001      	b.n	80036f0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e005      	b.n	80036fc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2b32      	cmp	r3, #50	; 0x32
 80036f4:	d101      	bne.n	80036fa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e000      	b.n	80036fc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80036fa:	2300      	movs	r3, #0
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3710      	adds	r7, #16
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}

08003704 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003704:	b084      	sub	sp, #16
 8003706:	b580      	push	{r7, lr}
 8003708:	b086      	sub	sp, #24
 800370a:	af00      	add	r7, sp, #0
 800370c:	6078      	str	r0, [r7, #4]
 800370e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003712:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003716:	2300      	movs	r3, #0
 8003718:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800371e:	2300      	movs	r3, #0
 8003720:	613b      	str	r3, [r7, #16]
 8003722:	e009      	b.n	8003738 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	3340      	adds	r3, #64	; 0x40
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	4413      	add	r3, r2
 800372e:	2200      	movs	r2, #0
 8003730:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	3301      	adds	r3, #1
 8003736:	613b      	str	r3, [r7, #16]
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	2b0e      	cmp	r3, #14
 800373c:	d9f2      	bls.n	8003724 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800373e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003740:	2b00      	cmp	r3, #0
 8003742:	d11c      	bne.n	800377e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	68fa      	ldr	r2, [r7, #12]
 800374e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003752:	f043 0302 	orr.w	r3, r3, #2
 8003756:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800375c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003768:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003774:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	639a      	str	r2, [r3, #56]	; 0x38
 800377c:	e00b      	b.n	8003796 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003782:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800378e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800379c:	461a      	mov	r2, r3
 800379e:	2300      	movs	r3, #0
 80037a0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037a8:	4619      	mov	r1, r3
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037b0:	461a      	mov	r2, r3
 80037b2:	680b      	ldr	r3, [r1, #0]
 80037b4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80037b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d10c      	bne.n	80037d6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80037bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d104      	bne.n	80037cc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80037c2:	2100      	movs	r1, #0
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f000 f965 	bl	8003a94 <USB_SetDevSpeed>
 80037ca:	e008      	b.n	80037de <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80037cc:	2101      	movs	r1, #1
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f000 f960 	bl	8003a94 <USB_SetDevSpeed>
 80037d4:	e003      	b.n	80037de <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80037d6:	2103      	movs	r1, #3
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f000 f95b 	bl	8003a94 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80037de:	2110      	movs	r1, #16
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f000 f8f3 	bl	80039cc <USB_FlushTxFifo>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d001      	beq.n	80037f0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f000 f91f 	bl	8003a34 <USB_FlushRxFifo>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d001      	beq.n	8003800 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003806:	461a      	mov	r2, r3
 8003808:	2300      	movs	r3, #0
 800380a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003812:	461a      	mov	r2, r3
 8003814:	2300      	movs	r3, #0
 8003816:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800381e:	461a      	mov	r2, r3
 8003820:	2300      	movs	r3, #0
 8003822:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003824:	2300      	movs	r3, #0
 8003826:	613b      	str	r3, [r7, #16]
 8003828:	e043      	b.n	80038b2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	015a      	lsls	r2, r3, #5
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	4413      	add	r3, r2
 8003832:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800383c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003840:	d118      	bne.n	8003874 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d10a      	bne.n	800385e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	015a      	lsls	r2, r3, #5
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	4413      	add	r3, r2
 8003850:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003854:	461a      	mov	r2, r3
 8003856:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800385a:	6013      	str	r3, [r2, #0]
 800385c:	e013      	b.n	8003886 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	015a      	lsls	r2, r3, #5
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	4413      	add	r3, r2
 8003866:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800386a:	461a      	mov	r2, r3
 800386c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003870:	6013      	str	r3, [r2, #0]
 8003872:	e008      	b.n	8003886 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	015a      	lsls	r2, r3, #5
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	4413      	add	r3, r2
 800387c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003880:	461a      	mov	r2, r3
 8003882:	2300      	movs	r3, #0
 8003884:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	015a      	lsls	r2, r3, #5
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	4413      	add	r3, r2
 800388e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003892:	461a      	mov	r2, r3
 8003894:	2300      	movs	r3, #0
 8003896:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	015a      	lsls	r2, r3, #5
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	4413      	add	r3, r2
 80038a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038a4:	461a      	mov	r2, r3
 80038a6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80038aa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	3301      	adds	r3, #1
 80038b0:	613b      	str	r3, [r7, #16]
 80038b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b4:	693a      	ldr	r2, [r7, #16]
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d3b7      	bcc.n	800382a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80038ba:	2300      	movs	r3, #0
 80038bc:	613b      	str	r3, [r7, #16]
 80038be:	e043      	b.n	8003948 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	015a      	lsls	r2, r3, #5
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	4413      	add	r3, r2
 80038c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80038d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80038d6:	d118      	bne.n	800390a <USB_DevInit+0x206>
    {
      if (i == 0U)
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d10a      	bne.n	80038f4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	015a      	lsls	r2, r3, #5
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	4413      	add	r3, r2
 80038e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038ea:	461a      	mov	r2, r3
 80038ec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80038f0:	6013      	str	r3, [r2, #0]
 80038f2:	e013      	b.n	800391c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	015a      	lsls	r2, r3, #5
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	4413      	add	r3, r2
 80038fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003900:	461a      	mov	r2, r3
 8003902:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003906:	6013      	str	r3, [r2, #0]
 8003908:	e008      	b.n	800391c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	015a      	lsls	r2, r3, #5
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	4413      	add	r3, r2
 8003912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003916:	461a      	mov	r2, r3
 8003918:	2300      	movs	r3, #0
 800391a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	015a      	lsls	r2, r3, #5
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	4413      	add	r3, r2
 8003924:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003928:	461a      	mov	r2, r3
 800392a:	2300      	movs	r3, #0
 800392c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	015a      	lsls	r2, r3, #5
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	4413      	add	r3, r2
 8003936:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800393a:	461a      	mov	r2, r3
 800393c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003940:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	3301      	adds	r3, #1
 8003946:	613b      	str	r3, [r7, #16]
 8003948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394a:	693a      	ldr	r2, [r7, #16]
 800394c:	429a      	cmp	r2, r3
 800394e:	d3b7      	bcc.n	80038c0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003956:	691b      	ldr	r3, [r3, #16]
 8003958:	68fa      	ldr	r2, [r7, #12]
 800395a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800395e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003962:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003970:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003974:	2b00      	cmp	r3, #0
 8003976:	d105      	bne.n	8003984 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	699b      	ldr	r3, [r3, #24]
 800397c:	f043 0210 	orr.w	r2, r3, #16
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	699a      	ldr	r2, [r3, #24]
 8003988:	4b0f      	ldr	r3, [pc, #60]	; (80039c8 <USB_DevInit+0x2c4>)
 800398a:	4313      	orrs	r3, r2
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003990:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003992:	2b00      	cmp	r3, #0
 8003994:	d005      	beq.n	80039a2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	699b      	ldr	r3, [r3, #24]
 800399a:	f043 0208 	orr.w	r2, r3, #8
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80039a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d107      	bne.n	80039b8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	699b      	ldr	r3, [r3, #24]
 80039ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80039b0:	f043 0304 	orr.w	r3, r3, #4
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80039b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3718      	adds	r7, #24
 80039be:	46bd      	mov	sp, r7
 80039c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80039c4:	b004      	add	sp, #16
 80039c6:	4770      	bx	lr
 80039c8:	803c3800 	.word	0x803c3800

080039cc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b085      	sub	sp, #20
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80039d6:	2300      	movs	r3, #0
 80039d8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	3301      	adds	r3, #1
 80039de:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	4a13      	ldr	r2, [pc, #76]	; (8003a30 <USB_FlushTxFifo+0x64>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d901      	bls.n	80039ec <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80039e8:	2303      	movs	r3, #3
 80039ea:	e01b      	b.n	8003a24 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	691b      	ldr	r3, [r3, #16]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	daf2      	bge.n	80039da <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80039f4:	2300      	movs	r3, #0
 80039f6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	019b      	lsls	r3, r3, #6
 80039fc:	f043 0220 	orr.w	r2, r3, #32
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	3301      	adds	r3, #1
 8003a08:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	4a08      	ldr	r2, [pc, #32]	; (8003a30 <USB_FlushTxFifo+0x64>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d901      	bls.n	8003a16 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	e006      	b.n	8003a24 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	691b      	ldr	r3, [r3, #16]
 8003a1a:	f003 0320 	and.w	r3, r3, #32
 8003a1e:	2b20      	cmp	r3, #32
 8003a20:	d0f0      	beq.n	8003a04 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003a22:	2300      	movs	r3, #0
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3714      	adds	r7, #20
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr
 8003a30:	00030d40 	.word	0x00030d40

08003a34 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b085      	sub	sp, #20
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	3301      	adds	r3, #1
 8003a44:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	4a11      	ldr	r2, [pc, #68]	; (8003a90 <USB_FlushRxFifo+0x5c>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d901      	bls.n	8003a52 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e018      	b.n	8003a84 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	691b      	ldr	r3, [r3, #16]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	daf2      	bge.n	8003a40 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2210      	movs	r2, #16
 8003a62:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	3301      	adds	r3, #1
 8003a68:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	4a08      	ldr	r2, [pc, #32]	; (8003a90 <USB_FlushRxFifo+0x5c>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d901      	bls.n	8003a76 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e006      	b.n	8003a84 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	691b      	ldr	r3, [r3, #16]
 8003a7a:	f003 0310 	and.w	r3, r3, #16
 8003a7e:	2b10      	cmp	r3, #16
 8003a80:	d0f0      	beq.n	8003a64 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003a82:	2300      	movs	r3, #0
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3714      	adds	r7, #20
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr
 8003a90:	00030d40 	.word	0x00030d40

08003a94 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b085      	sub	sp, #20
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	460b      	mov	r3, r1
 8003a9e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	78fb      	ldrb	r3, [r7, #3]
 8003aae:	68f9      	ldr	r1, [r7, #12]
 8003ab0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003ab8:	2300      	movs	r3, #0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3714      	adds	r7, #20
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr

08003ac6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003ac6:	b480      	push	{r7}
 8003ac8:	b087      	sub	sp, #28
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	f003 0306 	and.w	r3, r3, #6
 8003ade:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d102      	bne.n	8003aec <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	75fb      	strb	r3, [r7, #23]
 8003aea:	e00a      	b.n	8003b02 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2b02      	cmp	r3, #2
 8003af0:	d002      	beq.n	8003af8 <USB_GetDevSpeed+0x32>
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2b06      	cmp	r3, #6
 8003af6:	d102      	bne.n	8003afe <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003af8:	2302      	movs	r3, #2
 8003afa:	75fb      	strb	r3, [r7, #23]
 8003afc:	e001      	b.n	8003b02 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003afe:	230f      	movs	r3, #15
 8003b00:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003b02:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	371c      	adds	r7, #28
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr

08003b10 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b085      	sub	sp, #20
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	781b      	ldrb	r3, [r3, #0]
 8003b22:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	785b      	ldrb	r3, [r3, #1]
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d13a      	bne.n	8003ba2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b32:	69da      	ldr	r2, [r3, #28]
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	f003 030f 	and.w	r3, r3, #15
 8003b3c:	2101      	movs	r1, #1
 8003b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	68f9      	ldr	r1, [r7, #12]
 8003b46:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	015a      	lsls	r2, r3, #5
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	4413      	add	r3, r2
 8003b56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d155      	bne.n	8003c10 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	015a      	lsls	r2, r3, #5
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	4413      	add	r3, r2
 8003b6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	791b      	ldrb	r3, [r3, #4]
 8003b7e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003b80:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	059b      	lsls	r3, r3, #22
 8003b86:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	68ba      	ldr	r2, [r7, #8]
 8003b8c:	0151      	lsls	r1, r2, #5
 8003b8e:	68fa      	ldr	r2, [r7, #12]
 8003b90:	440a      	add	r2, r1
 8003b92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b9e:	6013      	str	r3, [r2, #0]
 8003ba0:	e036      	b.n	8003c10 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ba8:	69da      	ldr	r2, [r3, #28]
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	f003 030f 	and.w	r3, r3, #15
 8003bb2:	2101      	movs	r1, #1
 8003bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8003bb8:	041b      	lsls	r3, r3, #16
 8003bba:	68f9      	ldr	r1, [r7, #12]
 8003bbc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	015a      	lsls	r2, r3, #5
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	4413      	add	r3, r2
 8003bcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d11a      	bne.n	8003c10 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	015a      	lsls	r2, r3, #5
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	4413      	add	r3, r2
 8003be2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	791b      	ldrb	r3, [r3, #4]
 8003bf4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003bf6:	430b      	orrs	r3, r1
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	68ba      	ldr	r2, [r7, #8]
 8003bfc:	0151      	lsls	r1, r2, #5
 8003bfe:	68fa      	ldr	r2, [r7, #12]
 8003c00:	440a      	add	r2, r1
 8003c02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c0e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003c10:	2300      	movs	r3, #0
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3714      	adds	r7, #20
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr
	...

08003c20 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b085      	sub	sp, #20
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	781b      	ldrb	r3, [r3, #0]
 8003c32:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	785b      	ldrb	r3, [r3, #1]
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d161      	bne.n	8003d00 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	015a      	lsls	r2, r3, #5
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	4413      	add	r3, r2
 8003c44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c52:	d11f      	bne.n	8003c94 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	015a      	lsls	r2, r3, #5
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	4413      	add	r3, r2
 8003c5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	68ba      	ldr	r2, [r7, #8]
 8003c64:	0151      	lsls	r1, r2, #5
 8003c66:	68fa      	ldr	r2, [r7, #12]
 8003c68:	440a      	add	r2, r1
 8003c6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c6e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003c72:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	015a      	lsls	r2, r3, #5
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	4413      	add	r3, r2
 8003c7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	68ba      	ldr	r2, [r7, #8]
 8003c84:	0151      	lsls	r1, r2, #5
 8003c86:	68fa      	ldr	r2, [r7, #12]
 8003c88:	440a      	add	r2, r1
 8003c8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c8e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003c92:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	f003 030f 	and.w	r3, r3, #15
 8003ca4:	2101      	movs	r1, #1
 8003ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	43db      	mvns	r3, r3
 8003cae:	68f9      	ldr	r1, [r7, #12]
 8003cb0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cbe:	69da      	ldr	r2, [r3, #28]
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	f003 030f 	and.w	r3, r3, #15
 8003cc8:	2101      	movs	r1, #1
 8003cca:	fa01 f303 	lsl.w	r3, r1, r3
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	43db      	mvns	r3, r3
 8003cd2:	68f9      	ldr	r1, [r7, #12]
 8003cd4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003cd8:	4013      	ands	r3, r2
 8003cda:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	015a      	lsls	r2, r3, #5
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	4413      	add	r3, r2
 8003ce4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	0159      	lsls	r1, r3, #5
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	440b      	add	r3, r1
 8003cf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cf6:	4619      	mov	r1, r3
 8003cf8:	4b35      	ldr	r3, [pc, #212]	; (8003dd0 <USB_DeactivateEndpoint+0x1b0>)
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	600b      	str	r3, [r1, #0]
 8003cfe:	e060      	b.n	8003dc2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	015a      	lsls	r2, r3, #5
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	4413      	add	r3, r2
 8003d08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d16:	d11f      	bne.n	8003d58 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	015a      	lsls	r2, r3, #5
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	4413      	add	r3, r2
 8003d20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	68ba      	ldr	r2, [r7, #8]
 8003d28:	0151      	lsls	r1, r2, #5
 8003d2a:	68fa      	ldr	r2, [r7, #12]
 8003d2c:	440a      	add	r2, r1
 8003d2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d32:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003d36:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	015a      	lsls	r2, r3, #5
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	4413      	add	r3, r2
 8003d40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	68ba      	ldr	r2, [r7, #8]
 8003d48:	0151      	lsls	r1, r2, #5
 8003d4a:	68fa      	ldr	r2, [r7, #12]
 8003d4c:	440a      	add	r2, r1
 8003d4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d52:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003d56:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	781b      	ldrb	r3, [r3, #0]
 8003d64:	f003 030f 	and.w	r3, r3, #15
 8003d68:	2101      	movs	r1, #1
 8003d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d6e:	041b      	lsls	r3, r3, #16
 8003d70:	43db      	mvns	r3, r3
 8003d72:	68f9      	ldr	r1, [r7, #12]
 8003d74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d78:	4013      	ands	r3, r2
 8003d7a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d82:	69da      	ldr	r2, [r3, #28]
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	781b      	ldrb	r3, [r3, #0]
 8003d88:	f003 030f 	and.w	r3, r3, #15
 8003d8c:	2101      	movs	r1, #1
 8003d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d92:	041b      	lsls	r3, r3, #16
 8003d94:	43db      	mvns	r3, r3
 8003d96:	68f9      	ldr	r1, [r7, #12]
 8003d98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	015a      	lsls	r2, r3, #5
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	4413      	add	r3, r2
 8003da8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	0159      	lsls	r1, r3, #5
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	440b      	add	r3, r1
 8003db6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dba:	4619      	mov	r1, r3
 8003dbc:	4b05      	ldr	r3, [pc, #20]	; (8003dd4 <USB_DeactivateEndpoint+0x1b4>)
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003dc2:	2300      	movs	r3, #0
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3714      	adds	r7, #20
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr
 8003dd0:	ec337800 	.word	0xec337800
 8003dd4:	eff37800 	.word	0xeff37800

08003dd8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b08a      	sub	sp, #40	; 0x28
 8003ddc:	af02      	add	r7, sp, #8
 8003dde:	60f8      	str	r0, [r7, #12]
 8003de0:	60b9      	str	r1, [r7, #8]
 8003de2:	4613      	mov	r3, r2
 8003de4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	785b      	ldrb	r3, [r3, #1]
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	f040 815c 	bne.w	80040b2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	699b      	ldr	r3, [r3, #24]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d132      	bne.n	8003e68 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003e02:	69bb      	ldr	r3, [r7, #24]
 8003e04:	015a      	lsls	r2, r3, #5
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	4413      	add	r3, r2
 8003e0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e0e:	691b      	ldr	r3, [r3, #16]
 8003e10:	69ba      	ldr	r2, [r7, #24]
 8003e12:	0151      	lsls	r1, r2, #5
 8003e14:	69fa      	ldr	r2, [r7, #28]
 8003e16:	440a      	add	r2, r1
 8003e18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e1c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003e20:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003e24:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	015a      	lsls	r2, r3, #5
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	4413      	add	r3, r2
 8003e2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e32:	691b      	ldr	r3, [r3, #16]
 8003e34:	69ba      	ldr	r2, [r7, #24]
 8003e36:	0151      	lsls	r1, r2, #5
 8003e38:	69fa      	ldr	r2, [r7, #28]
 8003e3a:	440a      	add	r2, r1
 8003e3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e40:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003e44:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003e46:	69bb      	ldr	r3, [r7, #24]
 8003e48:	015a      	lsls	r2, r3, #5
 8003e4a:	69fb      	ldr	r3, [r7, #28]
 8003e4c:	4413      	add	r3, r2
 8003e4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e52:	691b      	ldr	r3, [r3, #16]
 8003e54:	69ba      	ldr	r2, [r7, #24]
 8003e56:	0151      	lsls	r1, r2, #5
 8003e58:	69fa      	ldr	r2, [r7, #28]
 8003e5a:	440a      	add	r2, r1
 8003e5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e60:	0cdb      	lsrs	r3, r3, #19
 8003e62:	04db      	lsls	r3, r3, #19
 8003e64:	6113      	str	r3, [r2, #16]
 8003e66:	e074      	b.n	8003f52 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003e68:	69bb      	ldr	r3, [r7, #24]
 8003e6a:	015a      	lsls	r2, r3, #5
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	4413      	add	r3, r2
 8003e70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e74:	691b      	ldr	r3, [r3, #16]
 8003e76:	69ba      	ldr	r2, [r7, #24]
 8003e78:	0151      	lsls	r1, r2, #5
 8003e7a:	69fa      	ldr	r2, [r7, #28]
 8003e7c:	440a      	add	r2, r1
 8003e7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e82:	0cdb      	lsrs	r3, r3, #19
 8003e84:	04db      	lsls	r3, r3, #19
 8003e86:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003e88:	69bb      	ldr	r3, [r7, #24]
 8003e8a:	015a      	lsls	r2, r3, #5
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	4413      	add	r3, r2
 8003e90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	69ba      	ldr	r2, [r7, #24]
 8003e98:	0151      	lsls	r1, r2, #5
 8003e9a:	69fa      	ldr	r2, [r7, #28]
 8003e9c:	440a      	add	r2, r1
 8003e9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ea2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003ea6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003eaa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003eac:	69bb      	ldr	r3, [r7, #24]
 8003eae:	015a      	lsls	r2, r3, #5
 8003eb0:	69fb      	ldr	r3, [r7, #28]
 8003eb2:	4413      	add	r3, r2
 8003eb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eb8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	6999      	ldr	r1, [r3, #24]
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	68db      	ldr	r3, [r3, #12]
 8003ec2:	440b      	add	r3, r1
 8003ec4:	1e59      	subs	r1, r3, #1
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ece:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003ed0:	4b9d      	ldr	r3, [pc, #628]	; (8004148 <USB_EPStartXfer+0x370>)
 8003ed2:	400b      	ands	r3, r1
 8003ed4:	69b9      	ldr	r1, [r7, #24]
 8003ed6:	0148      	lsls	r0, r1, #5
 8003ed8:	69f9      	ldr	r1, [r7, #28]
 8003eda:	4401      	add	r1, r0
 8003edc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003ee4:	69bb      	ldr	r3, [r7, #24]
 8003ee6:	015a      	lsls	r2, r3, #5
 8003ee8:	69fb      	ldr	r3, [r7, #28]
 8003eea:	4413      	add	r3, r2
 8003eec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ef0:	691a      	ldr	r2, [r3, #16]
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	699b      	ldr	r3, [r3, #24]
 8003ef6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003efa:	69b9      	ldr	r1, [r7, #24]
 8003efc:	0148      	lsls	r0, r1, #5
 8003efe:	69f9      	ldr	r1, [r7, #28]
 8003f00:	4401      	add	r1, r0
 8003f02:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003f06:	4313      	orrs	r3, r2
 8003f08:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	791b      	ldrb	r3, [r3, #4]
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d11f      	bne.n	8003f52 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003f12:	69bb      	ldr	r3, [r7, #24]
 8003f14:	015a      	lsls	r2, r3, #5
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	4413      	add	r3, r2
 8003f1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f1e:	691b      	ldr	r3, [r3, #16]
 8003f20:	69ba      	ldr	r2, [r7, #24]
 8003f22:	0151      	lsls	r1, r2, #5
 8003f24:	69fa      	ldr	r2, [r7, #28]
 8003f26:	440a      	add	r2, r1
 8003f28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f2c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003f30:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003f32:	69bb      	ldr	r3, [r7, #24]
 8003f34:	015a      	lsls	r2, r3, #5
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	4413      	add	r3, r2
 8003f3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f3e:	691b      	ldr	r3, [r3, #16]
 8003f40:	69ba      	ldr	r2, [r7, #24]
 8003f42:	0151      	lsls	r1, r2, #5
 8003f44:	69fa      	ldr	r2, [r7, #28]
 8003f46:	440a      	add	r2, r1
 8003f48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f4c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003f50:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003f52:	79fb      	ldrb	r3, [r7, #7]
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d14b      	bne.n	8003ff0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	695b      	ldr	r3, [r3, #20]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d009      	beq.n	8003f74 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	015a      	lsls	r2, r3, #5
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	4413      	add	r3, r2
 8003f68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	695b      	ldr	r3, [r3, #20]
 8003f72:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	791b      	ldrb	r3, [r3, #4]
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d128      	bne.n	8003fce <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003f7c:	69fb      	ldr	r3, [r7, #28]
 8003f7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d110      	bne.n	8003fae <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003f8c:	69bb      	ldr	r3, [r7, #24]
 8003f8e:	015a      	lsls	r2, r3, #5
 8003f90:	69fb      	ldr	r3, [r7, #28]
 8003f92:	4413      	add	r3, r2
 8003f94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	69ba      	ldr	r2, [r7, #24]
 8003f9c:	0151      	lsls	r1, r2, #5
 8003f9e:	69fa      	ldr	r2, [r7, #28]
 8003fa0:	440a      	add	r2, r1
 8003fa2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fa6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003faa:	6013      	str	r3, [r2, #0]
 8003fac:	e00f      	b.n	8003fce <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003fae:	69bb      	ldr	r3, [r7, #24]
 8003fb0:	015a      	lsls	r2, r3, #5
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	4413      	add	r3, r2
 8003fb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	69ba      	ldr	r2, [r7, #24]
 8003fbe:	0151      	lsls	r1, r2, #5
 8003fc0:	69fa      	ldr	r2, [r7, #28]
 8003fc2:	440a      	add	r2, r1
 8003fc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fcc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003fce:	69bb      	ldr	r3, [r7, #24]
 8003fd0:	015a      	lsls	r2, r3, #5
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	4413      	add	r3, r2
 8003fd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	69ba      	ldr	r2, [r7, #24]
 8003fde:	0151      	lsls	r1, r2, #5
 8003fe0:	69fa      	ldr	r2, [r7, #28]
 8003fe2:	440a      	add	r2, r1
 8003fe4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fe8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003fec:	6013      	str	r3, [r2, #0]
 8003fee:	e133      	b.n	8004258 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003ff0:	69bb      	ldr	r3, [r7, #24]
 8003ff2:	015a      	lsls	r2, r3, #5
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	4413      	add	r3, r2
 8003ff8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	69ba      	ldr	r2, [r7, #24]
 8004000:	0151      	lsls	r1, r2, #5
 8004002:	69fa      	ldr	r2, [r7, #28]
 8004004:	440a      	add	r2, r1
 8004006:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800400a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800400e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	791b      	ldrb	r3, [r3, #4]
 8004014:	2b01      	cmp	r3, #1
 8004016:	d015      	beq.n	8004044 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	699b      	ldr	r3, [r3, #24]
 800401c:	2b00      	cmp	r3, #0
 800401e:	f000 811b 	beq.w	8004258 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004022:	69fb      	ldr	r3, [r7, #28]
 8004024:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004028:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	781b      	ldrb	r3, [r3, #0]
 800402e:	f003 030f 	and.w	r3, r3, #15
 8004032:	2101      	movs	r1, #1
 8004034:	fa01 f303 	lsl.w	r3, r1, r3
 8004038:	69f9      	ldr	r1, [r7, #28]
 800403a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800403e:	4313      	orrs	r3, r2
 8004040:	634b      	str	r3, [r1, #52]	; 0x34
 8004042:	e109      	b.n	8004258 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004050:	2b00      	cmp	r3, #0
 8004052:	d110      	bne.n	8004076 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004054:	69bb      	ldr	r3, [r7, #24]
 8004056:	015a      	lsls	r2, r3, #5
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	4413      	add	r3, r2
 800405c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	69ba      	ldr	r2, [r7, #24]
 8004064:	0151      	lsls	r1, r2, #5
 8004066:	69fa      	ldr	r2, [r7, #28]
 8004068:	440a      	add	r2, r1
 800406a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800406e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004072:	6013      	str	r3, [r2, #0]
 8004074:	e00f      	b.n	8004096 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	015a      	lsls	r2, r3, #5
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	4413      	add	r3, r2
 800407e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	69ba      	ldr	r2, [r7, #24]
 8004086:	0151      	lsls	r1, r2, #5
 8004088:	69fa      	ldr	r2, [r7, #28]
 800408a:	440a      	add	r2, r1
 800408c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004090:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004094:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	6919      	ldr	r1, [r3, #16]
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	781a      	ldrb	r2, [r3, #0]
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	699b      	ldr	r3, [r3, #24]
 80040a2:	b298      	uxth	r0, r3
 80040a4:	79fb      	ldrb	r3, [r7, #7]
 80040a6:	9300      	str	r3, [sp, #0]
 80040a8:	4603      	mov	r3, r0
 80040aa:	68f8      	ldr	r0, [r7, #12]
 80040ac:	f000 fade 	bl	800466c <USB_WritePacket>
 80040b0:	e0d2      	b.n	8004258 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80040b2:	69bb      	ldr	r3, [r7, #24]
 80040b4:	015a      	lsls	r2, r3, #5
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	4413      	add	r3, r2
 80040ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040be:	691b      	ldr	r3, [r3, #16]
 80040c0:	69ba      	ldr	r2, [r7, #24]
 80040c2:	0151      	lsls	r1, r2, #5
 80040c4:	69fa      	ldr	r2, [r7, #28]
 80040c6:	440a      	add	r2, r1
 80040c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040cc:	0cdb      	lsrs	r3, r3, #19
 80040ce:	04db      	lsls	r3, r3, #19
 80040d0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	015a      	lsls	r2, r3, #5
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	4413      	add	r3, r2
 80040da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040de:	691b      	ldr	r3, [r3, #16]
 80040e0:	69ba      	ldr	r2, [r7, #24]
 80040e2:	0151      	lsls	r1, r2, #5
 80040e4:	69fa      	ldr	r2, [r7, #28]
 80040e6:	440a      	add	r2, r1
 80040e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040ec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80040f0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80040f4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	699b      	ldr	r3, [r3, #24]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d126      	bne.n	800414c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80040fe:	69bb      	ldr	r3, [r7, #24]
 8004100:	015a      	lsls	r2, r3, #5
 8004102:	69fb      	ldr	r3, [r7, #28]
 8004104:	4413      	add	r3, r2
 8004106:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800410a:	691a      	ldr	r2, [r3, #16]
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004114:	69b9      	ldr	r1, [r7, #24]
 8004116:	0148      	lsls	r0, r1, #5
 8004118:	69f9      	ldr	r1, [r7, #28]
 800411a:	4401      	add	r1, r0
 800411c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004120:	4313      	orrs	r3, r2
 8004122:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004124:	69bb      	ldr	r3, [r7, #24]
 8004126:	015a      	lsls	r2, r3, #5
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	4413      	add	r3, r2
 800412c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	69ba      	ldr	r2, [r7, #24]
 8004134:	0151      	lsls	r1, r2, #5
 8004136:	69fa      	ldr	r2, [r7, #28]
 8004138:	440a      	add	r2, r1
 800413a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800413e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004142:	6113      	str	r3, [r2, #16]
 8004144:	e03a      	b.n	80041bc <USB_EPStartXfer+0x3e4>
 8004146:	bf00      	nop
 8004148:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	699a      	ldr	r2, [r3, #24]
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	4413      	add	r3, r2
 8004156:	1e5a      	subs	r2, r3, #1
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004160:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	8afa      	ldrh	r2, [r7, #22]
 8004168:	fb03 f202 	mul.w	r2, r3, r2
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004170:	69bb      	ldr	r3, [r7, #24]
 8004172:	015a      	lsls	r2, r3, #5
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	4413      	add	r3, r2
 8004178:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800417c:	691a      	ldr	r2, [r3, #16]
 800417e:	8afb      	ldrh	r3, [r7, #22]
 8004180:	04d9      	lsls	r1, r3, #19
 8004182:	4b38      	ldr	r3, [pc, #224]	; (8004264 <USB_EPStartXfer+0x48c>)
 8004184:	400b      	ands	r3, r1
 8004186:	69b9      	ldr	r1, [r7, #24]
 8004188:	0148      	lsls	r0, r1, #5
 800418a:	69f9      	ldr	r1, [r7, #28]
 800418c:	4401      	add	r1, r0
 800418e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004192:	4313      	orrs	r3, r2
 8004194:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	015a      	lsls	r2, r3, #5
 800419a:	69fb      	ldr	r3, [r7, #28]
 800419c:	4413      	add	r3, r2
 800419e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041a2:	691a      	ldr	r2, [r3, #16]
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	69db      	ldr	r3, [r3, #28]
 80041a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041ac:	69b9      	ldr	r1, [r7, #24]
 80041ae:	0148      	lsls	r0, r1, #5
 80041b0:	69f9      	ldr	r1, [r7, #28]
 80041b2:	4401      	add	r1, r0
 80041b4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80041b8:	4313      	orrs	r3, r2
 80041ba:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80041bc:	79fb      	ldrb	r3, [r7, #7]
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d10d      	bne.n	80041de <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	691b      	ldr	r3, [r3, #16]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d009      	beq.n	80041de <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	6919      	ldr	r1, [r3, #16]
 80041ce:	69bb      	ldr	r3, [r7, #24]
 80041d0:	015a      	lsls	r2, r3, #5
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	4413      	add	r3, r2
 80041d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041da:	460a      	mov	r2, r1
 80041dc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	791b      	ldrb	r3, [r3, #4]
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d128      	bne.n	8004238 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d110      	bne.n	8004218 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80041f6:	69bb      	ldr	r3, [r7, #24]
 80041f8:	015a      	lsls	r2, r3, #5
 80041fa:	69fb      	ldr	r3, [r7, #28]
 80041fc:	4413      	add	r3, r2
 80041fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	69ba      	ldr	r2, [r7, #24]
 8004206:	0151      	lsls	r1, r2, #5
 8004208:	69fa      	ldr	r2, [r7, #28]
 800420a:	440a      	add	r2, r1
 800420c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004210:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004214:	6013      	str	r3, [r2, #0]
 8004216:	e00f      	b.n	8004238 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004218:	69bb      	ldr	r3, [r7, #24]
 800421a:	015a      	lsls	r2, r3, #5
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	4413      	add	r3, r2
 8004220:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	69ba      	ldr	r2, [r7, #24]
 8004228:	0151      	lsls	r1, r2, #5
 800422a:	69fa      	ldr	r2, [r7, #28]
 800422c:	440a      	add	r2, r1
 800422e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004232:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004236:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004238:	69bb      	ldr	r3, [r7, #24]
 800423a:	015a      	lsls	r2, r3, #5
 800423c:	69fb      	ldr	r3, [r7, #28]
 800423e:	4413      	add	r3, r2
 8004240:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	69ba      	ldr	r2, [r7, #24]
 8004248:	0151      	lsls	r1, r2, #5
 800424a:	69fa      	ldr	r2, [r7, #28]
 800424c:	440a      	add	r2, r1
 800424e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004252:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004256:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004258:	2300      	movs	r3, #0
}
 800425a:	4618      	mov	r0, r3
 800425c:	3720      	adds	r7, #32
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	1ff80000 	.word	0x1ff80000

08004268 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004268:	b480      	push	{r7}
 800426a:	b087      	sub	sp, #28
 800426c:	af00      	add	r7, sp, #0
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	60b9      	str	r1, [r7, #8]
 8004272:	4613      	mov	r3, r2
 8004274:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	781b      	ldrb	r3, [r3, #0]
 800427e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	785b      	ldrb	r3, [r3, #1]
 8004284:	2b01      	cmp	r3, #1
 8004286:	f040 80ce 	bne.w	8004426 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	699b      	ldr	r3, [r3, #24]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d132      	bne.n	80042f8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	015a      	lsls	r2, r3, #5
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	4413      	add	r3, r2
 800429a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800429e:	691b      	ldr	r3, [r3, #16]
 80042a0:	693a      	ldr	r2, [r7, #16]
 80042a2:	0151      	lsls	r1, r2, #5
 80042a4:	697a      	ldr	r2, [r7, #20]
 80042a6:	440a      	add	r2, r1
 80042a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042ac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80042b0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80042b4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	015a      	lsls	r2, r3, #5
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	4413      	add	r3, r2
 80042be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042c2:	691b      	ldr	r3, [r3, #16]
 80042c4:	693a      	ldr	r2, [r7, #16]
 80042c6:	0151      	lsls	r1, r2, #5
 80042c8:	697a      	ldr	r2, [r7, #20]
 80042ca:	440a      	add	r2, r1
 80042cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80042d4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	015a      	lsls	r2, r3, #5
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	4413      	add	r3, r2
 80042de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042e2:	691b      	ldr	r3, [r3, #16]
 80042e4:	693a      	ldr	r2, [r7, #16]
 80042e6:	0151      	lsls	r1, r2, #5
 80042e8:	697a      	ldr	r2, [r7, #20]
 80042ea:	440a      	add	r2, r1
 80042ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042f0:	0cdb      	lsrs	r3, r3, #19
 80042f2:	04db      	lsls	r3, r3, #19
 80042f4:	6113      	str	r3, [r2, #16]
 80042f6:	e04e      	b.n	8004396 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	015a      	lsls	r2, r3, #5
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	4413      	add	r3, r2
 8004300:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004304:	691b      	ldr	r3, [r3, #16]
 8004306:	693a      	ldr	r2, [r7, #16]
 8004308:	0151      	lsls	r1, r2, #5
 800430a:	697a      	ldr	r2, [r7, #20]
 800430c:	440a      	add	r2, r1
 800430e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004312:	0cdb      	lsrs	r3, r3, #19
 8004314:	04db      	lsls	r3, r3, #19
 8004316:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	015a      	lsls	r2, r3, #5
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	4413      	add	r3, r2
 8004320:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004324:	691b      	ldr	r3, [r3, #16]
 8004326:	693a      	ldr	r2, [r7, #16]
 8004328:	0151      	lsls	r1, r2, #5
 800432a:	697a      	ldr	r2, [r7, #20]
 800432c:	440a      	add	r2, r1
 800432e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004332:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004336:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800433a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	699a      	ldr	r2, [r3, #24]
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	429a      	cmp	r2, r3
 8004346:	d903      	bls.n	8004350 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	68da      	ldr	r2, [r3, #12]
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	015a      	lsls	r2, r3, #5
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	4413      	add	r3, r2
 8004358:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800435c:	691b      	ldr	r3, [r3, #16]
 800435e:	693a      	ldr	r2, [r7, #16]
 8004360:	0151      	lsls	r1, r2, #5
 8004362:	697a      	ldr	r2, [r7, #20]
 8004364:	440a      	add	r2, r1
 8004366:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800436a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800436e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	015a      	lsls	r2, r3, #5
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	4413      	add	r3, r2
 8004378:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800437c:	691a      	ldr	r2, [r3, #16]
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	699b      	ldr	r3, [r3, #24]
 8004382:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004386:	6939      	ldr	r1, [r7, #16]
 8004388:	0148      	lsls	r0, r1, #5
 800438a:	6979      	ldr	r1, [r7, #20]
 800438c:	4401      	add	r1, r0
 800438e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004392:	4313      	orrs	r3, r2
 8004394:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004396:	79fb      	ldrb	r3, [r7, #7]
 8004398:	2b01      	cmp	r3, #1
 800439a:	d11e      	bne.n	80043da <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	695b      	ldr	r3, [r3, #20]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d009      	beq.n	80043b8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	015a      	lsls	r2, r3, #5
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	4413      	add	r3, r2
 80043ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043b0:	461a      	mov	r2, r3
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	695b      	ldr	r3, [r3, #20]
 80043b6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	015a      	lsls	r2, r3, #5
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	4413      	add	r3, r2
 80043c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	693a      	ldr	r2, [r7, #16]
 80043c8:	0151      	lsls	r1, r2, #5
 80043ca:	697a      	ldr	r2, [r7, #20]
 80043cc:	440a      	add	r2, r1
 80043ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043d2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80043d6:	6013      	str	r3, [r2, #0]
 80043d8:	e097      	b.n	800450a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	015a      	lsls	r2, r3, #5
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	4413      	add	r3, r2
 80043e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	693a      	ldr	r2, [r7, #16]
 80043ea:	0151      	lsls	r1, r2, #5
 80043ec:	697a      	ldr	r2, [r7, #20]
 80043ee:	440a      	add	r2, r1
 80043f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043f4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80043f8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	699b      	ldr	r3, [r3, #24]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	f000 8083 	beq.w	800450a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800440a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	781b      	ldrb	r3, [r3, #0]
 8004410:	f003 030f 	and.w	r3, r3, #15
 8004414:	2101      	movs	r1, #1
 8004416:	fa01 f303 	lsl.w	r3, r1, r3
 800441a:	6979      	ldr	r1, [r7, #20]
 800441c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004420:	4313      	orrs	r3, r2
 8004422:	634b      	str	r3, [r1, #52]	; 0x34
 8004424:	e071      	b.n	800450a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	015a      	lsls	r2, r3, #5
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	4413      	add	r3, r2
 800442e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004432:	691b      	ldr	r3, [r3, #16]
 8004434:	693a      	ldr	r2, [r7, #16]
 8004436:	0151      	lsls	r1, r2, #5
 8004438:	697a      	ldr	r2, [r7, #20]
 800443a:	440a      	add	r2, r1
 800443c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004440:	0cdb      	lsrs	r3, r3, #19
 8004442:	04db      	lsls	r3, r3, #19
 8004444:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	015a      	lsls	r2, r3, #5
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	4413      	add	r3, r2
 800444e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004452:	691b      	ldr	r3, [r3, #16]
 8004454:	693a      	ldr	r2, [r7, #16]
 8004456:	0151      	lsls	r1, r2, #5
 8004458:	697a      	ldr	r2, [r7, #20]
 800445a:	440a      	add	r2, r1
 800445c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004460:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004464:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004468:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	699b      	ldr	r3, [r3, #24]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d003      	beq.n	800447a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	68da      	ldr	r2, [r3, #12]
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	68da      	ldr	r2, [r3, #12]
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	015a      	lsls	r2, r3, #5
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	4413      	add	r3, r2
 800448a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800448e:	691b      	ldr	r3, [r3, #16]
 8004490:	693a      	ldr	r2, [r7, #16]
 8004492:	0151      	lsls	r1, r2, #5
 8004494:	697a      	ldr	r2, [r7, #20]
 8004496:	440a      	add	r2, r1
 8004498:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800449c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80044a0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	015a      	lsls	r2, r3, #5
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	4413      	add	r3, r2
 80044aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044ae:	691a      	ldr	r2, [r3, #16]
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	69db      	ldr	r3, [r3, #28]
 80044b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044b8:	6939      	ldr	r1, [r7, #16]
 80044ba:	0148      	lsls	r0, r1, #5
 80044bc:	6979      	ldr	r1, [r7, #20]
 80044be:	4401      	add	r1, r0
 80044c0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80044c4:	4313      	orrs	r3, r2
 80044c6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80044c8:	79fb      	ldrb	r3, [r7, #7]
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d10d      	bne.n	80044ea <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	691b      	ldr	r3, [r3, #16]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d009      	beq.n	80044ea <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	6919      	ldr	r1, [r3, #16]
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	015a      	lsls	r2, r3, #5
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	4413      	add	r3, r2
 80044e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044e6:	460a      	mov	r2, r1
 80044e8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	015a      	lsls	r2, r3, #5
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	4413      	add	r3, r2
 80044f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	693a      	ldr	r2, [r7, #16]
 80044fa:	0151      	lsls	r1, r2, #5
 80044fc:	697a      	ldr	r2, [r7, #20]
 80044fe:	440a      	add	r2, r1
 8004500:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004504:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004508:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800450a:	2300      	movs	r3, #0
}
 800450c:	4618      	mov	r0, r3
 800450e:	371c      	adds	r7, #28
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr

08004518 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004518:	b480      	push	{r7}
 800451a:	b087      	sub	sp, #28
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004522:	2300      	movs	r3, #0
 8004524:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004526:	2300      	movs	r3, #0
 8004528:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	785b      	ldrb	r3, [r3, #1]
 8004532:	2b01      	cmp	r3, #1
 8004534:	d14a      	bne.n	80045cc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	781b      	ldrb	r3, [r3, #0]
 800453a:	015a      	lsls	r2, r3, #5
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	4413      	add	r3, r2
 8004540:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800454a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800454e:	f040 8086 	bne.w	800465e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	781b      	ldrb	r3, [r3, #0]
 8004556:	015a      	lsls	r2, r3, #5
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	4413      	add	r3, r2
 800455c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	683a      	ldr	r2, [r7, #0]
 8004564:	7812      	ldrb	r2, [r2, #0]
 8004566:	0151      	lsls	r1, r2, #5
 8004568:	693a      	ldr	r2, [r7, #16]
 800456a:	440a      	add	r2, r1
 800456c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004570:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004574:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	781b      	ldrb	r3, [r3, #0]
 800457a:	015a      	lsls	r2, r3, #5
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	4413      	add	r3, r2
 8004580:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	683a      	ldr	r2, [r7, #0]
 8004588:	7812      	ldrb	r2, [r2, #0]
 800458a:	0151      	lsls	r1, r2, #5
 800458c:	693a      	ldr	r2, [r7, #16]
 800458e:	440a      	add	r2, r1
 8004590:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004594:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004598:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	3301      	adds	r3, #1
 800459e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f242 7210 	movw	r2, #10000	; 0x2710
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d902      	bls.n	80045b0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	75fb      	strb	r3, [r7, #23]
          break;
 80045ae:	e056      	b.n	800465e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	781b      	ldrb	r3, [r3, #0]
 80045b4:	015a      	lsls	r2, r3, #5
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	4413      	add	r3, r2
 80045ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80045c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80045c8:	d0e7      	beq.n	800459a <USB_EPStopXfer+0x82>
 80045ca:	e048      	b.n	800465e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	781b      	ldrb	r3, [r3, #0]
 80045d0:	015a      	lsls	r2, r3, #5
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	4413      	add	r3, r2
 80045d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80045e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80045e4:	d13b      	bne.n	800465e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	781b      	ldrb	r3, [r3, #0]
 80045ea:	015a      	lsls	r2, r3, #5
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	4413      	add	r3, r2
 80045f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	683a      	ldr	r2, [r7, #0]
 80045f8:	7812      	ldrb	r2, [r2, #0]
 80045fa:	0151      	lsls	r1, r2, #5
 80045fc:	693a      	ldr	r2, [r7, #16]
 80045fe:	440a      	add	r2, r1
 8004600:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004604:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004608:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	781b      	ldrb	r3, [r3, #0]
 800460e:	015a      	lsls	r2, r3, #5
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	4413      	add	r3, r2
 8004614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	683a      	ldr	r2, [r7, #0]
 800461c:	7812      	ldrb	r2, [r2, #0]
 800461e:	0151      	lsls	r1, r2, #5
 8004620:	693a      	ldr	r2, [r7, #16]
 8004622:	440a      	add	r2, r1
 8004624:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004628:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800462c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	3301      	adds	r3, #1
 8004632:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f242 7210 	movw	r2, #10000	; 0x2710
 800463a:	4293      	cmp	r3, r2
 800463c:	d902      	bls.n	8004644 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	75fb      	strb	r3, [r7, #23]
          break;
 8004642:	e00c      	b.n	800465e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	015a      	lsls	r2, r3, #5
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	4413      	add	r3, r2
 800464e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004658:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800465c:	d0e7      	beq.n	800462e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800465e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004660:	4618      	mov	r0, r3
 8004662:	371c      	adds	r7, #28
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr

0800466c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800466c:	b480      	push	{r7}
 800466e:	b089      	sub	sp, #36	; 0x24
 8004670:	af00      	add	r7, sp, #0
 8004672:	60f8      	str	r0, [r7, #12]
 8004674:	60b9      	str	r1, [r7, #8]
 8004676:	4611      	mov	r1, r2
 8004678:	461a      	mov	r2, r3
 800467a:	460b      	mov	r3, r1
 800467c:	71fb      	strb	r3, [r7, #7]
 800467e:	4613      	mov	r3, r2
 8004680:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800468a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800468e:	2b00      	cmp	r3, #0
 8004690:	d123      	bne.n	80046da <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004692:	88bb      	ldrh	r3, [r7, #4]
 8004694:	3303      	adds	r3, #3
 8004696:	089b      	lsrs	r3, r3, #2
 8004698:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800469a:	2300      	movs	r3, #0
 800469c:	61bb      	str	r3, [r7, #24]
 800469e:	e018      	b.n	80046d2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80046a0:	79fb      	ldrb	r3, [r7, #7]
 80046a2:	031a      	lsls	r2, r3, #12
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	4413      	add	r3, r2
 80046a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046ac:	461a      	mov	r2, r3
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	3301      	adds	r3, #1
 80046b8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80046ba:	69fb      	ldr	r3, [r7, #28]
 80046bc:	3301      	adds	r3, #1
 80046be:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	3301      	adds	r3, #1
 80046c4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	3301      	adds	r3, #1
 80046ca:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80046cc:	69bb      	ldr	r3, [r7, #24]
 80046ce:	3301      	adds	r3, #1
 80046d0:	61bb      	str	r3, [r7, #24]
 80046d2:	69ba      	ldr	r2, [r7, #24]
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d3e2      	bcc.n	80046a0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80046da:	2300      	movs	r3, #0
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3724      	adds	r7, #36	; 0x24
 80046e0:	46bd      	mov	sp, r7
 80046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e6:	4770      	bx	lr

080046e8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b08b      	sub	sp, #44	; 0x2c
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	4613      	mov	r3, r2
 80046f4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80046fe:	88fb      	ldrh	r3, [r7, #6]
 8004700:	089b      	lsrs	r3, r3, #2
 8004702:	b29b      	uxth	r3, r3
 8004704:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004706:	88fb      	ldrh	r3, [r7, #6]
 8004708:	f003 0303 	and.w	r3, r3, #3
 800470c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800470e:	2300      	movs	r3, #0
 8004710:	623b      	str	r3, [r7, #32]
 8004712:	e014      	b.n	800473e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004714:	69bb      	ldr	r3, [r7, #24]
 8004716:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471e:	601a      	str	r2, [r3, #0]
    pDest++;
 8004720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004722:	3301      	adds	r3, #1
 8004724:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004728:	3301      	adds	r3, #1
 800472a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800472c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472e:	3301      	adds	r3, #1
 8004730:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004734:	3301      	adds	r3, #1
 8004736:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004738:	6a3b      	ldr	r3, [r7, #32]
 800473a:	3301      	adds	r3, #1
 800473c:	623b      	str	r3, [r7, #32]
 800473e:	6a3a      	ldr	r2, [r7, #32]
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	429a      	cmp	r2, r3
 8004744:	d3e6      	bcc.n	8004714 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004746:	8bfb      	ldrh	r3, [r7, #30]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d01e      	beq.n	800478a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800474c:	2300      	movs	r3, #0
 800474e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004750:	69bb      	ldr	r3, [r7, #24]
 8004752:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004756:	461a      	mov	r2, r3
 8004758:	f107 0310 	add.w	r3, r7, #16
 800475c:	6812      	ldr	r2, [r2, #0]
 800475e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004760:	693a      	ldr	r2, [r7, #16]
 8004762:	6a3b      	ldr	r3, [r7, #32]
 8004764:	b2db      	uxtb	r3, r3
 8004766:	00db      	lsls	r3, r3, #3
 8004768:	fa22 f303 	lsr.w	r3, r2, r3
 800476c:	b2da      	uxtb	r2, r3
 800476e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004770:	701a      	strb	r2, [r3, #0]
      i++;
 8004772:	6a3b      	ldr	r3, [r7, #32]
 8004774:	3301      	adds	r3, #1
 8004776:	623b      	str	r3, [r7, #32]
      pDest++;
 8004778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477a:	3301      	adds	r3, #1
 800477c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800477e:	8bfb      	ldrh	r3, [r7, #30]
 8004780:	3b01      	subs	r3, #1
 8004782:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004784:	8bfb      	ldrh	r3, [r7, #30]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d1ea      	bne.n	8004760 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800478a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800478c:	4618      	mov	r0, r3
 800478e:	372c      	adds	r7, #44	; 0x2c
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr

08004798 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004798:	b480      	push	{r7}
 800479a:	b085      	sub	sp, #20
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	781b      	ldrb	r3, [r3, #0]
 80047aa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	785b      	ldrb	r3, [r3, #1]
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d12c      	bne.n	800480e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	015a      	lsls	r2, r3, #5
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	4413      	add	r3, r2
 80047bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	db12      	blt.n	80047ec <USB_EPSetStall+0x54>
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d00f      	beq.n	80047ec <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	015a      	lsls	r2, r3, #5
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	4413      	add	r3, r2
 80047d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	68ba      	ldr	r2, [r7, #8]
 80047dc:	0151      	lsls	r1, r2, #5
 80047de:	68fa      	ldr	r2, [r7, #12]
 80047e0:	440a      	add	r2, r1
 80047e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047e6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80047ea:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	015a      	lsls	r2, r3, #5
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	4413      	add	r3, r2
 80047f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	68ba      	ldr	r2, [r7, #8]
 80047fc:	0151      	lsls	r1, r2, #5
 80047fe:	68fa      	ldr	r2, [r7, #12]
 8004800:	440a      	add	r2, r1
 8004802:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004806:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800480a:	6013      	str	r3, [r2, #0]
 800480c:	e02b      	b.n	8004866 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	015a      	lsls	r2, r3, #5
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	4413      	add	r3, r2
 8004816:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	2b00      	cmp	r3, #0
 800481e:	db12      	blt.n	8004846 <USB_EPSetStall+0xae>
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d00f      	beq.n	8004846 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	015a      	lsls	r2, r3, #5
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	4413      	add	r3, r2
 800482e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	68ba      	ldr	r2, [r7, #8]
 8004836:	0151      	lsls	r1, r2, #5
 8004838:	68fa      	ldr	r2, [r7, #12]
 800483a:	440a      	add	r2, r1
 800483c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004840:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004844:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	015a      	lsls	r2, r3, #5
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	4413      	add	r3, r2
 800484e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	68ba      	ldr	r2, [r7, #8]
 8004856:	0151      	lsls	r1, r2, #5
 8004858:	68fa      	ldr	r2, [r7, #12]
 800485a:	440a      	add	r2, r1
 800485c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004860:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004864:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004866:	2300      	movs	r3, #0
}
 8004868:	4618      	mov	r0, r3
 800486a:	3714      	adds	r7, #20
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr

08004874 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004874:	b480      	push	{r7}
 8004876:	b085      	sub	sp, #20
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	781b      	ldrb	r3, [r3, #0]
 8004886:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	785b      	ldrb	r3, [r3, #1]
 800488c:	2b01      	cmp	r3, #1
 800488e:	d128      	bne.n	80048e2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	015a      	lsls	r2, r3, #5
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	4413      	add	r3, r2
 8004898:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	68ba      	ldr	r2, [r7, #8]
 80048a0:	0151      	lsls	r1, r2, #5
 80048a2:	68fa      	ldr	r2, [r7, #12]
 80048a4:	440a      	add	r2, r1
 80048a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80048ae:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	791b      	ldrb	r3, [r3, #4]
 80048b4:	2b03      	cmp	r3, #3
 80048b6:	d003      	beq.n	80048c0 <USB_EPClearStall+0x4c>
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	791b      	ldrb	r3, [r3, #4]
 80048bc:	2b02      	cmp	r3, #2
 80048be:	d138      	bne.n	8004932 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	015a      	lsls	r2, r3, #5
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	4413      	add	r3, r2
 80048c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	68ba      	ldr	r2, [r7, #8]
 80048d0:	0151      	lsls	r1, r2, #5
 80048d2:	68fa      	ldr	r2, [r7, #12]
 80048d4:	440a      	add	r2, r1
 80048d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048de:	6013      	str	r3, [r2, #0]
 80048e0:	e027      	b.n	8004932 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	015a      	lsls	r2, r3, #5
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	4413      	add	r3, r2
 80048ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	68ba      	ldr	r2, [r7, #8]
 80048f2:	0151      	lsls	r1, r2, #5
 80048f4:	68fa      	ldr	r2, [r7, #12]
 80048f6:	440a      	add	r2, r1
 80048f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048fc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004900:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	791b      	ldrb	r3, [r3, #4]
 8004906:	2b03      	cmp	r3, #3
 8004908:	d003      	beq.n	8004912 <USB_EPClearStall+0x9e>
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	791b      	ldrb	r3, [r3, #4]
 800490e:	2b02      	cmp	r3, #2
 8004910:	d10f      	bne.n	8004932 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	015a      	lsls	r2, r3, #5
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	4413      	add	r3, r2
 800491a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	68ba      	ldr	r2, [r7, #8]
 8004922:	0151      	lsls	r1, r2, #5
 8004924:	68fa      	ldr	r2, [r7, #12]
 8004926:	440a      	add	r2, r1
 8004928:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800492c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004930:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004932:	2300      	movs	r3, #0
}
 8004934:	4618      	mov	r0, r3
 8004936:	3714      	adds	r7, #20
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr

08004940 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004940:	b480      	push	{r7}
 8004942:	b085      	sub	sp, #20
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	460b      	mov	r3, r1
 800494a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	68fa      	ldr	r2, [r7, #12]
 800495a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800495e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004962:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	78fb      	ldrb	r3, [r7, #3]
 800496e:	011b      	lsls	r3, r3, #4
 8004970:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004974:	68f9      	ldr	r1, [r7, #12]
 8004976:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800497a:	4313      	orrs	r3, r2
 800497c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800497e:	2300      	movs	r3, #0
}
 8004980:	4618      	mov	r0, r3
 8004982:	3714      	adds	r7, #20
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr

0800498c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800498c:	b480      	push	{r7}
 800498e:	b085      	sub	sp, #20
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	68fa      	ldr	r2, [r7, #12]
 80049a2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80049a6:	f023 0303 	bic.w	r3, r3, #3
 80049aa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	68fa      	ldr	r2, [r7, #12]
 80049b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049ba:	f023 0302 	bic.w	r3, r3, #2
 80049be:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80049c0:	2300      	movs	r3, #0
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3714      	adds	r7, #20
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr

080049ce <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80049ce:	b480      	push	{r7}
 80049d0:	b085      	sub	sp, #20
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	68fa      	ldr	r2, [r7, #12]
 80049e4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80049e8:	f023 0303 	bic.w	r3, r3, #3
 80049ec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	68fa      	ldr	r2, [r7, #12]
 80049f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049fc:	f043 0302 	orr.w	r3, r3, #2
 8004a00:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004a02:	2300      	movs	r3, #0
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3714      	adds	r7, #20
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr

08004a10 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b085      	sub	sp, #20
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	695b      	ldr	r3, [r3, #20]
 8004a1c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	699b      	ldr	r3, [r3, #24]
 8004a22:	68fa      	ldr	r2, [r7, #12]
 8004a24:	4013      	ands	r3, r2
 8004a26:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004a28:	68fb      	ldr	r3, [r7, #12]
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3714      	adds	r7, #20
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr

08004a36 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004a36:	b480      	push	{r7}
 8004a38:	b085      	sub	sp, #20
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a48:	699b      	ldr	r3, [r3, #24]
 8004a4a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a52:	69db      	ldr	r3, [r3, #28]
 8004a54:	68ba      	ldr	r2, [r7, #8]
 8004a56:	4013      	ands	r3, r2
 8004a58:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	0c1b      	lsrs	r3, r3, #16
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3714      	adds	r7, #20
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr

08004a6a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004a6a:	b480      	push	{r7}
 8004a6c:	b085      	sub	sp, #20
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a7c:	699b      	ldr	r3, [r3, #24]
 8004a7e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a86:	69db      	ldr	r3, [r3, #28]
 8004a88:	68ba      	ldr	r2, [r7, #8]
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	b29b      	uxth	r3, r3
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3714      	adds	r7, #20
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr

08004a9e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004a9e:	b480      	push	{r7}
 8004aa0:	b085      	sub	sp, #20
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]
 8004aa6:	460b      	mov	r3, r1
 8004aa8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004aae:	78fb      	ldrb	r3, [r7, #3]
 8004ab0:	015a      	lsls	r2, r3, #5
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	4413      	add	r3, r2
 8004ab6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ac4:	695b      	ldr	r3, [r3, #20]
 8004ac6:	68ba      	ldr	r2, [r7, #8]
 8004ac8:	4013      	ands	r3, r2
 8004aca:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004acc:	68bb      	ldr	r3, [r7, #8]
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3714      	adds	r7, #20
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr

08004ada <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004ada:	b480      	push	{r7}
 8004adc:	b087      	sub	sp, #28
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]
 8004ae2:	460b      	mov	r3, r1
 8004ae4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004af0:	691b      	ldr	r3, [r3, #16]
 8004af2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004afa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004afc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004afe:	78fb      	ldrb	r3, [r7, #3]
 8004b00:	f003 030f 	and.w	r3, r3, #15
 8004b04:	68fa      	ldr	r2, [r7, #12]
 8004b06:	fa22 f303 	lsr.w	r3, r2, r3
 8004b0a:	01db      	lsls	r3, r3, #7
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	693a      	ldr	r2, [r7, #16]
 8004b10:	4313      	orrs	r3, r2
 8004b12:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004b14:	78fb      	ldrb	r3, [r7, #3]
 8004b16:	015a      	lsls	r2, r3, #5
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	4413      	add	r3, r2
 8004b1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	693a      	ldr	r2, [r7, #16]
 8004b24:	4013      	ands	r3, r2
 8004b26:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004b28:	68bb      	ldr	r3, [r7, #8]
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	371c      	adds	r7, #28
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr

08004b36 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004b36:	b480      	push	{r7}
 8004b38:	b083      	sub	sp, #12
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	695b      	ldr	r3, [r3, #20]
 8004b42:	f003 0301 	and.w	r3, r3, #1
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	370c      	adds	r7, #12
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr

08004b52 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004b52:	b480      	push	{r7}
 8004b54:	b085      	sub	sp, #20
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	68fa      	ldr	r2, [r7, #12]
 8004b68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b6c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004b70:	f023 0307 	bic.w	r3, r3, #7
 8004b74:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	68fa      	ldr	r2, [r7, #12]
 8004b80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b88:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004b8a:	2300      	movs	r3, #0
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3714      	adds	r7, #20
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr

08004b98 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b087      	sub	sp, #28
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	60f8      	str	r0, [r7, #12]
 8004ba0:	460b      	mov	r3, r1
 8004ba2:	607a      	str	r2, [r7, #4]
 8004ba4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	333c      	adds	r3, #60	; 0x3c
 8004bae:	3304      	adds	r3, #4
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	4a26      	ldr	r2, [pc, #152]	; (8004c50 <USB_EP0_OutStart+0xb8>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d90a      	bls.n	8004bd2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004bc8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004bcc:	d101      	bne.n	8004bd2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	e037      	b.n	8004c42 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bd8:	461a      	mov	r2, r3
 8004bda:	2300      	movs	r3, #0
 8004bdc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004be4:	691b      	ldr	r3, [r3, #16]
 8004be6:	697a      	ldr	r2, [r7, #20]
 8004be8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004bf0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bf8:	691b      	ldr	r3, [r3, #16]
 8004bfa:	697a      	ldr	r2, [r7, #20]
 8004bfc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c00:	f043 0318 	orr.w	r3, r3, #24
 8004c04:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	697a      	ldr	r2, [r7, #20]
 8004c10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c14:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004c18:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004c1a:	7afb      	ldrb	r3, [r7, #11]
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d10f      	bne.n	8004c40 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c26:	461a      	mov	r2, r3
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	697a      	ldr	r2, [r7, #20]
 8004c36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c3a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004c3e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004c40:	2300      	movs	r3, #0
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	371c      	adds	r7, #28
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr
 8004c4e:	bf00      	nop
 8004c50:	4f54300a 	.word	0x4f54300a

08004c54 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b085      	sub	sp, #20
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	3301      	adds	r3, #1
 8004c64:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	4a13      	ldr	r2, [pc, #76]	; (8004cb8 <USB_CoreReset+0x64>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d901      	bls.n	8004c72 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	e01b      	b.n	8004caa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	691b      	ldr	r3, [r3, #16]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	daf2      	bge.n	8004c60 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	f043 0201 	orr.w	r2, r3, #1
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	3301      	adds	r3, #1
 8004c8e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	4a09      	ldr	r2, [pc, #36]	; (8004cb8 <USB_CoreReset+0x64>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d901      	bls.n	8004c9c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004c98:	2303      	movs	r3, #3
 8004c9a:	e006      	b.n	8004caa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	691b      	ldr	r3, [r3, #16]
 8004ca0:	f003 0301 	and.w	r3, r3, #1
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d0f0      	beq.n	8004c8a <USB_CoreReset+0x36>

  return HAL_OK;
 8004ca8:	2300      	movs	r3, #0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3714      	adds	r7, #20
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr
 8004cb6:	bf00      	nop
 8004cb8:	00030d40 	.word	0x00030d40

08004cbc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b084      	sub	sp, #16
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	460b      	mov	r3, r1
 8004cc6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004cc8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004ccc:	f002 fc8a 	bl	80075e4 <USBD_static_malloc>
 8004cd0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d109      	bne.n	8004cec <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	32b0      	adds	r2, #176	; 0xb0
 8004ce2:	2100      	movs	r1, #0
 8004ce4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004ce8:	2302      	movs	r3, #2
 8004cea:	e0d4      	b.n	8004e96 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8004cec:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8004cf0:	2100      	movs	r1, #0
 8004cf2:	68f8      	ldr	r0, [r7, #12]
 8004cf4:	f002 fcde 	bl	80076b4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	32b0      	adds	r2, #176	; 0xb0
 8004d02:	68f9      	ldr	r1, [r7, #12]
 8004d04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	32b0      	adds	r2, #176	; 0xb0
 8004d12:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	7c1b      	ldrb	r3, [r3, #16]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d138      	bne.n	8004d96 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004d24:	4b5e      	ldr	r3, [pc, #376]	; (8004ea0 <USBD_CDC_Init+0x1e4>)
 8004d26:	7819      	ldrb	r1, [r3, #0]
 8004d28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d2c:	2202      	movs	r2, #2
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f002 fb35 	bl	800739e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004d34:	4b5a      	ldr	r3, [pc, #360]	; (8004ea0 <USBD_CDC_Init+0x1e4>)
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	f003 020f 	and.w	r2, r3, #15
 8004d3c:	6879      	ldr	r1, [r7, #4]
 8004d3e:	4613      	mov	r3, r2
 8004d40:	009b      	lsls	r3, r3, #2
 8004d42:	4413      	add	r3, r2
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	440b      	add	r3, r1
 8004d48:	3324      	adds	r3, #36	; 0x24
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004d4e:	4b55      	ldr	r3, [pc, #340]	; (8004ea4 <USBD_CDC_Init+0x1e8>)
 8004d50:	7819      	ldrb	r1, [r3, #0]
 8004d52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d56:	2202      	movs	r2, #2
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	f002 fb20 	bl	800739e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004d5e:	4b51      	ldr	r3, [pc, #324]	; (8004ea4 <USBD_CDC_Init+0x1e8>)
 8004d60:	781b      	ldrb	r3, [r3, #0]
 8004d62:	f003 020f 	and.w	r2, r3, #15
 8004d66:	6879      	ldr	r1, [r7, #4]
 8004d68:	4613      	mov	r3, r2
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	4413      	add	r3, r2
 8004d6e:	009b      	lsls	r3, r3, #2
 8004d70:	440b      	add	r3, r1
 8004d72:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004d76:	2201      	movs	r2, #1
 8004d78:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004d7a:	4b4b      	ldr	r3, [pc, #300]	; (8004ea8 <USBD_CDC_Init+0x1ec>)
 8004d7c:	781b      	ldrb	r3, [r3, #0]
 8004d7e:	f003 020f 	and.w	r2, r3, #15
 8004d82:	6879      	ldr	r1, [r7, #4]
 8004d84:	4613      	mov	r3, r2
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	4413      	add	r3, r2
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	440b      	add	r3, r1
 8004d8e:	3326      	adds	r3, #38	; 0x26
 8004d90:	2210      	movs	r2, #16
 8004d92:	801a      	strh	r2, [r3, #0]
 8004d94:	e035      	b.n	8004e02 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004d96:	4b42      	ldr	r3, [pc, #264]	; (8004ea0 <USBD_CDC_Init+0x1e4>)
 8004d98:	7819      	ldrb	r1, [r3, #0]
 8004d9a:	2340      	movs	r3, #64	; 0x40
 8004d9c:	2202      	movs	r2, #2
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f002 fafd 	bl	800739e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004da4:	4b3e      	ldr	r3, [pc, #248]	; (8004ea0 <USBD_CDC_Init+0x1e4>)
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	f003 020f 	and.w	r2, r3, #15
 8004dac:	6879      	ldr	r1, [r7, #4]
 8004dae:	4613      	mov	r3, r2
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	4413      	add	r3, r2
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	440b      	add	r3, r1
 8004db8:	3324      	adds	r3, #36	; 0x24
 8004dba:	2201      	movs	r2, #1
 8004dbc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004dbe:	4b39      	ldr	r3, [pc, #228]	; (8004ea4 <USBD_CDC_Init+0x1e8>)
 8004dc0:	7819      	ldrb	r1, [r3, #0]
 8004dc2:	2340      	movs	r3, #64	; 0x40
 8004dc4:	2202      	movs	r2, #2
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f002 fae9 	bl	800739e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004dcc:	4b35      	ldr	r3, [pc, #212]	; (8004ea4 <USBD_CDC_Init+0x1e8>)
 8004dce:	781b      	ldrb	r3, [r3, #0]
 8004dd0:	f003 020f 	and.w	r2, r3, #15
 8004dd4:	6879      	ldr	r1, [r7, #4]
 8004dd6:	4613      	mov	r3, r2
 8004dd8:	009b      	lsls	r3, r3, #2
 8004dda:	4413      	add	r3, r2
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	440b      	add	r3, r1
 8004de0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004de4:	2201      	movs	r2, #1
 8004de6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004de8:	4b2f      	ldr	r3, [pc, #188]	; (8004ea8 <USBD_CDC_Init+0x1ec>)
 8004dea:	781b      	ldrb	r3, [r3, #0]
 8004dec:	f003 020f 	and.w	r2, r3, #15
 8004df0:	6879      	ldr	r1, [r7, #4]
 8004df2:	4613      	mov	r3, r2
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	4413      	add	r3, r2
 8004df8:	009b      	lsls	r3, r3, #2
 8004dfa:	440b      	add	r3, r1
 8004dfc:	3326      	adds	r3, #38	; 0x26
 8004dfe:	2210      	movs	r2, #16
 8004e00:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004e02:	4b29      	ldr	r3, [pc, #164]	; (8004ea8 <USBD_CDC_Init+0x1ec>)
 8004e04:	7819      	ldrb	r1, [r3, #0]
 8004e06:	2308      	movs	r3, #8
 8004e08:	2203      	movs	r2, #3
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f002 fac7 	bl	800739e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8004e10:	4b25      	ldr	r3, [pc, #148]	; (8004ea8 <USBD_CDC_Init+0x1ec>)
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	f003 020f 	and.w	r2, r3, #15
 8004e18:	6879      	ldr	r1, [r7, #4]
 8004e1a:	4613      	mov	r3, r2
 8004e1c:	009b      	lsls	r3, r3, #2
 8004e1e:	4413      	add	r3, r2
 8004e20:	009b      	lsls	r3, r3, #2
 8004e22:	440b      	add	r3, r1
 8004e24:	3324      	adds	r3, #36	; 0x24
 8004e26:	2201      	movs	r2, #1
 8004e28:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	33b0      	adds	r3, #176	; 0xb0
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	4413      	add	r3, r2
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2200      	movs	r2, #0
 8004e52:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d101      	bne.n	8004e64 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8004e60:	2302      	movs	r3, #2
 8004e62:	e018      	b.n	8004e96 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	7c1b      	ldrb	r3, [r3, #16]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d10a      	bne.n	8004e82 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004e6c:	4b0d      	ldr	r3, [pc, #52]	; (8004ea4 <USBD_CDC_Init+0x1e8>)
 8004e6e:	7819      	ldrb	r1, [r3, #0]
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004e76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f002 fb7e 	bl	800757c <USBD_LL_PrepareReceive>
 8004e80:	e008      	b.n	8004e94 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004e82:	4b08      	ldr	r3, [pc, #32]	; (8004ea4 <USBD_CDC_Init+0x1e8>)
 8004e84:	7819      	ldrb	r1, [r3, #0]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004e8c:	2340      	movs	r3, #64	; 0x40
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f002 fb74 	bl	800757c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004e94:	2300      	movs	r3, #0
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3710      	adds	r7, #16
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}
 8004e9e:	bf00      	nop
 8004ea0:	20000093 	.word	0x20000093
 8004ea4:	20000094 	.word	0x20000094
 8004ea8:	20000095 	.word	0x20000095

08004eac <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b082      	sub	sp, #8
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	460b      	mov	r3, r1
 8004eb6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8004eb8:	4b3a      	ldr	r3, [pc, #232]	; (8004fa4 <USBD_CDC_DeInit+0xf8>)
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	4619      	mov	r1, r3
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f002 fa93 	bl	80073ea <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8004ec4:	4b37      	ldr	r3, [pc, #220]	; (8004fa4 <USBD_CDC_DeInit+0xf8>)
 8004ec6:	781b      	ldrb	r3, [r3, #0]
 8004ec8:	f003 020f 	and.w	r2, r3, #15
 8004ecc:	6879      	ldr	r1, [r7, #4]
 8004ece:	4613      	mov	r3, r2
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	4413      	add	r3, r2
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	440b      	add	r3, r1
 8004ed8:	3324      	adds	r3, #36	; 0x24
 8004eda:	2200      	movs	r2, #0
 8004edc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8004ede:	4b32      	ldr	r3, [pc, #200]	; (8004fa8 <USBD_CDC_DeInit+0xfc>)
 8004ee0:	781b      	ldrb	r3, [r3, #0]
 8004ee2:	4619      	mov	r1, r3
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f002 fa80 	bl	80073ea <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8004eea:	4b2f      	ldr	r3, [pc, #188]	; (8004fa8 <USBD_CDC_DeInit+0xfc>)
 8004eec:	781b      	ldrb	r3, [r3, #0]
 8004eee:	f003 020f 	and.w	r2, r3, #15
 8004ef2:	6879      	ldr	r1, [r7, #4]
 8004ef4:	4613      	mov	r3, r2
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	4413      	add	r3, r2
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	440b      	add	r3, r1
 8004efe:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004f02:	2200      	movs	r2, #0
 8004f04:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8004f06:	4b29      	ldr	r3, [pc, #164]	; (8004fac <USBD_CDC_DeInit+0x100>)
 8004f08:	781b      	ldrb	r3, [r3, #0]
 8004f0a:	4619      	mov	r1, r3
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f002 fa6c 	bl	80073ea <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8004f12:	4b26      	ldr	r3, [pc, #152]	; (8004fac <USBD_CDC_DeInit+0x100>)
 8004f14:	781b      	ldrb	r3, [r3, #0]
 8004f16:	f003 020f 	and.w	r2, r3, #15
 8004f1a:	6879      	ldr	r1, [r7, #4]
 8004f1c:	4613      	mov	r3, r2
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	4413      	add	r3, r2
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	440b      	add	r3, r1
 8004f26:	3324      	adds	r3, #36	; 0x24
 8004f28:	2200      	movs	r2, #0
 8004f2a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8004f2c:	4b1f      	ldr	r3, [pc, #124]	; (8004fac <USBD_CDC_DeInit+0x100>)
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	f003 020f 	and.w	r2, r3, #15
 8004f34:	6879      	ldr	r1, [r7, #4]
 8004f36:	4613      	mov	r3, r2
 8004f38:	009b      	lsls	r3, r3, #2
 8004f3a:	4413      	add	r3, r2
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	440b      	add	r3, r1
 8004f40:	3326      	adds	r3, #38	; 0x26
 8004f42:	2200      	movs	r2, #0
 8004f44:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	32b0      	adds	r2, #176	; 0xb0
 8004f50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d01f      	beq.n	8004f98 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	33b0      	adds	r3, #176	; 0xb0
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	4413      	add	r3, r2
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	32b0      	adds	r2, #176	; 0xb0
 8004f76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f002 fb40 	bl	8007600 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	32b0      	adds	r2, #176	; 0xb0
 8004f8a:	2100      	movs	r1, #0
 8004f8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3708      	adds	r7, #8
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
 8004fa2:	bf00      	nop
 8004fa4:	20000093 	.word	0x20000093
 8004fa8:	20000094 	.word	0x20000094
 8004fac:	20000095 	.word	0x20000095

08004fb0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b086      	sub	sp, #24
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	32b0      	adds	r2, #176	; 0xb0
 8004fc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fc8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d101      	bne.n	8004fe0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8004fdc:	2303      	movs	r3, #3
 8004fde:	e0bf      	b.n	8005160 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	781b      	ldrb	r3, [r3, #0]
 8004fe4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d050      	beq.n	800508e <USBD_CDC_Setup+0xde>
 8004fec:	2b20      	cmp	r3, #32
 8004fee:	f040 80af 	bne.w	8005150 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	88db      	ldrh	r3, [r3, #6]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d03a      	beq.n	8005070 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	781b      	ldrb	r3, [r3, #0]
 8004ffe:	b25b      	sxtb	r3, r3
 8005000:	2b00      	cmp	r3, #0
 8005002:	da1b      	bge.n	800503c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	33b0      	adds	r3, #176	; 0xb0
 800500e:	009b      	lsls	r3, r3, #2
 8005010:	4413      	add	r3, r2
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	683a      	ldr	r2, [r7, #0]
 8005018:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800501a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800501c:	683a      	ldr	r2, [r7, #0]
 800501e:	88d2      	ldrh	r2, [r2, #6]
 8005020:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	88db      	ldrh	r3, [r3, #6]
 8005026:	2b07      	cmp	r3, #7
 8005028:	bf28      	it	cs
 800502a:	2307      	movcs	r3, #7
 800502c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	89fa      	ldrh	r2, [r7, #14]
 8005032:	4619      	mov	r1, r3
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f001 fd89 	bl	8006b4c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800503a:	e090      	b.n	800515e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	785a      	ldrb	r2, [r3, #1]
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	88db      	ldrh	r3, [r3, #6]
 800504a:	2b3f      	cmp	r3, #63	; 0x3f
 800504c:	d803      	bhi.n	8005056 <USBD_CDC_Setup+0xa6>
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	88db      	ldrh	r3, [r3, #6]
 8005052:	b2da      	uxtb	r2, r3
 8005054:	e000      	b.n	8005058 <USBD_CDC_Setup+0xa8>
 8005056:	2240      	movs	r2, #64	; 0x40
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800505e:	6939      	ldr	r1, [r7, #16]
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8005066:	461a      	mov	r2, r3
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f001 fd9b 	bl	8006ba4 <USBD_CtlPrepareRx>
      break;
 800506e:	e076      	b.n	800515e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	33b0      	adds	r3, #176	; 0xb0
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	4413      	add	r3, r2
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	683a      	ldr	r2, [r7, #0]
 8005084:	7850      	ldrb	r0, [r2, #1]
 8005086:	2200      	movs	r2, #0
 8005088:	6839      	ldr	r1, [r7, #0]
 800508a:	4798      	blx	r3
      break;
 800508c:	e067      	b.n	800515e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	785b      	ldrb	r3, [r3, #1]
 8005092:	2b0b      	cmp	r3, #11
 8005094:	d851      	bhi.n	800513a <USBD_CDC_Setup+0x18a>
 8005096:	a201      	add	r2, pc, #4	; (adr r2, 800509c <USBD_CDC_Setup+0xec>)
 8005098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800509c:	080050cd 	.word	0x080050cd
 80050a0:	08005149 	.word	0x08005149
 80050a4:	0800513b 	.word	0x0800513b
 80050a8:	0800513b 	.word	0x0800513b
 80050ac:	0800513b 	.word	0x0800513b
 80050b0:	0800513b 	.word	0x0800513b
 80050b4:	0800513b 	.word	0x0800513b
 80050b8:	0800513b 	.word	0x0800513b
 80050bc:	0800513b 	.word	0x0800513b
 80050c0:	0800513b 	.word	0x0800513b
 80050c4:	080050f7 	.word	0x080050f7
 80050c8:	08005121 	.word	0x08005121
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	2b03      	cmp	r3, #3
 80050d6:	d107      	bne.n	80050e8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80050d8:	f107 030a 	add.w	r3, r7, #10
 80050dc:	2202      	movs	r2, #2
 80050de:	4619      	mov	r1, r3
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f001 fd33 	bl	8006b4c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80050e6:	e032      	b.n	800514e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80050e8:	6839      	ldr	r1, [r7, #0]
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f001 fcbd 	bl	8006a6a <USBD_CtlError>
            ret = USBD_FAIL;
 80050f0:	2303      	movs	r3, #3
 80050f2:	75fb      	strb	r3, [r7, #23]
          break;
 80050f4:	e02b      	b.n	800514e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	2b03      	cmp	r3, #3
 8005100:	d107      	bne.n	8005112 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005102:	f107 030d 	add.w	r3, r7, #13
 8005106:	2201      	movs	r2, #1
 8005108:	4619      	mov	r1, r3
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f001 fd1e 	bl	8006b4c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005110:	e01d      	b.n	800514e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005112:	6839      	ldr	r1, [r7, #0]
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f001 fca8 	bl	8006a6a <USBD_CtlError>
            ret = USBD_FAIL;
 800511a:	2303      	movs	r3, #3
 800511c:	75fb      	strb	r3, [r7, #23]
          break;
 800511e:	e016      	b.n	800514e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005126:	b2db      	uxtb	r3, r3
 8005128:	2b03      	cmp	r3, #3
 800512a:	d00f      	beq.n	800514c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800512c:	6839      	ldr	r1, [r7, #0]
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f001 fc9b 	bl	8006a6a <USBD_CtlError>
            ret = USBD_FAIL;
 8005134:	2303      	movs	r3, #3
 8005136:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005138:	e008      	b.n	800514c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800513a:	6839      	ldr	r1, [r7, #0]
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f001 fc94 	bl	8006a6a <USBD_CtlError>
          ret = USBD_FAIL;
 8005142:	2303      	movs	r3, #3
 8005144:	75fb      	strb	r3, [r7, #23]
          break;
 8005146:	e002      	b.n	800514e <USBD_CDC_Setup+0x19e>
          break;
 8005148:	bf00      	nop
 800514a:	e008      	b.n	800515e <USBD_CDC_Setup+0x1ae>
          break;
 800514c:	bf00      	nop
      }
      break;
 800514e:	e006      	b.n	800515e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005150:	6839      	ldr	r1, [r7, #0]
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f001 fc89 	bl	8006a6a <USBD_CtlError>
      ret = USBD_FAIL;
 8005158:	2303      	movs	r3, #3
 800515a:	75fb      	strb	r3, [r7, #23]
      break;
 800515c:	bf00      	nop
  }

  return (uint8_t)ret;
 800515e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005160:	4618      	mov	r0, r3
 8005162:	3718      	adds	r7, #24
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}

08005168 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b084      	sub	sp, #16
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	460b      	mov	r3, r1
 8005172:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800517a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	32b0      	adds	r2, #176	; 0xb0
 8005186:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d101      	bne.n	8005192 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800518e:	2303      	movs	r3, #3
 8005190:	e065      	b.n	800525e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	32b0      	adds	r2, #176	; 0xb0
 800519c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051a0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80051a2:	78fb      	ldrb	r3, [r7, #3]
 80051a4:	f003 020f 	and.w	r2, r3, #15
 80051a8:	6879      	ldr	r1, [r7, #4]
 80051aa:	4613      	mov	r3, r2
 80051ac:	009b      	lsls	r3, r3, #2
 80051ae:	4413      	add	r3, r2
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	440b      	add	r3, r1
 80051b4:	3318      	adds	r3, #24
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d02f      	beq.n	800521c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80051bc:	78fb      	ldrb	r3, [r7, #3]
 80051be:	f003 020f 	and.w	r2, r3, #15
 80051c2:	6879      	ldr	r1, [r7, #4]
 80051c4:	4613      	mov	r3, r2
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	4413      	add	r3, r2
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	440b      	add	r3, r1
 80051ce:	3318      	adds	r3, #24
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	78fb      	ldrb	r3, [r7, #3]
 80051d4:	f003 010f 	and.w	r1, r3, #15
 80051d8:	68f8      	ldr	r0, [r7, #12]
 80051da:	460b      	mov	r3, r1
 80051dc:	00db      	lsls	r3, r3, #3
 80051de:	440b      	add	r3, r1
 80051e0:	009b      	lsls	r3, r3, #2
 80051e2:	4403      	add	r3, r0
 80051e4:	3348      	adds	r3, #72	; 0x48
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	fbb2 f1f3 	udiv	r1, r2, r3
 80051ec:	fb01 f303 	mul.w	r3, r1, r3
 80051f0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d112      	bne.n	800521c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80051f6:	78fb      	ldrb	r3, [r7, #3]
 80051f8:	f003 020f 	and.w	r2, r3, #15
 80051fc:	6879      	ldr	r1, [r7, #4]
 80051fe:	4613      	mov	r3, r2
 8005200:	009b      	lsls	r3, r3, #2
 8005202:	4413      	add	r3, r2
 8005204:	009b      	lsls	r3, r3, #2
 8005206:	440b      	add	r3, r1
 8005208:	3318      	adds	r3, #24
 800520a:	2200      	movs	r2, #0
 800520c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800520e:	78f9      	ldrb	r1, [r7, #3]
 8005210:	2300      	movs	r3, #0
 8005212:	2200      	movs	r2, #0
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f002 f990 	bl	800753a <USBD_LL_Transmit>
 800521a:	e01f      	b.n	800525c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	2200      	movs	r2, #0
 8005220:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	33b0      	adds	r3, #176	; 0xb0
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	4413      	add	r3, r2
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	691b      	ldr	r3, [r3, #16]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d010      	beq.n	800525c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	33b0      	adds	r3, #176	; 0xb0
 8005244:	009b      	lsls	r3, r3, #2
 8005246:	4413      	add	r3, r2
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	691b      	ldr	r3, [r3, #16]
 800524c:	68ba      	ldr	r2, [r7, #8]
 800524e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005252:	68ba      	ldr	r2, [r7, #8]
 8005254:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005258:	78fa      	ldrb	r2, [r7, #3]
 800525a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800525c:	2300      	movs	r3, #0
}
 800525e:	4618      	mov	r0, r3
 8005260:	3710      	adds	r7, #16
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}

08005266 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005266:	b580      	push	{r7, lr}
 8005268:	b084      	sub	sp, #16
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
 800526e:	460b      	mov	r3, r1
 8005270:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	32b0      	adds	r2, #176	; 0xb0
 800527c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005280:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	32b0      	adds	r2, #176	; 0xb0
 800528c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d101      	bne.n	8005298 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005294:	2303      	movs	r3, #3
 8005296:	e01a      	b.n	80052ce <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005298:	78fb      	ldrb	r3, [r7, #3]
 800529a:	4619      	mov	r1, r3
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f002 f98e 	bl	80075be <USBD_LL_GetRxDataSize>
 80052a2:	4602      	mov	r2, r0
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80052b0:	687a      	ldr	r2, [r7, #4]
 80052b2:	33b0      	adds	r3, #176	; 0xb0
 80052b4:	009b      	lsls	r3, r3, #2
 80052b6:	4413      	add	r3, r2
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	68db      	ldr	r3, [r3, #12]
 80052bc:	68fa      	ldr	r2, [r7, #12]
 80052be:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80052c2:	68fa      	ldr	r2, [r7, #12]
 80052c4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80052c8:	4611      	mov	r1, r2
 80052ca:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3710      	adds	r7, #16
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}

080052d6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80052d6:	b580      	push	{r7, lr}
 80052d8:	b084      	sub	sp, #16
 80052da:	af00      	add	r7, sp, #0
 80052dc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	32b0      	adds	r2, #176	; 0xb0
 80052e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052ec:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d101      	bne.n	80052f8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80052f4:	2303      	movs	r3, #3
 80052f6:	e025      	b.n	8005344 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	33b0      	adds	r3, #176	; 0xb0
 8005302:	009b      	lsls	r3, r3, #2
 8005304:	4413      	add	r3, r2
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d01a      	beq.n	8005342 <USBD_CDC_EP0_RxReady+0x6c>
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005312:	2bff      	cmp	r3, #255	; 0xff
 8005314:	d015      	beq.n	8005342 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	33b0      	adds	r3, #176	; 0xb0
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	4413      	add	r3, r2
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	68fa      	ldr	r2, [r7, #12]
 800532a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800532e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005330:	68fa      	ldr	r2, [r7, #12]
 8005332:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005336:	b292      	uxth	r2, r2
 8005338:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	22ff      	movs	r2, #255	; 0xff
 800533e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005342:	2300      	movs	r3, #0
}
 8005344:	4618      	mov	r0, r3
 8005346:	3710      	adds	r7, #16
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}

0800534c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b086      	sub	sp, #24
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005354:	2182      	movs	r1, #130	; 0x82
 8005356:	4818      	ldr	r0, [pc, #96]	; (80053b8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005358:	f000 fd4f 	bl	8005dfa <USBD_GetEpDesc>
 800535c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800535e:	2101      	movs	r1, #1
 8005360:	4815      	ldr	r0, [pc, #84]	; (80053b8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005362:	f000 fd4a 	bl	8005dfa <USBD_GetEpDesc>
 8005366:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005368:	2181      	movs	r1, #129	; 0x81
 800536a:	4813      	ldr	r0, [pc, #76]	; (80053b8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800536c:	f000 fd45 	bl	8005dfa <USBD_GetEpDesc>
 8005370:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d002      	beq.n	800537e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	2210      	movs	r2, #16
 800537c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d006      	beq.n	8005392 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	2200      	movs	r2, #0
 8005388:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800538c:	711a      	strb	r2, [r3, #4]
 800538e:	2200      	movs	r2, #0
 8005390:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d006      	beq.n	80053a6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2200      	movs	r2, #0
 800539c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053a0:	711a      	strb	r2, [r3, #4]
 80053a2:	2200      	movs	r2, #0
 80053a4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2243      	movs	r2, #67	; 0x43
 80053aa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80053ac:	4b02      	ldr	r3, [pc, #8]	; (80053b8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3718      	adds	r7, #24
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
 80053b6:	bf00      	nop
 80053b8:	20000050 	.word	0x20000050

080053bc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b086      	sub	sp, #24
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80053c4:	2182      	movs	r1, #130	; 0x82
 80053c6:	4818      	ldr	r0, [pc, #96]	; (8005428 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80053c8:	f000 fd17 	bl	8005dfa <USBD_GetEpDesc>
 80053cc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80053ce:	2101      	movs	r1, #1
 80053d0:	4815      	ldr	r0, [pc, #84]	; (8005428 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80053d2:	f000 fd12 	bl	8005dfa <USBD_GetEpDesc>
 80053d6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80053d8:	2181      	movs	r1, #129	; 0x81
 80053da:	4813      	ldr	r0, [pc, #76]	; (8005428 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80053dc:	f000 fd0d 	bl	8005dfa <USBD_GetEpDesc>
 80053e0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d002      	beq.n	80053ee <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	2210      	movs	r2, #16
 80053ec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d006      	beq.n	8005402 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	2200      	movs	r2, #0
 80053f8:	711a      	strb	r2, [r3, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	f042 0202 	orr.w	r2, r2, #2
 8005400:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d006      	beq.n	8005416 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2200      	movs	r2, #0
 800540c:	711a      	strb	r2, [r3, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	f042 0202 	orr.w	r2, r2, #2
 8005414:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2243      	movs	r2, #67	; 0x43
 800541a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800541c:	4b02      	ldr	r3, [pc, #8]	; (8005428 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800541e:	4618      	mov	r0, r3
 8005420:	3718      	adds	r7, #24
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
 8005426:	bf00      	nop
 8005428:	20000050 	.word	0x20000050

0800542c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b086      	sub	sp, #24
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005434:	2182      	movs	r1, #130	; 0x82
 8005436:	4818      	ldr	r0, [pc, #96]	; (8005498 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005438:	f000 fcdf 	bl	8005dfa <USBD_GetEpDesc>
 800543c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800543e:	2101      	movs	r1, #1
 8005440:	4815      	ldr	r0, [pc, #84]	; (8005498 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005442:	f000 fcda 	bl	8005dfa <USBD_GetEpDesc>
 8005446:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005448:	2181      	movs	r1, #129	; 0x81
 800544a:	4813      	ldr	r0, [pc, #76]	; (8005498 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800544c:	f000 fcd5 	bl	8005dfa <USBD_GetEpDesc>
 8005450:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d002      	beq.n	800545e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	2210      	movs	r2, #16
 800545c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d006      	beq.n	8005472 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	2200      	movs	r2, #0
 8005468:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800546c:	711a      	strb	r2, [r3, #4]
 800546e:	2200      	movs	r2, #0
 8005470:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d006      	beq.n	8005486 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2200      	movs	r2, #0
 800547c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005480:	711a      	strb	r2, [r3, #4]
 8005482:	2200      	movs	r2, #0
 8005484:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2243      	movs	r2, #67	; 0x43
 800548a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800548c:	4b02      	ldr	r3, [pc, #8]	; (8005498 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800548e:	4618      	mov	r0, r3
 8005490:	3718      	adds	r7, #24
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}
 8005496:	bf00      	nop
 8005498:	20000050 	.word	0x20000050

0800549c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800549c:	b480      	push	{r7}
 800549e:	b083      	sub	sp, #12
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	220a      	movs	r2, #10
 80054a8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80054aa:	4b03      	ldr	r3, [pc, #12]	; (80054b8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	370c      	adds	r7, #12
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr
 80054b8:	2000000c 	.word	0x2000000c

080054bc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80054bc:	b480      	push	{r7}
 80054be:	b083      	sub	sp, #12
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
 80054c4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d101      	bne.n	80054d0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80054cc:	2303      	movs	r3, #3
 80054ce:	e009      	b.n	80054e4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80054d6:	687a      	ldr	r2, [r7, #4]
 80054d8:	33b0      	adds	r3, #176	; 0xb0
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	4413      	add	r3, r2
 80054de:	683a      	ldr	r2, [r7, #0]
 80054e0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80054e2:	2300      	movs	r3, #0
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	370c      	adds	r7, #12
 80054e8:	46bd      	mov	sp, r7
 80054ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ee:	4770      	bx	lr

080054f0 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b087      	sub	sp, #28
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	60f8      	str	r0, [r7, #12]
 80054f8:	60b9      	str	r1, [r7, #8]
 80054fa:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	32b0      	adds	r2, #176	; 0xb0
 8005506:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800550a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d101      	bne.n	8005516 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005512:	2303      	movs	r3, #3
 8005514:	e008      	b.n	8005528 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	68ba      	ldr	r2, [r7, #8]
 800551a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005526:	2300      	movs	r3, #0
}
 8005528:	4618      	mov	r0, r3
 800552a:	371c      	adds	r7, #28
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr

08005534 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005534:	b480      	push	{r7}
 8005536:	b085      	sub	sp, #20
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	32b0      	adds	r2, #176	; 0xb0
 8005548:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800554c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d101      	bne.n	8005558 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005554:	2303      	movs	r3, #3
 8005556:	e004      	b.n	8005562 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	683a      	ldr	r2, [r7, #0]
 800555c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005560:	2300      	movs	r3, #0
}
 8005562:	4618      	mov	r0, r3
 8005564:	3714      	adds	r7, #20
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr
	...

08005570 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b084      	sub	sp, #16
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	32b0      	adds	r2, #176	; 0xb0
 8005582:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005586:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005588:	2301      	movs	r3, #1
 800558a:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	32b0      	adds	r2, #176	; 0xb0
 8005596:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d101      	bne.n	80055a2 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800559e:	2303      	movs	r3, #3
 80055a0:	e025      	b.n	80055ee <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d11f      	bne.n	80055ec <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	2201      	movs	r2, #1
 80055b0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80055b4:	4b10      	ldr	r3, [pc, #64]	; (80055f8 <USBD_CDC_TransmitPacket+0x88>)
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	f003 020f 	and.w	r2, r3, #15
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	4613      	mov	r3, r2
 80055c6:	009b      	lsls	r3, r3, #2
 80055c8:	4413      	add	r3, r2
 80055ca:	009b      	lsls	r3, r3, #2
 80055cc:	4403      	add	r3, r0
 80055ce:	3318      	adds	r3, #24
 80055d0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80055d2:	4b09      	ldr	r3, [pc, #36]	; (80055f8 <USBD_CDC_TransmitPacket+0x88>)
 80055d4:	7819      	ldrb	r1, [r3, #0]
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f001 ffa9 	bl	800753a <USBD_LL_Transmit>

    ret = USBD_OK;
 80055e8:	2300      	movs	r3, #0
 80055ea:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80055ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3710      	adds	r7, #16
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}
 80055f6:	bf00      	nop
 80055f8:	20000093 	.word	0x20000093

080055fc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b084      	sub	sp, #16
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	32b0      	adds	r2, #176	; 0xb0
 800560e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005612:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	32b0      	adds	r2, #176	; 0xb0
 800561e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d101      	bne.n	800562a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005626:	2303      	movs	r3, #3
 8005628:	e018      	b.n	800565c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	7c1b      	ldrb	r3, [r3, #16]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d10a      	bne.n	8005648 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005632:	4b0c      	ldr	r3, [pc, #48]	; (8005664 <USBD_CDC_ReceivePacket+0x68>)
 8005634:	7819      	ldrb	r1, [r3, #0]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800563c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f001 ff9b 	bl	800757c <USBD_LL_PrepareReceive>
 8005646:	e008      	b.n	800565a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005648:	4b06      	ldr	r3, [pc, #24]	; (8005664 <USBD_CDC_ReceivePacket+0x68>)
 800564a:	7819      	ldrb	r1, [r3, #0]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005652:	2340      	movs	r3, #64	; 0x40
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f001 ff91 	bl	800757c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800565a:	2300      	movs	r3, #0
}
 800565c:	4618      	mov	r0, r3
 800565e:	3710      	adds	r7, #16
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}
 8005664:	20000094 	.word	0x20000094

08005668 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b086      	sub	sp, #24
 800566c:	af00      	add	r7, sp, #0
 800566e:	60f8      	str	r0, [r7, #12]
 8005670:	60b9      	str	r1, [r7, #8]
 8005672:	4613      	mov	r3, r2
 8005674:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d101      	bne.n	8005680 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800567c:	2303      	movs	r3, #3
 800567e:	e01f      	b.n	80056c0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2200      	movs	r2, #0
 8005684:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2200      	movs	r2, #0
 800568c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2200      	movs	r2, #0
 8005694:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d003      	beq.n	80056a6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	68ba      	ldr	r2, [r7, #8]
 80056a2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2201      	movs	r2, #1
 80056aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	79fa      	ldrb	r2, [r7, #7]
 80056b2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80056b4:	68f8      	ldr	r0, [r7, #12]
 80056b6:	f001 fe0b 	bl	80072d0 <USBD_LL_Init>
 80056ba:	4603      	mov	r3, r0
 80056bc:	75fb      	strb	r3, [r7, #23]

  return ret;
 80056be:	7dfb      	ldrb	r3, [r7, #23]
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3718      	adds	r7, #24
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}

080056c8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b084      	sub	sp, #16
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80056d2:	2300      	movs	r3, #0
 80056d4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d101      	bne.n	80056e0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80056dc:	2303      	movs	r3, #3
 80056de:	e025      	b.n	800572c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	683a      	ldr	r2, [r7, #0]
 80056e4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	32ae      	adds	r2, #174	; 0xae
 80056f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d00f      	beq.n	800571c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	32ae      	adds	r2, #174	; 0xae
 8005706:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800570a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800570c:	f107 020e 	add.w	r2, r7, #14
 8005710:	4610      	mov	r0, r2
 8005712:	4798      	blx	r3
 8005714:	4602      	mov	r2, r0
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8005722:	1c5a      	adds	r2, r3, #1
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800572a:	2300      	movs	r3, #0
}
 800572c:	4618      	mov	r0, r3
 800572e:	3710      	adds	r7, #16
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}

08005734 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b082      	sub	sp, #8
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f001 fe13 	bl	8007368 <USBD_LL_Start>
 8005742:	4603      	mov	r3, r0
}
 8005744:	4618      	mov	r0, r3
 8005746:	3708      	adds	r7, #8
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}

0800574c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800574c:	b480      	push	{r7}
 800574e:	b083      	sub	sp, #12
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005754:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005756:	4618      	mov	r0, r3
 8005758:	370c      	adds	r7, #12
 800575a:	46bd      	mov	sp, r7
 800575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005760:	4770      	bx	lr

08005762 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005762:	b580      	push	{r7, lr}
 8005764:	b084      	sub	sp, #16
 8005766:	af00      	add	r7, sp, #0
 8005768:	6078      	str	r0, [r7, #4]
 800576a:	460b      	mov	r3, r1
 800576c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800576e:	2300      	movs	r3, #0
 8005770:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005778:	2b00      	cmp	r3, #0
 800577a:	d009      	beq.n	8005790 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	78fa      	ldrb	r2, [r7, #3]
 8005786:	4611      	mov	r1, r2
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	4798      	blx	r3
 800578c:	4603      	mov	r3, r0
 800578e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005790:	7bfb      	ldrb	r3, [r7, #15]
}
 8005792:	4618      	mov	r0, r3
 8005794:	3710      	adds	r7, #16
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}

0800579a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800579a:	b580      	push	{r7, lr}
 800579c:	b084      	sub	sp, #16
 800579e:	af00      	add	r7, sp, #0
 80057a0:	6078      	str	r0, [r7, #4]
 80057a2:	460b      	mov	r3, r1
 80057a4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80057a6:	2300      	movs	r3, #0
 80057a8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	78fa      	ldrb	r2, [r7, #3]
 80057b4:	4611      	mov	r1, r2
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	4798      	blx	r3
 80057ba:	4603      	mov	r3, r0
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d001      	beq.n	80057c4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80057c0:	2303      	movs	r3, #3
 80057c2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80057c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3710      	adds	r7, #16
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}

080057ce <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80057ce:	b580      	push	{r7, lr}
 80057d0:	b084      	sub	sp, #16
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	6078      	str	r0, [r7, #4]
 80057d6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80057de:	6839      	ldr	r1, [r7, #0]
 80057e0:	4618      	mov	r0, r3
 80057e2:	f001 f908 	bl	80069f6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2201      	movs	r2, #1
 80057ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80057f4:	461a      	mov	r2, r3
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005802:	f003 031f 	and.w	r3, r3, #31
 8005806:	2b02      	cmp	r3, #2
 8005808:	d01a      	beq.n	8005840 <USBD_LL_SetupStage+0x72>
 800580a:	2b02      	cmp	r3, #2
 800580c:	d822      	bhi.n	8005854 <USBD_LL_SetupStage+0x86>
 800580e:	2b00      	cmp	r3, #0
 8005810:	d002      	beq.n	8005818 <USBD_LL_SetupStage+0x4a>
 8005812:	2b01      	cmp	r3, #1
 8005814:	d00a      	beq.n	800582c <USBD_LL_SetupStage+0x5e>
 8005816:	e01d      	b.n	8005854 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800581e:	4619      	mov	r1, r3
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f000 fb5f 	bl	8005ee4 <USBD_StdDevReq>
 8005826:	4603      	mov	r3, r0
 8005828:	73fb      	strb	r3, [r7, #15]
      break;
 800582a:	e020      	b.n	800586e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005832:	4619      	mov	r1, r3
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f000 fbc7 	bl	8005fc8 <USBD_StdItfReq>
 800583a:	4603      	mov	r3, r0
 800583c:	73fb      	strb	r3, [r7, #15]
      break;
 800583e:	e016      	b.n	800586e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005846:	4619      	mov	r1, r3
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f000 fc29 	bl	80060a0 <USBD_StdEPReq>
 800584e:	4603      	mov	r3, r0
 8005850:	73fb      	strb	r3, [r7, #15]
      break;
 8005852:	e00c      	b.n	800586e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800585a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800585e:	b2db      	uxtb	r3, r3
 8005860:	4619      	mov	r1, r3
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f001 fde0 	bl	8007428 <USBD_LL_StallEP>
 8005868:	4603      	mov	r3, r0
 800586a:	73fb      	strb	r3, [r7, #15]
      break;
 800586c:	bf00      	nop
  }

  return ret;
 800586e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005870:	4618      	mov	r0, r3
 8005872:	3710      	adds	r7, #16
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}

08005878 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b086      	sub	sp, #24
 800587c:	af00      	add	r7, sp, #0
 800587e:	60f8      	str	r0, [r7, #12]
 8005880:	460b      	mov	r3, r1
 8005882:	607a      	str	r2, [r7, #4]
 8005884:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005886:	2300      	movs	r3, #0
 8005888:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800588a:	7afb      	ldrb	r3, [r7, #11]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d16e      	bne.n	800596e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005896:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800589e:	2b03      	cmp	r3, #3
 80058a0:	f040 8098 	bne.w	80059d4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	689a      	ldr	r2, [r3, #8]
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	68db      	ldr	r3, [r3, #12]
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d913      	bls.n	80058d8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	689a      	ldr	r2, [r3, #8]
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	68db      	ldr	r3, [r3, #12]
 80058b8:	1ad2      	subs	r2, r2, r3
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	68da      	ldr	r2, [r3, #12]
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	4293      	cmp	r3, r2
 80058c8:	bf28      	it	cs
 80058ca:	4613      	movcs	r3, r2
 80058cc:	461a      	mov	r2, r3
 80058ce:	6879      	ldr	r1, [r7, #4]
 80058d0:	68f8      	ldr	r0, [r7, #12]
 80058d2:	f001 f984 	bl	8006bde <USBD_CtlContinueRx>
 80058d6:	e07d      	b.n	80059d4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80058de:	f003 031f 	and.w	r3, r3, #31
 80058e2:	2b02      	cmp	r3, #2
 80058e4:	d014      	beq.n	8005910 <USBD_LL_DataOutStage+0x98>
 80058e6:	2b02      	cmp	r3, #2
 80058e8:	d81d      	bhi.n	8005926 <USBD_LL_DataOutStage+0xae>
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d002      	beq.n	80058f4 <USBD_LL_DataOutStage+0x7c>
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d003      	beq.n	80058fa <USBD_LL_DataOutStage+0x82>
 80058f2:	e018      	b.n	8005926 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80058f4:	2300      	movs	r3, #0
 80058f6:	75bb      	strb	r3, [r7, #22]
            break;
 80058f8:	e018      	b.n	800592c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005900:	b2db      	uxtb	r3, r3
 8005902:	4619      	mov	r1, r3
 8005904:	68f8      	ldr	r0, [r7, #12]
 8005906:	f000 fa5e 	bl	8005dc6 <USBD_CoreFindIF>
 800590a:	4603      	mov	r3, r0
 800590c:	75bb      	strb	r3, [r7, #22]
            break;
 800590e:	e00d      	b.n	800592c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005916:	b2db      	uxtb	r3, r3
 8005918:	4619      	mov	r1, r3
 800591a:	68f8      	ldr	r0, [r7, #12]
 800591c:	f000 fa60 	bl	8005de0 <USBD_CoreFindEP>
 8005920:	4603      	mov	r3, r0
 8005922:	75bb      	strb	r3, [r7, #22]
            break;
 8005924:	e002      	b.n	800592c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005926:	2300      	movs	r3, #0
 8005928:	75bb      	strb	r3, [r7, #22]
            break;
 800592a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800592c:	7dbb      	ldrb	r3, [r7, #22]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d119      	bne.n	8005966 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005938:	b2db      	uxtb	r3, r3
 800593a:	2b03      	cmp	r3, #3
 800593c:	d113      	bne.n	8005966 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800593e:	7dba      	ldrb	r2, [r7, #22]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	32ae      	adds	r2, #174	; 0xae
 8005944:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005948:	691b      	ldr	r3, [r3, #16]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d00b      	beq.n	8005966 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800594e:	7dba      	ldrb	r2, [r7, #22]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005956:	7dba      	ldrb	r2, [r7, #22]
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	32ae      	adds	r2, #174	; 0xae
 800595c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005960:	691b      	ldr	r3, [r3, #16]
 8005962:	68f8      	ldr	r0, [r7, #12]
 8005964:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005966:	68f8      	ldr	r0, [r7, #12]
 8005968:	f001 f94a 	bl	8006c00 <USBD_CtlSendStatus>
 800596c:	e032      	b.n	80059d4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800596e:	7afb      	ldrb	r3, [r7, #11]
 8005970:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005974:	b2db      	uxtb	r3, r3
 8005976:	4619      	mov	r1, r3
 8005978:	68f8      	ldr	r0, [r7, #12]
 800597a:	f000 fa31 	bl	8005de0 <USBD_CoreFindEP>
 800597e:	4603      	mov	r3, r0
 8005980:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005982:	7dbb      	ldrb	r3, [r7, #22]
 8005984:	2bff      	cmp	r3, #255	; 0xff
 8005986:	d025      	beq.n	80059d4 <USBD_LL_DataOutStage+0x15c>
 8005988:	7dbb      	ldrb	r3, [r7, #22]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d122      	bne.n	80059d4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005994:	b2db      	uxtb	r3, r3
 8005996:	2b03      	cmp	r3, #3
 8005998:	d117      	bne.n	80059ca <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800599a:	7dba      	ldrb	r2, [r7, #22]
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	32ae      	adds	r2, #174	; 0xae
 80059a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059a4:	699b      	ldr	r3, [r3, #24]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d00f      	beq.n	80059ca <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80059aa:	7dba      	ldrb	r2, [r7, #22]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80059b2:	7dba      	ldrb	r2, [r7, #22]
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	32ae      	adds	r2, #174	; 0xae
 80059b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059bc:	699b      	ldr	r3, [r3, #24]
 80059be:	7afa      	ldrb	r2, [r7, #11]
 80059c0:	4611      	mov	r1, r2
 80059c2:	68f8      	ldr	r0, [r7, #12]
 80059c4:	4798      	blx	r3
 80059c6:	4603      	mov	r3, r0
 80059c8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80059ca:	7dfb      	ldrb	r3, [r7, #23]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d001      	beq.n	80059d4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80059d0:	7dfb      	ldrb	r3, [r7, #23]
 80059d2:	e000      	b.n	80059d6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80059d4:	2300      	movs	r3, #0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3718      	adds	r7, #24
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}

080059de <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80059de:	b580      	push	{r7, lr}
 80059e0:	b086      	sub	sp, #24
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	60f8      	str	r0, [r7, #12]
 80059e6:	460b      	mov	r3, r1
 80059e8:	607a      	str	r2, [r7, #4]
 80059ea:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80059ec:	7afb      	ldrb	r3, [r7, #11]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d16f      	bne.n	8005ad2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	3314      	adds	r3, #20
 80059f6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80059fe:	2b02      	cmp	r3, #2
 8005a00:	d15a      	bne.n	8005ab8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	689a      	ldr	r2, [r3, #8]
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	68db      	ldr	r3, [r3, #12]
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d914      	bls.n	8005a38 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	689a      	ldr	r2, [r3, #8]
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	68db      	ldr	r3, [r3, #12]
 8005a16:	1ad2      	subs	r2, r2, r3
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	461a      	mov	r2, r3
 8005a22:	6879      	ldr	r1, [r7, #4]
 8005a24:	68f8      	ldr	r0, [r7, #12]
 8005a26:	f001 f8ac 	bl	8006b82 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	2100      	movs	r1, #0
 8005a30:	68f8      	ldr	r0, [r7, #12]
 8005a32:	f001 fda3 	bl	800757c <USBD_LL_PrepareReceive>
 8005a36:	e03f      	b.n	8005ab8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	68da      	ldr	r2, [r3, #12]
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	429a      	cmp	r2, r3
 8005a42:	d11c      	bne.n	8005a7e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	685a      	ldr	r2, [r3, #4]
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d316      	bcc.n	8005a7e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	685a      	ldr	r2, [r3, #4]
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d20f      	bcs.n	8005a7e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005a5e:	2200      	movs	r2, #0
 8005a60:	2100      	movs	r1, #0
 8005a62:	68f8      	ldr	r0, [r7, #12]
 8005a64:	f001 f88d 	bl	8006b82 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005a70:	2300      	movs	r3, #0
 8005a72:	2200      	movs	r2, #0
 8005a74:	2100      	movs	r1, #0
 8005a76:	68f8      	ldr	r0, [r7, #12]
 8005a78:	f001 fd80 	bl	800757c <USBD_LL_PrepareReceive>
 8005a7c:	e01c      	b.n	8005ab8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	2b03      	cmp	r3, #3
 8005a88:	d10f      	bne.n	8005aaa <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a90:	68db      	ldr	r3, [r3, #12]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d009      	beq.n	8005aaa <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	68f8      	ldr	r0, [r7, #12]
 8005aa8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005aaa:	2180      	movs	r1, #128	; 0x80
 8005aac:	68f8      	ldr	r0, [r7, #12]
 8005aae:	f001 fcbb 	bl	8007428 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005ab2:	68f8      	ldr	r0, [r7, #12]
 8005ab4:	f001 f8b7 	bl	8006c26 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d03a      	beq.n	8005b38 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005ac2:	68f8      	ldr	r0, [r7, #12]
 8005ac4:	f7ff fe42 	bl	800574c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2200      	movs	r2, #0
 8005acc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005ad0:	e032      	b.n	8005b38 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005ad2:	7afb      	ldrb	r3, [r7, #11]
 8005ad4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005ad8:	b2db      	uxtb	r3, r3
 8005ada:	4619      	mov	r1, r3
 8005adc:	68f8      	ldr	r0, [r7, #12]
 8005ade:	f000 f97f 	bl	8005de0 <USBD_CoreFindEP>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005ae6:	7dfb      	ldrb	r3, [r7, #23]
 8005ae8:	2bff      	cmp	r3, #255	; 0xff
 8005aea:	d025      	beq.n	8005b38 <USBD_LL_DataInStage+0x15a>
 8005aec:	7dfb      	ldrb	r3, [r7, #23]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d122      	bne.n	8005b38 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	2b03      	cmp	r3, #3
 8005afc:	d11c      	bne.n	8005b38 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005afe:	7dfa      	ldrb	r2, [r7, #23]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	32ae      	adds	r2, #174	; 0xae
 8005b04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b08:	695b      	ldr	r3, [r3, #20]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d014      	beq.n	8005b38 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005b0e:	7dfa      	ldrb	r2, [r7, #23]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005b16:	7dfa      	ldrb	r2, [r7, #23]
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	32ae      	adds	r2, #174	; 0xae
 8005b1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b20:	695b      	ldr	r3, [r3, #20]
 8005b22:	7afa      	ldrb	r2, [r7, #11]
 8005b24:	4611      	mov	r1, r2
 8005b26:	68f8      	ldr	r0, [r7, #12]
 8005b28:	4798      	blx	r3
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005b2e:	7dbb      	ldrb	r3, [r7, #22]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d001      	beq.n	8005b38 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005b34:	7dbb      	ldrb	r3, [r7, #22]
 8005b36:	e000      	b.n	8005b3a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005b38:	2300      	movs	r3, #0
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3718      	adds	r7, #24
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}

08005b42 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005b42:	b580      	push	{r7, lr}
 8005b44:	b084      	sub	sp, #16
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2201      	movs	r2, #1
 8005b52:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2200      	movs	r2, #0
 8005b62:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2200      	movs	r2, #0
 8005b68:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d014      	beq.n	8005ba8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d00e      	beq.n	8005ba8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	687a      	ldr	r2, [r7, #4]
 8005b94:	6852      	ldr	r2, [r2, #4]
 8005b96:	b2d2      	uxtb	r2, r2
 8005b98:	4611      	mov	r1, r2
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	4798      	blx	r3
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d001      	beq.n	8005ba8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005ba4:	2303      	movs	r3, #3
 8005ba6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005ba8:	2340      	movs	r3, #64	; 0x40
 8005baa:	2200      	movs	r2, #0
 8005bac:	2100      	movs	r1, #0
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f001 fbf5 	bl	800739e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2240      	movs	r2, #64	; 0x40
 8005bc0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005bc4:	2340      	movs	r3, #64	; 0x40
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	2180      	movs	r1, #128	; 0x80
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f001 fbe7 	bl	800739e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2240      	movs	r2, #64	; 0x40
 8005bda:	621a      	str	r2, [r3, #32]

  return ret;
 8005bdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3710      	adds	r7, #16
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}

08005be6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005be6:	b480      	push	{r7}
 8005be8:	b083      	sub	sp, #12
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	6078      	str	r0, [r7, #4]
 8005bee:	460b      	mov	r3, r1
 8005bf0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	78fa      	ldrb	r2, [r7, #3]
 8005bf6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005bf8:	2300      	movs	r3, #0
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	370c      	adds	r7, #12
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr

08005c06 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005c06:	b480      	push	{r7}
 8005c08:	b083      	sub	sp, #12
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c14:	b2da      	uxtb	r2, r3
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2204      	movs	r2, #4
 8005c20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005c24:	2300      	movs	r3, #0
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	370c      	adds	r7, #12
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c30:	4770      	bx	lr

08005c32 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005c32:	b480      	push	{r7}
 8005c34:	b083      	sub	sp, #12
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	2b04      	cmp	r3, #4
 8005c44:	d106      	bne.n	8005c54 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005c4c:	b2da      	uxtb	r2, r3
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005c54:	2300      	movs	r3, #0
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	370c      	adds	r7, #12
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr

08005c62 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005c62:	b580      	push	{r7, lr}
 8005c64:	b082      	sub	sp, #8
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	2b03      	cmp	r3, #3
 8005c74:	d110      	bne.n	8005c98 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d00b      	beq.n	8005c98 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c86:	69db      	ldr	r3, [r3, #28]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d005      	beq.n	8005c98 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c92:	69db      	ldr	r3, [r3, #28]
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005c98:	2300      	movs	r3, #0
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3708      	adds	r7, #8
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}

08005ca2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005ca2:	b580      	push	{r7, lr}
 8005ca4:	b082      	sub	sp, #8
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	6078      	str	r0, [r7, #4]
 8005caa:	460b      	mov	r3, r1
 8005cac:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	32ae      	adds	r2, #174	; 0xae
 8005cb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d101      	bne.n	8005cc4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005cc0:	2303      	movs	r3, #3
 8005cc2:	e01c      	b.n	8005cfe <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	2b03      	cmp	r3, #3
 8005cce:	d115      	bne.n	8005cfc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	32ae      	adds	r2, #174	; 0xae
 8005cda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cde:	6a1b      	ldr	r3, [r3, #32]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d00b      	beq.n	8005cfc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	32ae      	adds	r2, #174	; 0xae
 8005cee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cf2:	6a1b      	ldr	r3, [r3, #32]
 8005cf4:	78fa      	ldrb	r2, [r7, #3]
 8005cf6:	4611      	mov	r1, r2
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005cfc:	2300      	movs	r3, #0
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3708      	adds	r7, #8
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}

08005d06 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005d06:	b580      	push	{r7, lr}
 8005d08:	b082      	sub	sp, #8
 8005d0a:	af00      	add	r7, sp, #0
 8005d0c:	6078      	str	r0, [r7, #4]
 8005d0e:	460b      	mov	r3, r1
 8005d10:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	32ae      	adds	r2, #174	; 0xae
 8005d1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d101      	bne.n	8005d28 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005d24:	2303      	movs	r3, #3
 8005d26:	e01c      	b.n	8005d62 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d2e:	b2db      	uxtb	r3, r3
 8005d30:	2b03      	cmp	r3, #3
 8005d32:	d115      	bne.n	8005d60 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	32ae      	adds	r2, #174	; 0xae
 8005d3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d00b      	beq.n	8005d60 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	32ae      	adds	r2, #174	; 0xae
 8005d52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d58:	78fa      	ldrb	r2, [r7, #3]
 8005d5a:	4611      	mov	r1, r2
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005d60:	2300      	movs	r3, #0
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3708      	adds	r7, #8
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}

08005d6a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005d6a:	b480      	push	{r7}
 8005d6c:	b083      	sub	sp, #12
 8005d6e:	af00      	add	r7, sp, #0
 8005d70:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005d72:	2300      	movs	r3, #0
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	370c      	adds	r7, #12
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7e:	4770      	bx	lr

08005d80 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b084      	sub	sp, #16
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d00e      	beq.n	8005dbc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	687a      	ldr	r2, [r7, #4]
 8005da8:	6852      	ldr	r2, [r2, #4]
 8005daa:	b2d2      	uxtb	r2, r2
 8005dac:	4611      	mov	r1, r2
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	4798      	blx	r3
 8005db2:	4603      	mov	r3, r0
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d001      	beq.n	8005dbc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005db8:	2303      	movs	r3, #3
 8005dba:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3710      	adds	r7, #16
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}

08005dc6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005dc6:	b480      	push	{r7}
 8005dc8:	b083      	sub	sp, #12
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	6078      	str	r0, [r7, #4]
 8005dce:	460b      	mov	r3, r1
 8005dd0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005dd2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	370c      	adds	r7, #12
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr

08005de0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b083      	sub	sp, #12
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
 8005de8:	460b      	mov	r3, r1
 8005dea:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005dec:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	370c      	adds	r7, #12
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr

08005dfa <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005dfa:	b580      	push	{r7, lr}
 8005dfc:	b086      	sub	sp, #24
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	6078      	str	r0, [r7, #4]
 8005e02:	460b      	mov	r3, r1
 8005e04:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	885b      	ldrh	r3, [r3, #2]
 8005e16:	b29a      	uxth	r2, r3
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	781b      	ldrb	r3, [r3, #0]
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	429a      	cmp	r2, r3
 8005e20:	d920      	bls.n	8005e64 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	b29b      	uxth	r3, r3
 8005e28:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005e2a:	e013      	b.n	8005e54 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005e2c:	f107 030a 	add.w	r3, r7, #10
 8005e30:	4619      	mov	r1, r3
 8005e32:	6978      	ldr	r0, [r7, #20]
 8005e34:	f000 f81b 	bl	8005e6e <USBD_GetNextDesc>
 8005e38:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	785b      	ldrb	r3, [r3, #1]
 8005e3e:	2b05      	cmp	r3, #5
 8005e40:	d108      	bne.n	8005e54 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	789b      	ldrb	r3, [r3, #2]
 8005e4a:	78fa      	ldrb	r2, [r7, #3]
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d008      	beq.n	8005e62 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005e50:	2300      	movs	r3, #0
 8005e52:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	885b      	ldrh	r3, [r3, #2]
 8005e58:	b29a      	uxth	r2, r3
 8005e5a:	897b      	ldrh	r3, [r7, #10]
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	d8e5      	bhi.n	8005e2c <USBD_GetEpDesc+0x32>
 8005e60:	e000      	b.n	8005e64 <USBD_GetEpDesc+0x6a>
          break;
 8005e62:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005e64:	693b      	ldr	r3, [r7, #16]
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3718      	adds	r7, #24
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}

08005e6e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8005e6e:	b480      	push	{r7}
 8005e70:	b085      	sub	sp, #20
 8005e72:	af00      	add	r7, sp, #0
 8005e74:	6078      	str	r0, [r7, #4]
 8005e76:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	881a      	ldrh	r2, [r3, #0]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	781b      	ldrb	r3, [r3, #0]
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	4413      	add	r3, r2
 8005e88:	b29a      	uxth	r2, r3
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	781b      	ldrb	r3, [r3, #0]
 8005e92:	461a      	mov	r2, r3
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	4413      	add	r3, r2
 8005e98:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3714      	adds	r7, #20
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr

08005ea8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b087      	sub	sp, #28
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	781b      	ldrb	r3, [r3, #0]
 8005eb8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	3301      	adds	r3, #1
 8005ebe:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	781b      	ldrb	r3, [r3, #0]
 8005ec4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005ec6:	8a3b      	ldrh	r3, [r7, #16]
 8005ec8:	021b      	lsls	r3, r3, #8
 8005eca:	b21a      	sxth	r2, r3
 8005ecc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	b21b      	sxth	r3, r3
 8005ed4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005ed6:	89fb      	ldrh	r3, [r7, #14]
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	371c      	adds	r7, #28
 8005edc:	46bd      	mov	sp, r7
 8005ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee2:	4770      	bx	lr

08005ee4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b084      	sub	sp, #16
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005efa:	2b40      	cmp	r3, #64	; 0x40
 8005efc:	d005      	beq.n	8005f0a <USBD_StdDevReq+0x26>
 8005efe:	2b40      	cmp	r3, #64	; 0x40
 8005f00:	d857      	bhi.n	8005fb2 <USBD_StdDevReq+0xce>
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d00f      	beq.n	8005f26 <USBD_StdDevReq+0x42>
 8005f06:	2b20      	cmp	r3, #32
 8005f08:	d153      	bne.n	8005fb2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	32ae      	adds	r2, #174	; 0xae
 8005f14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	6839      	ldr	r1, [r7, #0]
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	4798      	blx	r3
 8005f20:	4603      	mov	r3, r0
 8005f22:	73fb      	strb	r3, [r7, #15]
      break;
 8005f24:	e04a      	b.n	8005fbc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	785b      	ldrb	r3, [r3, #1]
 8005f2a:	2b09      	cmp	r3, #9
 8005f2c:	d83b      	bhi.n	8005fa6 <USBD_StdDevReq+0xc2>
 8005f2e:	a201      	add	r2, pc, #4	; (adr r2, 8005f34 <USBD_StdDevReq+0x50>)
 8005f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f34:	08005f89 	.word	0x08005f89
 8005f38:	08005f9d 	.word	0x08005f9d
 8005f3c:	08005fa7 	.word	0x08005fa7
 8005f40:	08005f93 	.word	0x08005f93
 8005f44:	08005fa7 	.word	0x08005fa7
 8005f48:	08005f67 	.word	0x08005f67
 8005f4c:	08005f5d 	.word	0x08005f5d
 8005f50:	08005fa7 	.word	0x08005fa7
 8005f54:	08005f7f 	.word	0x08005f7f
 8005f58:	08005f71 	.word	0x08005f71
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005f5c:	6839      	ldr	r1, [r7, #0]
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f000 fa3c 	bl	80063dc <USBD_GetDescriptor>
          break;
 8005f64:	e024      	b.n	8005fb0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005f66:	6839      	ldr	r1, [r7, #0]
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f000 fba1 	bl	80066b0 <USBD_SetAddress>
          break;
 8005f6e:	e01f      	b.n	8005fb0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005f70:	6839      	ldr	r1, [r7, #0]
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f000 fbe0 	bl	8006738 <USBD_SetConfig>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	73fb      	strb	r3, [r7, #15]
          break;
 8005f7c:	e018      	b.n	8005fb0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005f7e:	6839      	ldr	r1, [r7, #0]
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f000 fc83 	bl	800688c <USBD_GetConfig>
          break;
 8005f86:	e013      	b.n	8005fb0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005f88:	6839      	ldr	r1, [r7, #0]
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f000 fcb4 	bl	80068f8 <USBD_GetStatus>
          break;
 8005f90:	e00e      	b.n	8005fb0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005f92:	6839      	ldr	r1, [r7, #0]
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f000 fce3 	bl	8006960 <USBD_SetFeature>
          break;
 8005f9a:	e009      	b.n	8005fb0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005f9c:	6839      	ldr	r1, [r7, #0]
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f000 fd07 	bl	80069b2 <USBD_ClrFeature>
          break;
 8005fa4:	e004      	b.n	8005fb0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8005fa6:	6839      	ldr	r1, [r7, #0]
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f000 fd5e 	bl	8006a6a <USBD_CtlError>
          break;
 8005fae:	bf00      	nop
      }
      break;
 8005fb0:	e004      	b.n	8005fbc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8005fb2:	6839      	ldr	r1, [r7, #0]
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f000 fd58 	bl	8006a6a <USBD_CtlError>
      break;
 8005fba:	bf00      	nop
  }

  return ret;
 8005fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3710      	adds	r7, #16
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}
 8005fc6:	bf00      	nop

08005fc8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b084      	sub	sp, #16
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
 8005fd0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005fde:	2b40      	cmp	r3, #64	; 0x40
 8005fe0:	d005      	beq.n	8005fee <USBD_StdItfReq+0x26>
 8005fe2:	2b40      	cmp	r3, #64	; 0x40
 8005fe4:	d852      	bhi.n	800608c <USBD_StdItfReq+0xc4>
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d001      	beq.n	8005fee <USBD_StdItfReq+0x26>
 8005fea:	2b20      	cmp	r3, #32
 8005fec:	d14e      	bne.n	800608c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ff4:	b2db      	uxtb	r3, r3
 8005ff6:	3b01      	subs	r3, #1
 8005ff8:	2b02      	cmp	r3, #2
 8005ffa:	d840      	bhi.n	800607e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	889b      	ldrh	r3, [r3, #4]
 8006000:	b2db      	uxtb	r3, r3
 8006002:	2b01      	cmp	r3, #1
 8006004:	d836      	bhi.n	8006074 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	889b      	ldrh	r3, [r3, #4]
 800600a:	b2db      	uxtb	r3, r3
 800600c:	4619      	mov	r1, r3
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f7ff fed9 	bl	8005dc6 <USBD_CoreFindIF>
 8006014:	4603      	mov	r3, r0
 8006016:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006018:	7bbb      	ldrb	r3, [r7, #14]
 800601a:	2bff      	cmp	r3, #255	; 0xff
 800601c:	d01d      	beq.n	800605a <USBD_StdItfReq+0x92>
 800601e:	7bbb      	ldrb	r3, [r7, #14]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d11a      	bne.n	800605a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006024:	7bba      	ldrb	r2, [r7, #14]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	32ae      	adds	r2, #174	; 0xae
 800602a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d00f      	beq.n	8006054 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006034:	7bba      	ldrb	r2, [r7, #14]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800603c:	7bba      	ldrb	r2, [r7, #14]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	32ae      	adds	r2, #174	; 0xae
 8006042:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	6839      	ldr	r1, [r7, #0]
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	4798      	blx	r3
 800604e:	4603      	mov	r3, r0
 8006050:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006052:	e004      	b.n	800605e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006054:	2303      	movs	r3, #3
 8006056:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006058:	e001      	b.n	800605e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800605a:	2303      	movs	r3, #3
 800605c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	88db      	ldrh	r3, [r3, #6]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d110      	bne.n	8006088 <USBD_StdItfReq+0xc0>
 8006066:	7bfb      	ldrb	r3, [r7, #15]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d10d      	bne.n	8006088 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f000 fdc7 	bl	8006c00 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006072:	e009      	b.n	8006088 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006074:	6839      	ldr	r1, [r7, #0]
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f000 fcf7 	bl	8006a6a <USBD_CtlError>
          break;
 800607c:	e004      	b.n	8006088 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800607e:	6839      	ldr	r1, [r7, #0]
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f000 fcf2 	bl	8006a6a <USBD_CtlError>
          break;
 8006086:	e000      	b.n	800608a <USBD_StdItfReq+0xc2>
          break;
 8006088:	bf00      	nop
      }
      break;
 800608a:	e004      	b.n	8006096 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800608c:	6839      	ldr	r1, [r7, #0]
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f000 fceb 	bl	8006a6a <USBD_CtlError>
      break;
 8006094:	bf00      	nop
  }

  return ret;
 8006096:	7bfb      	ldrb	r3, [r7, #15]
}
 8006098:	4618      	mov	r0, r3
 800609a:	3710      	adds	r7, #16
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}

080060a0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b084      	sub	sp, #16
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80060aa:	2300      	movs	r3, #0
 80060ac:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	889b      	ldrh	r3, [r3, #4]
 80060b2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	781b      	ldrb	r3, [r3, #0]
 80060b8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80060bc:	2b40      	cmp	r3, #64	; 0x40
 80060be:	d007      	beq.n	80060d0 <USBD_StdEPReq+0x30>
 80060c0:	2b40      	cmp	r3, #64	; 0x40
 80060c2:	f200 817f 	bhi.w	80063c4 <USBD_StdEPReq+0x324>
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d02a      	beq.n	8006120 <USBD_StdEPReq+0x80>
 80060ca:	2b20      	cmp	r3, #32
 80060cc:	f040 817a 	bne.w	80063c4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80060d0:	7bbb      	ldrb	r3, [r7, #14]
 80060d2:	4619      	mov	r1, r3
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f7ff fe83 	bl	8005de0 <USBD_CoreFindEP>
 80060da:	4603      	mov	r3, r0
 80060dc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80060de:	7b7b      	ldrb	r3, [r7, #13]
 80060e0:	2bff      	cmp	r3, #255	; 0xff
 80060e2:	f000 8174 	beq.w	80063ce <USBD_StdEPReq+0x32e>
 80060e6:	7b7b      	ldrb	r3, [r7, #13]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	f040 8170 	bne.w	80063ce <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80060ee:	7b7a      	ldrb	r2, [r7, #13]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80060f6:	7b7a      	ldrb	r2, [r7, #13]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	32ae      	adds	r2, #174	; 0xae
 80060fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	2b00      	cmp	r3, #0
 8006104:	f000 8163 	beq.w	80063ce <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006108:	7b7a      	ldrb	r2, [r7, #13]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	32ae      	adds	r2, #174	; 0xae
 800610e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006112:	689b      	ldr	r3, [r3, #8]
 8006114:	6839      	ldr	r1, [r7, #0]
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	4798      	blx	r3
 800611a:	4603      	mov	r3, r0
 800611c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800611e:	e156      	b.n	80063ce <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	785b      	ldrb	r3, [r3, #1]
 8006124:	2b03      	cmp	r3, #3
 8006126:	d008      	beq.n	800613a <USBD_StdEPReq+0x9a>
 8006128:	2b03      	cmp	r3, #3
 800612a:	f300 8145 	bgt.w	80063b8 <USBD_StdEPReq+0x318>
 800612e:	2b00      	cmp	r3, #0
 8006130:	f000 809b 	beq.w	800626a <USBD_StdEPReq+0x1ca>
 8006134:	2b01      	cmp	r3, #1
 8006136:	d03c      	beq.n	80061b2 <USBD_StdEPReq+0x112>
 8006138:	e13e      	b.n	80063b8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006140:	b2db      	uxtb	r3, r3
 8006142:	2b02      	cmp	r3, #2
 8006144:	d002      	beq.n	800614c <USBD_StdEPReq+0xac>
 8006146:	2b03      	cmp	r3, #3
 8006148:	d016      	beq.n	8006178 <USBD_StdEPReq+0xd8>
 800614a:	e02c      	b.n	80061a6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800614c:	7bbb      	ldrb	r3, [r7, #14]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d00d      	beq.n	800616e <USBD_StdEPReq+0xce>
 8006152:	7bbb      	ldrb	r3, [r7, #14]
 8006154:	2b80      	cmp	r3, #128	; 0x80
 8006156:	d00a      	beq.n	800616e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006158:	7bbb      	ldrb	r3, [r7, #14]
 800615a:	4619      	mov	r1, r3
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f001 f963 	bl	8007428 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006162:	2180      	movs	r1, #128	; 0x80
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f001 f95f 	bl	8007428 <USBD_LL_StallEP>
 800616a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800616c:	e020      	b.n	80061b0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800616e:	6839      	ldr	r1, [r7, #0]
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f000 fc7a 	bl	8006a6a <USBD_CtlError>
              break;
 8006176:	e01b      	b.n	80061b0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	885b      	ldrh	r3, [r3, #2]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d10e      	bne.n	800619e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006180:	7bbb      	ldrb	r3, [r7, #14]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d00b      	beq.n	800619e <USBD_StdEPReq+0xfe>
 8006186:	7bbb      	ldrb	r3, [r7, #14]
 8006188:	2b80      	cmp	r3, #128	; 0x80
 800618a:	d008      	beq.n	800619e <USBD_StdEPReq+0xfe>
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	88db      	ldrh	r3, [r3, #6]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d104      	bne.n	800619e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006194:	7bbb      	ldrb	r3, [r7, #14]
 8006196:	4619      	mov	r1, r3
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f001 f945 	bl	8007428 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f000 fd2e 	bl	8006c00 <USBD_CtlSendStatus>

              break;
 80061a4:	e004      	b.n	80061b0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80061a6:	6839      	ldr	r1, [r7, #0]
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f000 fc5e 	bl	8006a6a <USBD_CtlError>
              break;
 80061ae:	bf00      	nop
          }
          break;
 80061b0:	e107      	b.n	80063c2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	2b02      	cmp	r3, #2
 80061bc:	d002      	beq.n	80061c4 <USBD_StdEPReq+0x124>
 80061be:	2b03      	cmp	r3, #3
 80061c0:	d016      	beq.n	80061f0 <USBD_StdEPReq+0x150>
 80061c2:	e04b      	b.n	800625c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80061c4:	7bbb      	ldrb	r3, [r7, #14]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d00d      	beq.n	80061e6 <USBD_StdEPReq+0x146>
 80061ca:	7bbb      	ldrb	r3, [r7, #14]
 80061cc:	2b80      	cmp	r3, #128	; 0x80
 80061ce:	d00a      	beq.n	80061e6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80061d0:	7bbb      	ldrb	r3, [r7, #14]
 80061d2:	4619      	mov	r1, r3
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f001 f927 	bl	8007428 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80061da:	2180      	movs	r1, #128	; 0x80
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f001 f923 	bl	8007428 <USBD_LL_StallEP>
 80061e2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80061e4:	e040      	b.n	8006268 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80061e6:	6839      	ldr	r1, [r7, #0]
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f000 fc3e 	bl	8006a6a <USBD_CtlError>
              break;
 80061ee:	e03b      	b.n	8006268 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	885b      	ldrh	r3, [r3, #2]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d136      	bne.n	8006266 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80061f8:	7bbb      	ldrb	r3, [r7, #14]
 80061fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d004      	beq.n	800620c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006202:	7bbb      	ldrb	r3, [r7, #14]
 8006204:	4619      	mov	r1, r3
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f001 f92d 	bl	8007466 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f000 fcf7 	bl	8006c00 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006212:	7bbb      	ldrb	r3, [r7, #14]
 8006214:	4619      	mov	r1, r3
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f7ff fde2 	bl	8005de0 <USBD_CoreFindEP>
 800621c:	4603      	mov	r3, r0
 800621e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006220:	7b7b      	ldrb	r3, [r7, #13]
 8006222:	2bff      	cmp	r3, #255	; 0xff
 8006224:	d01f      	beq.n	8006266 <USBD_StdEPReq+0x1c6>
 8006226:	7b7b      	ldrb	r3, [r7, #13]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d11c      	bne.n	8006266 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800622c:	7b7a      	ldrb	r2, [r7, #13]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006234:	7b7a      	ldrb	r2, [r7, #13]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	32ae      	adds	r2, #174	; 0xae
 800623a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d010      	beq.n	8006266 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006244:	7b7a      	ldrb	r2, [r7, #13]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	32ae      	adds	r2, #174	; 0xae
 800624a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	6839      	ldr	r1, [r7, #0]
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	4798      	blx	r3
 8006256:	4603      	mov	r3, r0
 8006258:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800625a:	e004      	b.n	8006266 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800625c:	6839      	ldr	r1, [r7, #0]
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f000 fc03 	bl	8006a6a <USBD_CtlError>
              break;
 8006264:	e000      	b.n	8006268 <USBD_StdEPReq+0x1c8>
              break;
 8006266:	bf00      	nop
          }
          break;
 8006268:	e0ab      	b.n	80063c2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006270:	b2db      	uxtb	r3, r3
 8006272:	2b02      	cmp	r3, #2
 8006274:	d002      	beq.n	800627c <USBD_StdEPReq+0x1dc>
 8006276:	2b03      	cmp	r3, #3
 8006278:	d032      	beq.n	80062e0 <USBD_StdEPReq+0x240>
 800627a:	e097      	b.n	80063ac <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800627c:	7bbb      	ldrb	r3, [r7, #14]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d007      	beq.n	8006292 <USBD_StdEPReq+0x1f2>
 8006282:	7bbb      	ldrb	r3, [r7, #14]
 8006284:	2b80      	cmp	r3, #128	; 0x80
 8006286:	d004      	beq.n	8006292 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006288:	6839      	ldr	r1, [r7, #0]
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f000 fbed 	bl	8006a6a <USBD_CtlError>
                break;
 8006290:	e091      	b.n	80063b6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006292:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006296:	2b00      	cmp	r3, #0
 8006298:	da0b      	bge.n	80062b2 <USBD_StdEPReq+0x212>
 800629a:	7bbb      	ldrb	r3, [r7, #14]
 800629c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80062a0:	4613      	mov	r3, r2
 80062a2:	009b      	lsls	r3, r3, #2
 80062a4:	4413      	add	r3, r2
 80062a6:	009b      	lsls	r3, r3, #2
 80062a8:	3310      	adds	r3, #16
 80062aa:	687a      	ldr	r2, [r7, #4]
 80062ac:	4413      	add	r3, r2
 80062ae:	3304      	adds	r3, #4
 80062b0:	e00b      	b.n	80062ca <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80062b2:	7bbb      	ldrb	r3, [r7, #14]
 80062b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80062b8:	4613      	mov	r3, r2
 80062ba:	009b      	lsls	r3, r3, #2
 80062bc:	4413      	add	r3, r2
 80062be:	009b      	lsls	r3, r3, #2
 80062c0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80062c4:	687a      	ldr	r2, [r7, #4]
 80062c6:	4413      	add	r3, r2
 80062c8:	3304      	adds	r3, #4
 80062ca:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	2200      	movs	r2, #0
 80062d0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	2202      	movs	r2, #2
 80062d6:	4619      	mov	r1, r3
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f000 fc37 	bl	8006b4c <USBD_CtlSendData>
              break;
 80062de:	e06a      	b.n	80063b6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80062e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	da11      	bge.n	800630c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80062e8:	7bbb      	ldrb	r3, [r7, #14]
 80062ea:	f003 020f 	and.w	r2, r3, #15
 80062ee:	6879      	ldr	r1, [r7, #4]
 80062f0:	4613      	mov	r3, r2
 80062f2:	009b      	lsls	r3, r3, #2
 80062f4:	4413      	add	r3, r2
 80062f6:	009b      	lsls	r3, r3, #2
 80062f8:	440b      	add	r3, r1
 80062fa:	3324      	adds	r3, #36	; 0x24
 80062fc:	881b      	ldrh	r3, [r3, #0]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d117      	bne.n	8006332 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006302:	6839      	ldr	r1, [r7, #0]
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f000 fbb0 	bl	8006a6a <USBD_CtlError>
                  break;
 800630a:	e054      	b.n	80063b6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800630c:	7bbb      	ldrb	r3, [r7, #14]
 800630e:	f003 020f 	and.w	r2, r3, #15
 8006312:	6879      	ldr	r1, [r7, #4]
 8006314:	4613      	mov	r3, r2
 8006316:	009b      	lsls	r3, r3, #2
 8006318:	4413      	add	r3, r2
 800631a:	009b      	lsls	r3, r3, #2
 800631c:	440b      	add	r3, r1
 800631e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006322:	881b      	ldrh	r3, [r3, #0]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d104      	bne.n	8006332 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006328:	6839      	ldr	r1, [r7, #0]
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f000 fb9d 	bl	8006a6a <USBD_CtlError>
                  break;
 8006330:	e041      	b.n	80063b6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006332:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006336:	2b00      	cmp	r3, #0
 8006338:	da0b      	bge.n	8006352 <USBD_StdEPReq+0x2b2>
 800633a:	7bbb      	ldrb	r3, [r7, #14]
 800633c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006340:	4613      	mov	r3, r2
 8006342:	009b      	lsls	r3, r3, #2
 8006344:	4413      	add	r3, r2
 8006346:	009b      	lsls	r3, r3, #2
 8006348:	3310      	adds	r3, #16
 800634a:	687a      	ldr	r2, [r7, #4]
 800634c:	4413      	add	r3, r2
 800634e:	3304      	adds	r3, #4
 8006350:	e00b      	b.n	800636a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006352:	7bbb      	ldrb	r3, [r7, #14]
 8006354:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006358:	4613      	mov	r3, r2
 800635a:	009b      	lsls	r3, r3, #2
 800635c:	4413      	add	r3, r2
 800635e:	009b      	lsls	r3, r3, #2
 8006360:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006364:	687a      	ldr	r2, [r7, #4]
 8006366:	4413      	add	r3, r2
 8006368:	3304      	adds	r3, #4
 800636a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800636c:	7bbb      	ldrb	r3, [r7, #14]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d002      	beq.n	8006378 <USBD_StdEPReq+0x2d8>
 8006372:	7bbb      	ldrb	r3, [r7, #14]
 8006374:	2b80      	cmp	r3, #128	; 0x80
 8006376:	d103      	bne.n	8006380 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	2200      	movs	r2, #0
 800637c:	601a      	str	r2, [r3, #0]
 800637e:	e00e      	b.n	800639e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006380:	7bbb      	ldrb	r3, [r7, #14]
 8006382:	4619      	mov	r1, r3
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f001 f88d 	bl	80074a4 <USBD_LL_IsStallEP>
 800638a:	4603      	mov	r3, r0
 800638c:	2b00      	cmp	r3, #0
 800638e:	d003      	beq.n	8006398 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	2201      	movs	r2, #1
 8006394:	601a      	str	r2, [r3, #0]
 8006396:	e002      	b.n	800639e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	2200      	movs	r2, #0
 800639c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	2202      	movs	r2, #2
 80063a2:	4619      	mov	r1, r3
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f000 fbd1 	bl	8006b4c <USBD_CtlSendData>
              break;
 80063aa:	e004      	b.n	80063b6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80063ac:	6839      	ldr	r1, [r7, #0]
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f000 fb5b 	bl	8006a6a <USBD_CtlError>
              break;
 80063b4:	bf00      	nop
          }
          break;
 80063b6:	e004      	b.n	80063c2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80063b8:	6839      	ldr	r1, [r7, #0]
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f000 fb55 	bl	8006a6a <USBD_CtlError>
          break;
 80063c0:	bf00      	nop
      }
      break;
 80063c2:	e005      	b.n	80063d0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80063c4:	6839      	ldr	r1, [r7, #0]
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f000 fb4f 	bl	8006a6a <USBD_CtlError>
      break;
 80063cc:	e000      	b.n	80063d0 <USBD_StdEPReq+0x330>
      break;
 80063ce:	bf00      	nop
  }

  return ret;
 80063d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3710      	adds	r7, #16
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}
	...

080063dc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b084      	sub	sp, #16
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
 80063e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80063e6:	2300      	movs	r3, #0
 80063e8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80063ea:	2300      	movs	r3, #0
 80063ec:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80063ee:	2300      	movs	r3, #0
 80063f0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	885b      	ldrh	r3, [r3, #2]
 80063f6:	0a1b      	lsrs	r3, r3, #8
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	3b01      	subs	r3, #1
 80063fc:	2b06      	cmp	r3, #6
 80063fe:	f200 8128 	bhi.w	8006652 <USBD_GetDescriptor+0x276>
 8006402:	a201      	add	r2, pc, #4	; (adr r2, 8006408 <USBD_GetDescriptor+0x2c>)
 8006404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006408:	08006425 	.word	0x08006425
 800640c:	0800643d 	.word	0x0800643d
 8006410:	0800647d 	.word	0x0800647d
 8006414:	08006653 	.word	0x08006653
 8006418:	08006653 	.word	0x08006653
 800641c:	080065f3 	.word	0x080065f3
 8006420:	0800661f 	.word	0x0800661f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	7c12      	ldrb	r2, [r2, #16]
 8006430:	f107 0108 	add.w	r1, r7, #8
 8006434:	4610      	mov	r0, r2
 8006436:	4798      	blx	r3
 8006438:	60f8      	str	r0, [r7, #12]
      break;
 800643a:	e112      	b.n	8006662 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	7c1b      	ldrb	r3, [r3, #16]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d10d      	bne.n	8006460 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800644a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800644c:	f107 0208 	add.w	r2, r7, #8
 8006450:	4610      	mov	r0, r2
 8006452:	4798      	blx	r3
 8006454:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	3301      	adds	r3, #1
 800645a:	2202      	movs	r2, #2
 800645c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800645e:	e100      	b.n	8006662 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006468:	f107 0208 	add.w	r2, r7, #8
 800646c:	4610      	mov	r0, r2
 800646e:	4798      	blx	r3
 8006470:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	3301      	adds	r3, #1
 8006476:	2202      	movs	r2, #2
 8006478:	701a      	strb	r2, [r3, #0]
      break;
 800647a:	e0f2      	b.n	8006662 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	885b      	ldrh	r3, [r3, #2]
 8006480:	b2db      	uxtb	r3, r3
 8006482:	2b05      	cmp	r3, #5
 8006484:	f200 80ac 	bhi.w	80065e0 <USBD_GetDescriptor+0x204>
 8006488:	a201      	add	r2, pc, #4	; (adr r2, 8006490 <USBD_GetDescriptor+0xb4>)
 800648a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800648e:	bf00      	nop
 8006490:	080064a9 	.word	0x080064a9
 8006494:	080064dd 	.word	0x080064dd
 8006498:	08006511 	.word	0x08006511
 800649c:	08006545 	.word	0x08006545
 80064a0:	08006579 	.word	0x08006579
 80064a4:	080065ad 	.word	0x080065ad
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d00b      	beq.n	80064cc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	687a      	ldr	r2, [r7, #4]
 80064be:	7c12      	ldrb	r2, [r2, #16]
 80064c0:	f107 0108 	add.w	r1, r7, #8
 80064c4:	4610      	mov	r0, r2
 80064c6:	4798      	blx	r3
 80064c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80064ca:	e091      	b.n	80065f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80064cc:	6839      	ldr	r1, [r7, #0]
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 facb 	bl	8006a6a <USBD_CtlError>
            err++;
 80064d4:	7afb      	ldrb	r3, [r7, #11]
 80064d6:	3301      	adds	r3, #1
 80064d8:	72fb      	strb	r3, [r7, #11]
          break;
 80064da:	e089      	b.n	80065f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d00b      	beq.n	8006500 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064ee:	689b      	ldr	r3, [r3, #8]
 80064f0:	687a      	ldr	r2, [r7, #4]
 80064f2:	7c12      	ldrb	r2, [r2, #16]
 80064f4:	f107 0108 	add.w	r1, r7, #8
 80064f8:	4610      	mov	r0, r2
 80064fa:	4798      	blx	r3
 80064fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80064fe:	e077      	b.n	80065f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006500:	6839      	ldr	r1, [r7, #0]
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f000 fab1 	bl	8006a6a <USBD_CtlError>
            err++;
 8006508:	7afb      	ldrb	r3, [r7, #11]
 800650a:	3301      	adds	r3, #1
 800650c:	72fb      	strb	r3, [r7, #11]
          break;
 800650e:	e06f      	b.n	80065f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006516:	68db      	ldr	r3, [r3, #12]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d00b      	beq.n	8006534 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006522:	68db      	ldr	r3, [r3, #12]
 8006524:	687a      	ldr	r2, [r7, #4]
 8006526:	7c12      	ldrb	r2, [r2, #16]
 8006528:	f107 0108 	add.w	r1, r7, #8
 800652c:	4610      	mov	r0, r2
 800652e:	4798      	blx	r3
 8006530:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006532:	e05d      	b.n	80065f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006534:	6839      	ldr	r1, [r7, #0]
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f000 fa97 	bl	8006a6a <USBD_CtlError>
            err++;
 800653c:	7afb      	ldrb	r3, [r7, #11]
 800653e:	3301      	adds	r3, #1
 8006540:	72fb      	strb	r3, [r7, #11]
          break;
 8006542:	e055      	b.n	80065f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800654a:	691b      	ldr	r3, [r3, #16]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d00b      	beq.n	8006568 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006556:	691b      	ldr	r3, [r3, #16]
 8006558:	687a      	ldr	r2, [r7, #4]
 800655a:	7c12      	ldrb	r2, [r2, #16]
 800655c:	f107 0108 	add.w	r1, r7, #8
 8006560:	4610      	mov	r0, r2
 8006562:	4798      	blx	r3
 8006564:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006566:	e043      	b.n	80065f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006568:	6839      	ldr	r1, [r7, #0]
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f000 fa7d 	bl	8006a6a <USBD_CtlError>
            err++;
 8006570:	7afb      	ldrb	r3, [r7, #11]
 8006572:	3301      	adds	r3, #1
 8006574:	72fb      	strb	r3, [r7, #11]
          break;
 8006576:	e03b      	b.n	80065f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800657e:	695b      	ldr	r3, [r3, #20]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d00b      	beq.n	800659c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800658a:	695b      	ldr	r3, [r3, #20]
 800658c:	687a      	ldr	r2, [r7, #4]
 800658e:	7c12      	ldrb	r2, [r2, #16]
 8006590:	f107 0108 	add.w	r1, r7, #8
 8006594:	4610      	mov	r0, r2
 8006596:	4798      	blx	r3
 8006598:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800659a:	e029      	b.n	80065f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800659c:	6839      	ldr	r1, [r7, #0]
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f000 fa63 	bl	8006a6a <USBD_CtlError>
            err++;
 80065a4:	7afb      	ldrb	r3, [r7, #11]
 80065a6:	3301      	adds	r3, #1
 80065a8:	72fb      	strb	r3, [r7, #11]
          break;
 80065aa:	e021      	b.n	80065f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065b2:	699b      	ldr	r3, [r3, #24]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d00b      	beq.n	80065d0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065be:	699b      	ldr	r3, [r3, #24]
 80065c0:	687a      	ldr	r2, [r7, #4]
 80065c2:	7c12      	ldrb	r2, [r2, #16]
 80065c4:	f107 0108 	add.w	r1, r7, #8
 80065c8:	4610      	mov	r0, r2
 80065ca:	4798      	blx	r3
 80065cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80065ce:	e00f      	b.n	80065f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80065d0:	6839      	ldr	r1, [r7, #0]
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f000 fa49 	bl	8006a6a <USBD_CtlError>
            err++;
 80065d8:	7afb      	ldrb	r3, [r7, #11]
 80065da:	3301      	adds	r3, #1
 80065dc:	72fb      	strb	r3, [r7, #11]
          break;
 80065de:	e007      	b.n	80065f0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80065e0:	6839      	ldr	r1, [r7, #0]
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f000 fa41 	bl	8006a6a <USBD_CtlError>
          err++;
 80065e8:	7afb      	ldrb	r3, [r7, #11]
 80065ea:	3301      	adds	r3, #1
 80065ec:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80065ee:	bf00      	nop
      }
      break;
 80065f0:	e037      	b.n	8006662 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	7c1b      	ldrb	r3, [r3, #16]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d109      	bne.n	800660e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006602:	f107 0208 	add.w	r2, r7, #8
 8006606:	4610      	mov	r0, r2
 8006608:	4798      	blx	r3
 800660a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800660c:	e029      	b.n	8006662 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800660e:	6839      	ldr	r1, [r7, #0]
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f000 fa2a 	bl	8006a6a <USBD_CtlError>
        err++;
 8006616:	7afb      	ldrb	r3, [r7, #11]
 8006618:	3301      	adds	r3, #1
 800661a:	72fb      	strb	r3, [r7, #11]
      break;
 800661c:	e021      	b.n	8006662 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	7c1b      	ldrb	r3, [r3, #16]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d10d      	bne.n	8006642 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800662c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800662e:	f107 0208 	add.w	r2, r7, #8
 8006632:	4610      	mov	r0, r2
 8006634:	4798      	blx	r3
 8006636:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	3301      	adds	r3, #1
 800663c:	2207      	movs	r2, #7
 800663e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006640:	e00f      	b.n	8006662 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006642:	6839      	ldr	r1, [r7, #0]
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f000 fa10 	bl	8006a6a <USBD_CtlError>
        err++;
 800664a:	7afb      	ldrb	r3, [r7, #11]
 800664c:	3301      	adds	r3, #1
 800664e:	72fb      	strb	r3, [r7, #11]
      break;
 8006650:	e007      	b.n	8006662 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006652:	6839      	ldr	r1, [r7, #0]
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f000 fa08 	bl	8006a6a <USBD_CtlError>
      err++;
 800665a:	7afb      	ldrb	r3, [r7, #11]
 800665c:	3301      	adds	r3, #1
 800665e:	72fb      	strb	r3, [r7, #11]
      break;
 8006660:	bf00      	nop
  }

  if (err != 0U)
 8006662:	7afb      	ldrb	r3, [r7, #11]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d11e      	bne.n	80066a6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	88db      	ldrh	r3, [r3, #6]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d016      	beq.n	800669e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006670:	893b      	ldrh	r3, [r7, #8]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d00e      	beq.n	8006694 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	88da      	ldrh	r2, [r3, #6]
 800667a:	893b      	ldrh	r3, [r7, #8]
 800667c:	4293      	cmp	r3, r2
 800667e:	bf28      	it	cs
 8006680:	4613      	movcs	r3, r2
 8006682:	b29b      	uxth	r3, r3
 8006684:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006686:	893b      	ldrh	r3, [r7, #8]
 8006688:	461a      	mov	r2, r3
 800668a:	68f9      	ldr	r1, [r7, #12]
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f000 fa5d 	bl	8006b4c <USBD_CtlSendData>
 8006692:	e009      	b.n	80066a8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006694:	6839      	ldr	r1, [r7, #0]
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f000 f9e7 	bl	8006a6a <USBD_CtlError>
 800669c:	e004      	b.n	80066a8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f000 faae 	bl	8006c00 <USBD_CtlSendStatus>
 80066a4:	e000      	b.n	80066a8 <USBD_GetDescriptor+0x2cc>
    return;
 80066a6:	bf00      	nop
  }
}
 80066a8:	3710      	adds	r7, #16
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}
 80066ae:	bf00      	nop

080066b0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b084      	sub	sp, #16
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
 80066b8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	889b      	ldrh	r3, [r3, #4]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d131      	bne.n	8006726 <USBD_SetAddress+0x76>
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	88db      	ldrh	r3, [r3, #6]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d12d      	bne.n	8006726 <USBD_SetAddress+0x76>
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	885b      	ldrh	r3, [r3, #2]
 80066ce:	2b7f      	cmp	r3, #127	; 0x7f
 80066d0:	d829      	bhi.n	8006726 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	885b      	ldrh	r3, [r3, #2]
 80066d6:	b2db      	uxtb	r3, r3
 80066d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066dc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066e4:	b2db      	uxtb	r3, r3
 80066e6:	2b03      	cmp	r3, #3
 80066e8:	d104      	bne.n	80066f4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80066ea:	6839      	ldr	r1, [r7, #0]
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f000 f9bc 	bl	8006a6a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066f2:	e01d      	b.n	8006730 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	7bfa      	ldrb	r2, [r7, #15]
 80066f8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80066fc:	7bfb      	ldrb	r3, [r7, #15]
 80066fe:	4619      	mov	r1, r3
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f000 fefb 	bl	80074fc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f000 fa7a 	bl	8006c00 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800670c:	7bfb      	ldrb	r3, [r7, #15]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d004      	beq.n	800671c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2202      	movs	r2, #2
 8006716:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800671a:	e009      	b.n	8006730 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2201      	movs	r2, #1
 8006720:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006724:	e004      	b.n	8006730 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006726:	6839      	ldr	r1, [r7, #0]
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f000 f99e 	bl	8006a6a <USBD_CtlError>
  }
}
 800672e:	bf00      	nop
 8006730:	bf00      	nop
 8006732:	3710      	adds	r7, #16
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}

08006738 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b084      	sub	sp, #16
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
 8006740:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006742:	2300      	movs	r3, #0
 8006744:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	885b      	ldrh	r3, [r3, #2]
 800674a:	b2da      	uxtb	r2, r3
 800674c:	4b4e      	ldr	r3, [pc, #312]	; (8006888 <USBD_SetConfig+0x150>)
 800674e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006750:	4b4d      	ldr	r3, [pc, #308]	; (8006888 <USBD_SetConfig+0x150>)
 8006752:	781b      	ldrb	r3, [r3, #0]
 8006754:	2b01      	cmp	r3, #1
 8006756:	d905      	bls.n	8006764 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006758:	6839      	ldr	r1, [r7, #0]
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f000 f985 	bl	8006a6a <USBD_CtlError>
    return USBD_FAIL;
 8006760:	2303      	movs	r3, #3
 8006762:	e08c      	b.n	800687e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800676a:	b2db      	uxtb	r3, r3
 800676c:	2b02      	cmp	r3, #2
 800676e:	d002      	beq.n	8006776 <USBD_SetConfig+0x3e>
 8006770:	2b03      	cmp	r3, #3
 8006772:	d029      	beq.n	80067c8 <USBD_SetConfig+0x90>
 8006774:	e075      	b.n	8006862 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006776:	4b44      	ldr	r3, [pc, #272]	; (8006888 <USBD_SetConfig+0x150>)
 8006778:	781b      	ldrb	r3, [r3, #0]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d020      	beq.n	80067c0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800677e:	4b42      	ldr	r3, [pc, #264]	; (8006888 <USBD_SetConfig+0x150>)
 8006780:	781b      	ldrb	r3, [r3, #0]
 8006782:	461a      	mov	r2, r3
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006788:	4b3f      	ldr	r3, [pc, #252]	; (8006888 <USBD_SetConfig+0x150>)
 800678a:	781b      	ldrb	r3, [r3, #0]
 800678c:	4619      	mov	r1, r3
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f7fe ffe7 	bl	8005762 <USBD_SetClassConfig>
 8006794:	4603      	mov	r3, r0
 8006796:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006798:	7bfb      	ldrb	r3, [r7, #15]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d008      	beq.n	80067b0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800679e:	6839      	ldr	r1, [r7, #0]
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f000 f962 	bl	8006a6a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2202      	movs	r2, #2
 80067aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80067ae:	e065      	b.n	800687c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f000 fa25 	bl	8006c00 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2203      	movs	r2, #3
 80067ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80067be:	e05d      	b.n	800687c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f000 fa1d 	bl	8006c00 <USBD_CtlSendStatus>
      break;
 80067c6:	e059      	b.n	800687c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80067c8:	4b2f      	ldr	r3, [pc, #188]	; (8006888 <USBD_SetConfig+0x150>)
 80067ca:	781b      	ldrb	r3, [r3, #0]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d112      	bne.n	80067f6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2202      	movs	r2, #2
 80067d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80067d8:	4b2b      	ldr	r3, [pc, #172]	; (8006888 <USBD_SetConfig+0x150>)
 80067da:	781b      	ldrb	r3, [r3, #0]
 80067dc:	461a      	mov	r2, r3
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80067e2:	4b29      	ldr	r3, [pc, #164]	; (8006888 <USBD_SetConfig+0x150>)
 80067e4:	781b      	ldrb	r3, [r3, #0]
 80067e6:	4619      	mov	r1, r3
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f7fe ffd6 	bl	800579a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f000 fa06 	bl	8006c00 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80067f4:	e042      	b.n	800687c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80067f6:	4b24      	ldr	r3, [pc, #144]	; (8006888 <USBD_SetConfig+0x150>)
 80067f8:	781b      	ldrb	r3, [r3, #0]
 80067fa:	461a      	mov	r2, r3
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	429a      	cmp	r2, r3
 8006802:	d02a      	beq.n	800685a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	b2db      	uxtb	r3, r3
 800680a:	4619      	mov	r1, r3
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f7fe ffc4 	bl	800579a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006812:	4b1d      	ldr	r3, [pc, #116]	; (8006888 <USBD_SetConfig+0x150>)
 8006814:	781b      	ldrb	r3, [r3, #0]
 8006816:	461a      	mov	r2, r3
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800681c:	4b1a      	ldr	r3, [pc, #104]	; (8006888 <USBD_SetConfig+0x150>)
 800681e:	781b      	ldrb	r3, [r3, #0]
 8006820:	4619      	mov	r1, r3
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f7fe ff9d 	bl	8005762 <USBD_SetClassConfig>
 8006828:	4603      	mov	r3, r0
 800682a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800682c:	7bfb      	ldrb	r3, [r7, #15]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d00f      	beq.n	8006852 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006832:	6839      	ldr	r1, [r7, #0]
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f000 f918 	bl	8006a6a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	b2db      	uxtb	r3, r3
 8006840:	4619      	mov	r1, r3
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f7fe ffa9 	bl	800579a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2202      	movs	r2, #2
 800684c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006850:	e014      	b.n	800687c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f000 f9d4 	bl	8006c00 <USBD_CtlSendStatus>
      break;
 8006858:	e010      	b.n	800687c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f000 f9d0 	bl	8006c00 <USBD_CtlSendStatus>
      break;
 8006860:	e00c      	b.n	800687c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006862:	6839      	ldr	r1, [r7, #0]
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f000 f900 	bl	8006a6a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800686a:	4b07      	ldr	r3, [pc, #28]	; (8006888 <USBD_SetConfig+0x150>)
 800686c:	781b      	ldrb	r3, [r3, #0]
 800686e:	4619      	mov	r1, r3
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f7fe ff92 	bl	800579a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006876:	2303      	movs	r3, #3
 8006878:	73fb      	strb	r3, [r7, #15]
      break;
 800687a:	bf00      	nop
  }

  return ret;
 800687c:	7bfb      	ldrb	r3, [r7, #15]
}
 800687e:	4618      	mov	r0, r3
 8006880:	3710      	adds	r7, #16
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}
 8006886:	bf00      	nop
 8006888:	20000198 	.word	0x20000198

0800688c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b082      	sub	sp, #8
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
 8006894:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	88db      	ldrh	r3, [r3, #6]
 800689a:	2b01      	cmp	r3, #1
 800689c:	d004      	beq.n	80068a8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800689e:	6839      	ldr	r1, [r7, #0]
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f000 f8e2 	bl	8006a6a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80068a6:	e023      	b.n	80068f0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068ae:	b2db      	uxtb	r3, r3
 80068b0:	2b02      	cmp	r3, #2
 80068b2:	dc02      	bgt.n	80068ba <USBD_GetConfig+0x2e>
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	dc03      	bgt.n	80068c0 <USBD_GetConfig+0x34>
 80068b8:	e015      	b.n	80068e6 <USBD_GetConfig+0x5a>
 80068ba:	2b03      	cmp	r3, #3
 80068bc:	d00b      	beq.n	80068d6 <USBD_GetConfig+0x4a>
 80068be:	e012      	b.n	80068e6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2200      	movs	r2, #0
 80068c4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	3308      	adds	r3, #8
 80068ca:	2201      	movs	r2, #1
 80068cc:	4619      	mov	r1, r3
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f000 f93c 	bl	8006b4c <USBD_CtlSendData>
        break;
 80068d4:	e00c      	b.n	80068f0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	3304      	adds	r3, #4
 80068da:	2201      	movs	r2, #1
 80068dc:	4619      	mov	r1, r3
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f000 f934 	bl	8006b4c <USBD_CtlSendData>
        break;
 80068e4:	e004      	b.n	80068f0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80068e6:	6839      	ldr	r1, [r7, #0]
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f000 f8be 	bl	8006a6a <USBD_CtlError>
        break;
 80068ee:	bf00      	nop
}
 80068f0:	bf00      	nop
 80068f2:	3708      	adds	r7, #8
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}

080068f8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b082      	sub	sp, #8
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006908:	b2db      	uxtb	r3, r3
 800690a:	3b01      	subs	r3, #1
 800690c:	2b02      	cmp	r3, #2
 800690e:	d81e      	bhi.n	800694e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	88db      	ldrh	r3, [r3, #6]
 8006914:	2b02      	cmp	r3, #2
 8006916:	d004      	beq.n	8006922 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006918:	6839      	ldr	r1, [r7, #0]
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f000 f8a5 	bl	8006a6a <USBD_CtlError>
        break;
 8006920:	e01a      	b.n	8006958 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
#else
      pdev->dev_config_status = 0U;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2200      	movs	r2, #0
 8006926:	60da      	str	r2, [r3, #12]
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800692e:	2b00      	cmp	r3, #0
 8006930:	d005      	beq.n	800693e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	68db      	ldr	r3, [r3, #12]
 8006936:	f043 0202 	orr.w	r2, r3, #2
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	330c      	adds	r3, #12
 8006942:	2202      	movs	r2, #2
 8006944:	4619      	mov	r1, r3
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f000 f900 	bl	8006b4c <USBD_CtlSendData>
      break;
 800694c:	e004      	b.n	8006958 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800694e:	6839      	ldr	r1, [r7, #0]
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f000 f88a 	bl	8006a6a <USBD_CtlError>
      break;
 8006956:	bf00      	nop
  }
}
 8006958:	bf00      	nop
 800695a:	3708      	adds	r7, #8
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}

08006960 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b082      	sub	sp, #8
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
 8006968:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	885b      	ldrh	r3, [r3, #2]
 800696e:	2b01      	cmp	r3, #1
 8006970:	d107      	bne.n	8006982 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2201      	movs	r2, #1
 8006976:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f000 f940 	bl	8006c00 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006980:	e013      	b.n	80069aa <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	885b      	ldrh	r3, [r3, #2]
 8006986:	2b02      	cmp	r3, #2
 8006988:	d10b      	bne.n	80069a2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	889b      	ldrh	r3, [r3, #4]
 800698e:	0a1b      	lsrs	r3, r3, #8
 8006990:	b29b      	uxth	r3, r3
 8006992:	b2da      	uxtb	r2, r3
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f000 f930 	bl	8006c00 <USBD_CtlSendStatus>
}
 80069a0:	e003      	b.n	80069aa <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80069a2:	6839      	ldr	r1, [r7, #0]
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f000 f860 	bl	8006a6a <USBD_CtlError>
}
 80069aa:	bf00      	nop
 80069ac:	3708      	adds	r7, #8
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}

080069b2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069b2:	b580      	push	{r7, lr}
 80069b4:	b082      	sub	sp, #8
 80069b6:	af00      	add	r7, sp, #0
 80069b8:	6078      	str	r0, [r7, #4]
 80069ba:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069c2:	b2db      	uxtb	r3, r3
 80069c4:	3b01      	subs	r3, #1
 80069c6:	2b02      	cmp	r3, #2
 80069c8:	d80b      	bhi.n	80069e2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	885b      	ldrh	r3, [r3, #2]
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	d10c      	bne.n	80069ec <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2200      	movs	r2, #0
 80069d6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f000 f910 	bl	8006c00 <USBD_CtlSendStatus>
      }
      break;
 80069e0:	e004      	b.n	80069ec <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80069e2:	6839      	ldr	r1, [r7, #0]
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f000 f840 	bl	8006a6a <USBD_CtlError>
      break;
 80069ea:	e000      	b.n	80069ee <USBD_ClrFeature+0x3c>
      break;
 80069ec:	bf00      	nop
  }
}
 80069ee:	bf00      	nop
 80069f0:	3708      	adds	r7, #8
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}

080069f6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80069f6:	b580      	push	{r7, lr}
 80069f8:	b084      	sub	sp, #16
 80069fa:	af00      	add	r7, sp, #0
 80069fc:	6078      	str	r0, [r7, #4]
 80069fe:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	781a      	ldrb	r2, [r3, #0]
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	3301      	adds	r3, #1
 8006a10:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	781a      	ldrb	r2, [r3, #0]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	3301      	adds	r3, #1
 8006a1e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006a20:	68f8      	ldr	r0, [r7, #12]
 8006a22:	f7ff fa41 	bl	8005ea8 <SWAPBYTE>
 8006a26:	4603      	mov	r3, r0
 8006a28:	461a      	mov	r2, r3
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	3301      	adds	r3, #1
 8006a32:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	3301      	adds	r3, #1
 8006a38:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006a3a:	68f8      	ldr	r0, [r7, #12]
 8006a3c:	f7ff fa34 	bl	8005ea8 <SWAPBYTE>
 8006a40:	4603      	mov	r3, r0
 8006a42:	461a      	mov	r2, r3
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	3301      	adds	r3, #1
 8006a4c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	3301      	adds	r3, #1
 8006a52:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006a54:	68f8      	ldr	r0, [r7, #12]
 8006a56:	f7ff fa27 	bl	8005ea8 <SWAPBYTE>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	80da      	strh	r2, [r3, #6]
}
 8006a62:	bf00      	nop
 8006a64:	3710      	adds	r7, #16
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}

08006a6a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a6a:	b580      	push	{r7, lr}
 8006a6c:	b082      	sub	sp, #8
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	6078      	str	r0, [r7, #4]
 8006a72:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006a74:	2180      	movs	r1, #128	; 0x80
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f000 fcd6 	bl	8007428 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006a7c:	2100      	movs	r1, #0
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f000 fcd2 	bl	8007428 <USBD_LL_StallEP>
}
 8006a84:	bf00      	nop
 8006a86:	3708      	adds	r7, #8
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}

08006a8c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b086      	sub	sp, #24
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	60f8      	str	r0, [r7, #12]
 8006a94:	60b9      	str	r1, [r7, #8]
 8006a96:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d036      	beq.n	8006b10 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006aa6:	6938      	ldr	r0, [r7, #16]
 8006aa8:	f000 f836 	bl	8006b18 <USBD_GetLen>
 8006aac:	4603      	mov	r3, r0
 8006aae:	3301      	adds	r3, #1
 8006ab0:	b29b      	uxth	r3, r3
 8006ab2:	005b      	lsls	r3, r3, #1
 8006ab4:	b29a      	uxth	r2, r3
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006aba:	7dfb      	ldrb	r3, [r7, #23]
 8006abc:	68ba      	ldr	r2, [r7, #8]
 8006abe:	4413      	add	r3, r2
 8006ac0:	687a      	ldr	r2, [r7, #4]
 8006ac2:	7812      	ldrb	r2, [r2, #0]
 8006ac4:	701a      	strb	r2, [r3, #0]
  idx++;
 8006ac6:	7dfb      	ldrb	r3, [r7, #23]
 8006ac8:	3301      	adds	r3, #1
 8006aca:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006acc:	7dfb      	ldrb	r3, [r7, #23]
 8006ace:	68ba      	ldr	r2, [r7, #8]
 8006ad0:	4413      	add	r3, r2
 8006ad2:	2203      	movs	r2, #3
 8006ad4:	701a      	strb	r2, [r3, #0]
  idx++;
 8006ad6:	7dfb      	ldrb	r3, [r7, #23]
 8006ad8:	3301      	adds	r3, #1
 8006ada:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006adc:	e013      	b.n	8006b06 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006ade:	7dfb      	ldrb	r3, [r7, #23]
 8006ae0:	68ba      	ldr	r2, [r7, #8]
 8006ae2:	4413      	add	r3, r2
 8006ae4:	693a      	ldr	r2, [r7, #16]
 8006ae6:	7812      	ldrb	r2, [r2, #0]
 8006ae8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	3301      	adds	r3, #1
 8006aee:	613b      	str	r3, [r7, #16]
    idx++;
 8006af0:	7dfb      	ldrb	r3, [r7, #23]
 8006af2:	3301      	adds	r3, #1
 8006af4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006af6:	7dfb      	ldrb	r3, [r7, #23]
 8006af8:	68ba      	ldr	r2, [r7, #8]
 8006afa:	4413      	add	r3, r2
 8006afc:	2200      	movs	r2, #0
 8006afe:	701a      	strb	r2, [r3, #0]
    idx++;
 8006b00:	7dfb      	ldrb	r3, [r7, #23]
 8006b02:	3301      	adds	r3, #1
 8006b04:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	781b      	ldrb	r3, [r3, #0]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d1e7      	bne.n	8006ade <USBD_GetString+0x52>
 8006b0e:	e000      	b.n	8006b12 <USBD_GetString+0x86>
    return;
 8006b10:	bf00      	nop
  }
}
 8006b12:	3718      	adds	r7, #24
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}

08006b18 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b085      	sub	sp, #20
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006b20:	2300      	movs	r3, #0
 8006b22:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006b28:	e005      	b.n	8006b36 <USBD_GetLen+0x1e>
  {
    len++;
 8006b2a:	7bfb      	ldrb	r3, [r7, #15]
 8006b2c:	3301      	adds	r3, #1
 8006b2e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	3301      	adds	r3, #1
 8006b34:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	781b      	ldrb	r3, [r3, #0]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d1f5      	bne.n	8006b2a <USBD_GetLen+0x12>
  }

  return len;
 8006b3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	3714      	adds	r7, #20
 8006b44:	46bd      	mov	sp, r7
 8006b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4a:	4770      	bx	lr

08006b4c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b084      	sub	sp, #16
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	60f8      	str	r0, [r7, #12]
 8006b54:	60b9      	str	r1, [r7, #8]
 8006b56:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2202      	movs	r2, #2
 8006b5c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	687a      	ldr	r2, [r7, #4]
 8006b64:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	687a      	ldr	r2, [r7, #4]
 8006b6a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	68ba      	ldr	r2, [r7, #8]
 8006b70:	2100      	movs	r1, #0
 8006b72:	68f8      	ldr	r0, [r7, #12]
 8006b74:	f000 fce1 	bl	800753a <USBD_LL_Transmit>

  return USBD_OK;
 8006b78:	2300      	movs	r3, #0
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3710      	adds	r7, #16
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}

08006b82 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006b82:	b580      	push	{r7, lr}
 8006b84:	b084      	sub	sp, #16
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	60f8      	str	r0, [r7, #12]
 8006b8a:	60b9      	str	r1, [r7, #8]
 8006b8c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	68ba      	ldr	r2, [r7, #8]
 8006b92:	2100      	movs	r1, #0
 8006b94:	68f8      	ldr	r0, [r7, #12]
 8006b96:	f000 fcd0 	bl	800753a <USBD_LL_Transmit>

  return USBD_OK;
 8006b9a:	2300      	movs	r3, #0
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3710      	adds	r7, #16
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}

08006ba4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b084      	sub	sp, #16
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	60f8      	str	r0, [r7, #12]
 8006bac:	60b9      	str	r1, [r7, #8]
 8006bae:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2203      	movs	r2, #3
 8006bb4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	687a      	ldr	r2, [r7, #4]
 8006bbc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	687a      	ldr	r2, [r7, #4]
 8006bc4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	68ba      	ldr	r2, [r7, #8]
 8006bcc:	2100      	movs	r1, #0
 8006bce:	68f8      	ldr	r0, [r7, #12]
 8006bd0:	f000 fcd4 	bl	800757c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006bd4:	2300      	movs	r3, #0
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3710      	adds	r7, #16
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}

08006bde <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006bde:	b580      	push	{r7, lr}
 8006be0:	b084      	sub	sp, #16
 8006be2:	af00      	add	r7, sp, #0
 8006be4:	60f8      	str	r0, [r7, #12]
 8006be6:	60b9      	str	r1, [r7, #8]
 8006be8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	68ba      	ldr	r2, [r7, #8]
 8006bee:	2100      	movs	r1, #0
 8006bf0:	68f8      	ldr	r0, [r7, #12]
 8006bf2:	f000 fcc3 	bl	800757c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006bf6:	2300      	movs	r3, #0
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3710      	adds	r7, #16
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}

08006c00 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b082      	sub	sp, #8
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2204      	movs	r2, #4
 8006c0c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006c10:	2300      	movs	r3, #0
 8006c12:	2200      	movs	r2, #0
 8006c14:	2100      	movs	r1, #0
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f000 fc8f 	bl	800753a <USBD_LL_Transmit>

  return USBD_OK;
 8006c1c:	2300      	movs	r3, #0
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3708      	adds	r7, #8
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}

08006c26 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006c26:	b580      	push	{r7, lr}
 8006c28:	b082      	sub	sp, #8
 8006c2a:	af00      	add	r7, sp, #0
 8006c2c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2205      	movs	r2, #5
 8006c32:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006c36:	2300      	movs	r3, #0
 8006c38:	2200      	movs	r2, #0
 8006c3a:	2100      	movs	r1, #0
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f000 fc9d 	bl	800757c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006c42:	2300      	movs	r3, #0
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	3708      	adds	r7, #8
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}

08006c4c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006c50:	2200      	movs	r2, #0
 8006c52:	4912      	ldr	r1, [pc, #72]	; (8006c9c <MX_USB_DEVICE_Init+0x50>)
 8006c54:	4812      	ldr	r0, [pc, #72]	; (8006ca0 <MX_USB_DEVICE_Init+0x54>)
 8006c56:	f7fe fd07 	bl	8005668 <USBD_Init>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d001      	beq.n	8006c64 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006c60:	f7f9 fe38 	bl	80008d4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006c64:	490f      	ldr	r1, [pc, #60]	; (8006ca4 <MX_USB_DEVICE_Init+0x58>)
 8006c66:	480e      	ldr	r0, [pc, #56]	; (8006ca0 <MX_USB_DEVICE_Init+0x54>)
 8006c68:	f7fe fd2e 	bl	80056c8 <USBD_RegisterClass>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d001      	beq.n	8006c76 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006c72:	f7f9 fe2f 	bl	80008d4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006c76:	490c      	ldr	r1, [pc, #48]	; (8006ca8 <MX_USB_DEVICE_Init+0x5c>)
 8006c78:	4809      	ldr	r0, [pc, #36]	; (8006ca0 <MX_USB_DEVICE_Init+0x54>)
 8006c7a:	f7fe fc1f 	bl	80054bc <USBD_CDC_RegisterInterface>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d001      	beq.n	8006c88 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006c84:	f7f9 fe26 	bl	80008d4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006c88:	4805      	ldr	r0, [pc, #20]	; (8006ca0 <MX_USB_DEVICE_Init+0x54>)
 8006c8a:	f7fe fd53 	bl	8005734 <USBD_Start>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d001      	beq.n	8006c98 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006c94:	f7f9 fe1e 	bl	80008d4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006c98:	bf00      	nop
 8006c9a:	bd80      	pop	{r7, pc}
 8006c9c:	200000ac 	.word	0x200000ac
 8006ca0:	2000019c 	.word	0x2000019c
 8006ca4:	20000018 	.word	0x20000018
 8006ca8:	20000098 	.word	0x20000098

08006cac <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	4905      	ldr	r1, [pc, #20]	; (8006cc8 <CDC_Init_FS+0x1c>)
 8006cb4:	4805      	ldr	r0, [pc, #20]	; (8006ccc <CDC_Init_FS+0x20>)
 8006cb6:	f7fe fc1b 	bl	80054f0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006cba:	4905      	ldr	r1, [pc, #20]	; (8006cd0 <CDC_Init_FS+0x24>)
 8006cbc:	4803      	ldr	r0, [pc, #12]	; (8006ccc <CDC_Init_FS+0x20>)
 8006cbe:	f7fe fc39 	bl	8005534 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006cc2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	bd80      	pop	{r7, pc}
 8006cc8:	20000860 	.word	0x20000860
 8006ccc:	2000019c 	.word	0x2000019c
 8006cd0:	20000478 	.word	0x20000478

08006cd4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006cd8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce2:	4770      	bx	lr

08006ce4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b083      	sub	sp, #12
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	4603      	mov	r3, r0
 8006cec:	6039      	str	r1, [r7, #0]
 8006cee:	71fb      	strb	r3, [r7, #7]
 8006cf0:	4613      	mov	r3, r2
 8006cf2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006cf4:	79fb      	ldrb	r3, [r7, #7]
 8006cf6:	2b23      	cmp	r3, #35	; 0x23
 8006cf8:	d84a      	bhi.n	8006d90 <CDC_Control_FS+0xac>
 8006cfa:	a201      	add	r2, pc, #4	; (adr r2, 8006d00 <CDC_Control_FS+0x1c>)
 8006cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d00:	08006d91 	.word	0x08006d91
 8006d04:	08006d91 	.word	0x08006d91
 8006d08:	08006d91 	.word	0x08006d91
 8006d0c:	08006d91 	.word	0x08006d91
 8006d10:	08006d91 	.word	0x08006d91
 8006d14:	08006d91 	.word	0x08006d91
 8006d18:	08006d91 	.word	0x08006d91
 8006d1c:	08006d91 	.word	0x08006d91
 8006d20:	08006d91 	.word	0x08006d91
 8006d24:	08006d91 	.word	0x08006d91
 8006d28:	08006d91 	.word	0x08006d91
 8006d2c:	08006d91 	.word	0x08006d91
 8006d30:	08006d91 	.word	0x08006d91
 8006d34:	08006d91 	.word	0x08006d91
 8006d38:	08006d91 	.word	0x08006d91
 8006d3c:	08006d91 	.word	0x08006d91
 8006d40:	08006d91 	.word	0x08006d91
 8006d44:	08006d91 	.word	0x08006d91
 8006d48:	08006d91 	.word	0x08006d91
 8006d4c:	08006d91 	.word	0x08006d91
 8006d50:	08006d91 	.word	0x08006d91
 8006d54:	08006d91 	.word	0x08006d91
 8006d58:	08006d91 	.word	0x08006d91
 8006d5c:	08006d91 	.word	0x08006d91
 8006d60:	08006d91 	.word	0x08006d91
 8006d64:	08006d91 	.word	0x08006d91
 8006d68:	08006d91 	.word	0x08006d91
 8006d6c:	08006d91 	.word	0x08006d91
 8006d70:	08006d91 	.word	0x08006d91
 8006d74:	08006d91 	.word	0x08006d91
 8006d78:	08006d91 	.word	0x08006d91
 8006d7c:	08006d91 	.word	0x08006d91
 8006d80:	08006d91 	.word	0x08006d91
 8006d84:	08006d91 	.word	0x08006d91
 8006d88:	08006d91 	.word	0x08006d91
 8006d8c:	08006d91 	.word	0x08006d91
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006d90:	bf00      	nop
  }

  return (USBD_OK);
 8006d92:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	370c      	adds	r7, #12
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr

08006da0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b082      	sub	sp, #8
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
 8006da8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006daa:	6879      	ldr	r1, [r7, #4]
 8006dac:	4805      	ldr	r0, [pc, #20]	; (8006dc4 <CDC_Receive_FS+0x24>)
 8006dae:	f7fe fbc1 	bl	8005534 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006db2:	4804      	ldr	r0, [pc, #16]	; (8006dc4 <CDC_Receive_FS+0x24>)
 8006db4:	f7fe fc22 	bl	80055fc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006db8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3708      	adds	r7, #8
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}
 8006dc2:	bf00      	nop
 8006dc4:	2000019c 	.word	0x2000019c

08006dc8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b084      	sub	sp, #16
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
 8006dd0:	460b      	mov	r3, r1
 8006dd2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006dd8:	4b0d      	ldr	r3, [pc, #52]	; (8006e10 <CDC_Transmit_FS+0x48>)
 8006dda:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006dde:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d001      	beq.n	8006dee <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006dea:	2301      	movs	r3, #1
 8006dec:	e00b      	b.n	8006e06 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006dee:	887b      	ldrh	r3, [r7, #2]
 8006df0:	461a      	mov	r2, r3
 8006df2:	6879      	ldr	r1, [r7, #4]
 8006df4:	4806      	ldr	r0, [pc, #24]	; (8006e10 <CDC_Transmit_FS+0x48>)
 8006df6:	f7fe fb7b 	bl	80054f0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006dfa:	4805      	ldr	r0, [pc, #20]	; (8006e10 <CDC_Transmit_FS+0x48>)
 8006dfc:	f7fe fbb8 	bl	8005570 <USBD_CDC_TransmitPacket>
 8006e00:	4603      	mov	r3, r0
 8006e02:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3710      	adds	r7, #16
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}
 8006e0e:	bf00      	nop
 8006e10:	2000019c 	.word	0x2000019c

08006e14 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b087      	sub	sp, #28
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	60f8      	str	r0, [r7, #12]
 8006e1c:	60b9      	str	r1, [r7, #8]
 8006e1e:	4613      	mov	r3, r2
 8006e20:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006e22:	2300      	movs	r3, #0
 8006e24:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006e26:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	371c      	adds	r7, #28
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e34:	4770      	bx	lr
	...

08006e38 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b083      	sub	sp, #12
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	4603      	mov	r3, r0
 8006e40:	6039      	str	r1, [r7, #0]
 8006e42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	2212      	movs	r2, #18
 8006e48:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006e4a:	4b03      	ldr	r3, [pc, #12]	; (8006e58 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	370c      	adds	r7, #12
 8006e50:	46bd      	mov	sp, r7
 8006e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e56:	4770      	bx	lr
 8006e58:	200000c8 	.word	0x200000c8

08006e5c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b083      	sub	sp, #12
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	4603      	mov	r3, r0
 8006e64:	6039      	str	r1, [r7, #0]
 8006e66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	2204      	movs	r2, #4
 8006e6c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006e6e:	4b03      	ldr	r3, [pc, #12]	; (8006e7c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	370c      	adds	r7, #12
 8006e74:	46bd      	mov	sp, r7
 8006e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7a:	4770      	bx	lr
 8006e7c:	200000dc 	.word	0x200000dc

08006e80 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b082      	sub	sp, #8
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	4603      	mov	r3, r0
 8006e88:	6039      	str	r1, [r7, #0]
 8006e8a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006e8c:	79fb      	ldrb	r3, [r7, #7]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d105      	bne.n	8006e9e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006e92:	683a      	ldr	r2, [r7, #0]
 8006e94:	4907      	ldr	r1, [pc, #28]	; (8006eb4 <USBD_FS_ProductStrDescriptor+0x34>)
 8006e96:	4808      	ldr	r0, [pc, #32]	; (8006eb8 <USBD_FS_ProductStrDescriptor+0x38>)
 8006e98:	f7ff fdf8 	bl	8006a8c <USBD_GetString>
 8006e9c:	e004      	b.n	8006ea8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006e9e:	683a      	ldr	r2, [r7, #0]
 8006ea0:	4904      	ldr	r1, [pc, #16]	; (8006eb4 <USBD_FS_ProductStrDescriptor+0x34>)
 8006ea2:	4805      	ldr	r0, [pc, #20]	; (8006eb8 <USBD_FS_ProductStrDescriptor+0x38>)
 8006ea4:	f7ff fdf2 	bl	8006a8c <USBD_GetString>
  }
  return USBD_StrDesc;
 8006ea8:	4b02      	ldr	r3, [pc, #8]	; (8006eb4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	3708      	adds	r7, #8
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}
 8006eb2:	bf00      	nop
 8006eb4:	20000c48 	.word	0x20000c48
 8006eb8:	080076e4 	.word	0x080076e4

08006ebc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b082      	sub	sp, #8
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	6039      	str	r1, [r7, #0]
 8006ec6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006ec8:	683a      	ldr	r2, [r7, #0]
 8006eca:	4904      	ldr	r1, [pc, #16]	; (8006edc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006ecc:	4804      	ldr	r0, [pc, #16]	; (8006ee0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006ece:	f7ff fddd 	bl	8006a8c <USBD_GetString>
  return USBD_StrDesc;
 8006ed2:	4b02      	ldr	r3, [pc, #8]	; (8006edc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3708      	adds	r7, #8
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}
 8006edc:	20000c48 	.word	0x20000c48
 8006ee0:	080076fc 	.word	0x080076fc

08006ee4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b082      	sub	sp, #8
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	4603      	mov	r3, r0
 8006eec:	6039      	str	r1, [r7, #0]
 8006eee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	221a      	movs	r2, #26
 8006ef4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006ef6:	f000 f843 	bl	8006f80 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006efa:	4b02      	ldr	r3, [pc, #8]	; (8006f04 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	3708      	adds	r7, #8
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}
 8006f04:	200000e0 	.word	0x200000e0

08006f08 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b082      	sub	sp, #8
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	4603      	mov	r3, r0
 8006f10:	6039      	str	r1, [r7, #0]
 8006f12:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006f14:	79fb      	ldrb	r3, [r7, #7]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d105      	bne.n	8006f26 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006f1a:	683a      	ldr	r2, [r7, #0]
 8006f1c:	4907      	ldr	r1, [pc, #28]	; (8006f3c <USBD_FS_ConfigStrDescriptor+0x34>)
 8006f1e:	4808      	ldr	r0, [pc, #32]	; (8006f40 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006f20:	f7ff fdb4 	bl	8006a8c <USBD_GetString>
 8006f24:	e004      	b.n	8006f30 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006f26:	683a      	ldr	r2, [r7, #0]
 8006f28:	4904      	ldr	r1, [pc, #16]	; (8006f3c <USBD_FS_ConfigStrDescriptor+0x34>)
 8006f2a:	4805      	ldr	r0, [pc, #20]	; (8006f40 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006f2c:	f7ff fdae 	bl	8006a8c <USBD_GetString>
  }
  return USBD_StrDesc;
 8006f30:	4b02      	ldr	r3, [pc, #8]	; (8006f3c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3708      	adds	r7, #8
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}
 8006f3a:	bf00      	nop
 8006f3c:	20000c48 	.word	0x20000c48
 8006f40:	08007710 	.word	0x08007710

08006f44 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b082      	sub	sp, #8
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	6039      	str	r1, [r7, #0]
 8006f4e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006f50:	79fb      	ldrb	r3, [r7, #7]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d105      	bne.n	8006f62 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006f56:	683a      	ldr	r2, [r7, #0]
 8006f58:	4907      	ldr	r1, [pc, #28]	; (8006f78 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006f5a:	4808      	ldr	r0, [pc, #32]	; (8006f7c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006f5c:	f7ff fd96 	bl	8006a8c <USBD_GetString>
 8006f60:	e004      	b.n	8006f6c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006f62:	683a      	ldr	r2, [r7, #0]
 8006f64:	4904      	ldr	r1, [pc, #16]	; (8006f78 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006f66:	4805      	ldr	r0, [pc, #20]	; (8006f7c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006f68:	f7ff fd90 	bl	8006a8c <USBD_GetString>
  }
  return USBD_StrDesc;
 8006f6c:	4b02      	ldr	r3, [pc, #8]	; (8006f78 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3708      	adds	r7, #8
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}
 8006f76:	bf00      	nop
 8006f78:	20000c48 	.word	0x20000c48
 8006f7c:	0800771c 	.word	0x0800771c

08006f80 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b084      	sub	sp, #16
 8006f84:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006f86:	4b0f      	ldr	r3, [pc, #60]	; (8006fc4 <Get_SerialNum+0x44>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006f8c:	4b0e      	ldr	r3, [pc, #56]	; (8006fc8 <Get_SerialNum+0x48>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006f92:	4b0e      	ldr	r3, [pc, #56]	; (8006fcc <Get_SerialNum+0x4c>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006f98:	68fa      	ldr	r2, [r7, #12]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	4413      	add	r3, r2
 8006f9e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d009      	beq.n	8006fba <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006fa6:	2208      	movs	r2, #8
 8006fa8:	4909      	ldr	r1, [pc, #36]	; (8006fd0 <Get_SerialNum+0x50>)
 8006faa:	68f8      	ldr	r0, [r7, #12]
 8006fac:	f000 f814 	bl	8006fd8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006fb0:	2204      	movs	r2, #4
 8006fb2:	4908      	ldr	r1, [pc, #32]	; (8006fd4 <Get_SerialNum+0x54>)
 8006fb4:	68b8      	ldr	r0, [r7, #8]
 8006fb6:	f000 f80f 	bl	8006fd8 <IntToUnicode>
  }
}
 8006fba:	bf00      	nop
 8006fbc:	3710      	adds	r7, #16
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}
 8006fc2:	bf00      	nop
 8006fc4:	1fff7a10 	.word	0x1fff7a10
 8006fc8:	1fff7a14 	.word	0x1fff7a14
 8006fcc:	1fff7a18 	.word	0x1fff7a18
 8006fd0:	200000e2 	.word	0x200000e2
 8006fd4:	200000f2 	.word	0x200000f2

08006fd8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b087      	sub	sp, #28
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	60f8      	str	r0, [r7, #12]
 8006fe0:	60b9      	str	r1, [r7, #8]
 8006fe2:	4613      	mov	r3, r2
 8006fe4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006fea:	2300      	movs	r3, #0
 8006fec:	75fb      	strb	r3, [r7, #23]
 8006fee:	e027      	b.n	8007040 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	0f1b      	lsrs	r3, r3, #28
 8006ff4:	2b09      	cmp	r3, #9
 8006ff6:	d80b      	bhi.n	8007010 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	0f1b      	lsrs	r3, r3, #28
 8006ffc:	b2da      	uxtb	r2, r3
 8006ffe:	7dfb      	ldrb	r3, [r7, #23]
 8007000:	005b      	lsls	r3, r3, #1
 8007002:	4619      	mov	r1, r3
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	440b      	add	r3, r1
 8007008:	3230      	adds	r2, #48	; 0x30
 800700a:	b2d2      	uxtb	r2, r2
 800700c:	701a      	strb	r2, [r3, #0]
 800700e:	e00a      	b.n	8007026 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	0f1b      	lsrs	r3, r3, #28
 8007014:	b2da      	uxtb	r2, r3
 8007016:	7dfb      	ldrb	r3, [r7, #23]
 8007018:	005b      	lsls	r3, r3, #1
 800701a:	4619      	mov	r1, r3
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	440b      	add	r3, r1
 8007020:	3237      	adds	r2, #55	; 0x37
 8007022:	b2d2      	uxtb	r2, r2
 8007024:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	011b      	lsls	r3, r3, #4
 800702a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800702c:	7dfb      	ldrb	r3, [r7, #23]
 800702e:	005b      	lsls	r3, r3, #1
 8007030:	3301      	adds	r3, #1
 8007032:	68ba      	ldr	r2, [r7, #8]
 8007034:	4413      	add	r3, r2
 8007036:	2200      	movs	r2, #0
 8007038:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800703a:	7dfb      	ldrb	r3, [r7, #23]
 800703c:	3301      	adds	r3, #1
 800703e:	75fb      	strb	r3, [r7, #23]
 8007040:	7dfa      	ldrb	r2, [r7, #23]
 8007042:	79fb      	ldrb	r3, [r7, #7]
 8007044:	429a      	cmp	r2, r3
 8007046:	d3d3      	bcc.n	8006ff0 <IntToUnicode+0x18>
  }
}
 8007048:	bf00      	nop
 800704a:	bf00      	nop
 800704c:	371c      	adds	r7, #28
 800704e:	46bd      	mov	sp, r7
 8007050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007054:	4770      	bx	lr
	...

08007058 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b08a      	sub	sp, #40	; 0x28
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007060:	f107 0314 	add.w	r3, r7, #20
 8007064:	2200      	movs	r2, #0
 8007066:	601a      	str	r2, [r3, #0]
 8007068:	605a      	str	r2, [r3, #4]
 800706a:	609a      	str	r2, [r3, #8]
 800706c:	60da      	str	r2, [r3, #12]
 800706e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007078:	d13a      	bne.n	80070f0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800707a:	2300      	movs	r3, #0
 800707c:	613b      	str	r3, [r7, #16]
 800707e:	4b1e      	ldr	r3, [pc, #120]	; (80070f8 <HAL_PCD_MspInit+0xa0>)
 8007080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007082:	4a1d      	ldr	r2, [pc, #116]	; (80070f8 <HAL_PCD_MspInit+0xa0>)
 8007084:	f043 0301 	orr.w	r3, r3, #1
 8007088:	6313      	str	r3, [r2, #48]	; 0x30
 800708a:	4b1b      	ldr	r3, [pc, #108]	; (80070f8 <HAL_PCD_MspInit+0xa0>)
 800708c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800708e:	f003 0301 	and.w	r3, r3, #1
 8007092:	613b      	str	r3, [r7, #16]
 8007094:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007096:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800709a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800709c:	2302      	movs	r3, #2
 800709e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070a0:	2300      	movs	r3, #0
 80070a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80070a4:	2303      	movs	r3, #3
 80070a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80070a8:	230a      	movs	r3, #10
 80070aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80070ac:	f107 0314 	add.w	r3, r7, #20
 80070b0:	4619      	mov	r1, r3
 80070b2:	4812      	ldr	r0, [pc, #72]	; (80070fc <HAL_PCD_MspInit+0xa4>)
 80070b4:	f7f9 fec8 	bl	8000e48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80070b8:	4b0f      	ldr	r3, [pc, #60]	; (80070f8 <HAL_PCD_MspInit+0xa0>)
 80070ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070bc:	4a0e      	ldr	r2, [pc, #56]	; (80070f8 <HAL_PCD_MspInit+0xa0>)
 80070be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070c2:	6353      	str	r3, [r2, #52]	; 0x34
 80070c4:	2300      	movs	r3, #0
 80070c6:	60fb      	str	r3, [r7, #12]
 80070c8:	4b0b      	ldr	r3, [pc, #44]	; (80070f8 <HAL_PCD_MspInit+0xa0>)
 80070ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070cc:	4a0a      	ldr	r2, [pc, #40]	; (80070f8 <HAL_PCD_MspInit+0xa0>)
 80070ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80070d2:	6453      	str	r3, [r2, #68]	; 0x44
 80070d4:	4b08      	ldr	r3, [pc, #32]	; (80070f8 <HAL_PCD_MspInit+0xa0>)
 80070d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070dc:	60fb      	str	r3, [r7, #12]
 80070de:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80070e0:	2200      	movs	r2, #0
 80070e2:	2100      	movs	r1, #0
 80070e4:	2043      	movs	r0, #67	; 0x43
 80070e6:	f7f9 fe78 	bl	8000dda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80070ea:	2043      	movs	r0, #67	; 0x43
 80070ec:	f7f9 fe91 	bl	8000e12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80070f0:	bf00      	nop
 80070f2:	3728      	adds	r7, #40	; 0x28
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}
 80070f8:	40023800 	.word	0x40023800
 80070fc:	40020000 	.word	0x40020000

08007100 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b082      	sub	sp, #8
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007114:	4619      	mov	r1, r3
 8007116:	4610      	mov	r0, r2
 8007118:	f7fe fb59 	bl	80057ce <USBD_LL_SetupStage>
}
 800711c:	bf00      	nop
 800711e:	3708      	adds	r7, #8
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}

08007124 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b082      	sub	sp, #8
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
 800712c:	460b      	mov	r3, r1
 800712e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007136:	78fa      	ldrb	r2, [r7, #3]
 8007138:	6879      	ldr	r1, [r7, #4]
 800713a:	4613      	mov	r3, r2
 800713c:	00db      	lsls	r3, r3, #3
 800713e:	4413      	add	r3, r2
 8007140:	009b      	lsls	r3, r3, #2
 8007142:	440b      	add	r3, r1
 8007144:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007148:	681a      	ldr	r2, [r3, #0]
 800714a:	78fb      	ldrb	r3, [r7, #3]
 800714c:	4619      	mov	r1, r3
 800714e:	f7fe fb93 	bl	8005878 <USBD_LL_DataOutStage>
}
 8007152:	bf00      	nop
 8007154:	3708      	adds	r7, #8
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}

0800715a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800715a:	b580      	push	{r7, lr}
 800715c:	b082      	sub	sp, #8
 800715e:	af00      	add	r7, sp, #0
 8007160:	6078      	str	r0, [r7, #4]
 8007162:	460b      	mov	r3, r1
 8007164:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800716c:	78fa      	ldrb	r2, [r7, #3]
 800716e:	6879      	ldr	r1, [r7, #4]
 8007170:	4613      	mov	r3, r2
 8007172:	00db      	lsls	r3, r3, #3
 8007174:	4413      	add	r3, r2
 8007176:	009b      	lsls	r3, r3, #2
 8007178:	440b      	add	r3, r1
 800717a:	334c      	adds	r3, #76	; 0x4c
 800717c:	681a      	ldr	r2, [r3, #0]
 800717e:	78fb      	ldrb	r3, [r7, #3]
 8007180:	4619      	mov	r1, r3
 8007182:	f7fe fc2c 	bl	80059de <USBD_LL_DataInStage>
}
 8007186:	bf00      	nop
 8007188:	3708      	adds	r7, #8
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}

0800718e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800718e:	b580      	push	{r7, lr}
 8007190:	b082      	sub	sp, #8
 8007192:	af00      	add	r7, sp, #0
 8007194:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800719c:	4618      	mov	r0, r3
 800719e:	f7fe fd60 	bl	8005c62 <USBD_LL_SOF>
}
 80071a2:	bf00      	nop
 80071a4:	3708      	adds	r7, #8
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}

080071aa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071aa:	b580      	push	{r7, lr}
 80071ac:	b084      	sub	sp, #16
 80071ae:	af00      	add	r7, sp, #0
 80071b0:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80071b2:	2301      	movs	r3, #1
 80071b4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	68db      	ldr	r3, [r3, #12]
 80071ba:	2b02      	cmp	r3, #2
 80071bc:	d001      	beq.n	80071c2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80071be:	f7f9 fb89 	bl	80008d4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80071c8:	7bfa      	ldrb	r2, [r7, #15]
 80071ca:	4611      	mov	r1, r2
 80071cc:	4618      	mov	r0, r3
 80071ce:	f7fe fd0a 	bl	8005be6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80071d8:	4618      	mov	r0, r3
 80071da:	f7fe fcb2 	bl	8005b42 <USBD_LL_Reset>
}
 80071de:	bf00      	nop
 80071e0:	3710      	adds	r7, #16
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}
	...

080071e8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b082      	sub	sp, #8
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80071f6:	4618      	mov	r0, r3
 80071f8:	f7fe fd05 	bl	8005c06 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	687a      	ldr	r2, [r7, #4]
 8007208:	6812      	ldr	r2, [r2, #0]
 800720a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800720e:	f043 0301 	orr.w	r3, r3, #1
 8007212:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6a1b      	ldr	r3, [r3, #32]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d005      	beq.n	8007228 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800721c:	4b04      	ldr	r3, [pc, #16]	; (8007230 <HAL_PCD_SuspendCallback+0x48>)
 800721e:	691b      	ldr	r3, [r3, #16]
 8007220:	4a03      	ldr	r2, [pc, #12]	; (8007230 <HAL_PCD_SuspendCallback+0x48>)
 8007222:	f043 0306 	orr.w	r3, r3, #6
 8007226:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007228:	bf00      	nop
 800722a:	3708      	adds	r7, #8
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}
 8007230:	e000ed00 	.word	0xe000ed00

08007234 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b082      	sub	sp, #8
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007242:	4618      	mov	r0, r3
 8007244:	f7fe fcf5 	bl	8005c32 <USBD_LL_Resume>
}
 8007248:	bf00      	nop
 800724a:	3708      	adds	r7, #8
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}

08007250 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b082      	sub	sp, #8
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
 8007258:	460b      	mov	r3, r1
 800725a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007262:	78fa      	ldrb	r2, [r7, #3]
 8007264:	4611      	mov	r1, r2
 8007266:	4618      	mov	r0, r3
 8007268:	f7fe fd4d 	bl	8005d06 <USBD_LL_IsoOUTIncomplete>
}
 800726c:	bf00      	nop
 800726e:	3708      	adds	r7, #8
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}

08007274 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b082      	sub	sp, #8
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
 800727c:	460b      	mov	r3, r1
 800727e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007286:	78fa      	ldrb	r2, [r7, #3]
 8007288:	4611      	mov	r1, r2
 800728a:	4618      	mov	r0, r3
 800728c:	f7fe fd09 	bl	8005ca2 <USBD_LL_IsoINIncomplete>
}
 8007290:	bf00      	nop
 8007292:	3708      	adds	r7, #8
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}

08007298 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b082      	sub	sp, #8
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80072a6:	4618      	mov	r0, r3
 80072a8:	f7fe fd5f 	bl	8005d6a <USBD_LL_DevConnected>
}
 80072ac:	bf00      	nop
 80072ae:	3708      	adds	r7, #8
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}

080072b4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b082      	sub	sp, #8
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80072c2:	4618      	mov	r0, r3
 80072c4:	f7fe fd5c 	bl	8005d80 <USBD_LL_DevDisconnected>
}
 80072c8:	bf00      	nop
 80072ca:	3708      	adds	r7, #8
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}

080072d0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b082      	sub	sp, #8
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	781b      	ldrb	r3, [r3, #0]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d13c      	bne.n	800735a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80072e0:	4a20      	ldr	r2, [pc, #128]	; (8007364 <USBD_LL_Init+0x94>)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	4a1e      	ldr	r2, [pc, #120]	; (8007364 <USBD_LL_Init+0x94>)
 80072ec:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80072f0:	4b1c      	ldr	r3, [pc, #112]	; (8007364 <USBD_LL_Init+0x94>)
 80072f2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80072f6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80072f8:	4b1a      	ldr	r3, [pc, #104]	; (8007364 <USBD_LL_Init+0x94>)
 80072fa:	2204      	movs	r2, #4
 80072fc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80072fe:	4b19      	ldr	r3, [pc, #100]	; (8007364 <USBD_LL_Init+0x94>)
 8007300:	2202      	movs	r2, #2
 8007302:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007304:	4b17      	ldr	r3, [pc, #92]	; (8007364 <USBD_LL_Init+0x94>)
 8007306:	2200      	movs	r2, #0
 8007308:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800730a:	4b16      	ldr	r3, [pc, #88]	; (8007364 <USBD_LL_Init+0x94>)
 800730c:	2202      	movs	r2, #2
 800730e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007310:	4b14      	ldr	r3, [pc, #80]	; (8007364 <USBD_LL_Init+0x94>)
 8007312:	2200      	movs	r2, #0
 8007314:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007316:	4b13      	ldr	r3, [pc, #76]	; (8007364 <USBD_LL_Init+0x94>)
 8007318:	2200      	movs	r2, #0
 800731a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800731c:	4b11      	ldr	r3, [pc, #68]	; (8007364 <USBD_LL_Init+0x94>)
 800731e:	2200      	movs	r2, #0
 8007320:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007322:	4b10      	ldr	r3, [pc, #64]	; (8007364 <USBD_LL_Init+0x94>)
 8007324:	2200      	movs	r2, #0
 8007326:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007328:	4b0e      	ldr	r3, [pc, #56]	; (8007364 <USBD_LL_Init+0x94>)
 800732a:	2200      	movs	r2, #0
 800732c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800732e:	480d      	ldr	r0, [pc, #52]	; (8007364 <USBD_LL_Init+0x94>)
 8007330:	f7f9 ff59 	bl	80011e6 <HAL_PCD_Init>
 8007334:	4603      	mov	r3, r0
 8007336:	2b00      	cmp	r3, #0
 8007338:	d001      	beq.n	800733e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800733a:	f7f9 facb 	bl	80008d4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800733e:	2180      	movs	r1, #128	; 0x80
 8007340:	4808      	ldr	r0, [pc, #32]	; (8007364 <USBD_LL_Init+0x94>)
 8007342:	f7fb f9b0 	bl	80026a6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007346:	2240      	movs	r2, #64	; 0x40
 8007348:	2100      	movs	r1, #0
 800734a:	4806      	ldr	r0, [pc, #24]	; (8007364 <USBD_LL_Init+0x94>)
 800734c:	f7fb f964 	bl	8002618 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007350:	2280      	movs	r2, #128	; 0x80
 8007352:	2101      	movs	r1, #1
 8007354:	4803      	ldr	r0, [pc, #12]	; (8007364 <USBD_LL_Init+0x94>)
 8007356:	f7fb f95f 	bl	8002618 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800735a:	2300      	movs	r3, #0
}
 800735c:	4618      	mov	r0, r3
 800735e:	3708      	adds	r7, #8
 8007360:	46bd      	mov	sp, r7
 8007362:	bd80      	pop	{r7, pc}
 8007364:	20000e48 	.word	0x20000e48

08007368 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b084      	sub	sp, #16
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007370:	2300      	movs	r3, #0
 8007372:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007374:	2300      	movs	r3, #0
 8007376:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800737e:	4618      	mov	r0, r3
 8007380:	f7fa f84e 	bl	8001420 <HAL_PCD_Start>
 8007384:	4603      	mov	r3, r0
 8007386:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007388:	7bfb      	ldrb	r3, [r7, #15]
 800738a:	4618      	mov	r0, r3
 800738c:	f000 f942 	bl	8007614 <USBD_Get_USB_Status>
 8007390:	4603      	mov	r3, r0
 8007392:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007394:	7bbb      	ldrb	r3, [r7, #14]
}
 8007396:	4618      	mov	r0, r3
 8007398:	3710      	adds	r7, #16
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}

0800739e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800739e:	b580      	push	{r7, lr}
 80073a0:	b084      	sub	sp, #16
 80073a2:	af00      	add	r7, sp, #0
 80073a4:	6078      	str	r0, [r7, #4]
 80073a6:	4608      	mov	r0, r1
 80073a8:	4611      	mov	r1, r2
 80073aa:	461a      	mov	r2, r3
 80073ac:	4603      	mov	r3, r0
 80073ae:	70fb      	strb	r3, [r7, #3]
 80073b0:	460b      	mov	r3, r1
 80073b2:	70bb      	strb	r3, [r7, #2]
 80073b4:	4613      	mov	r3, r2
 80073b6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073b8:	2300      	movs	r3, #0
 80073ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073bc:	2300      	movs	r3, #0
 80073be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80073c6:	78bb      	ldrb	r3, [r7, #2]
 80073c8:	883a      	ldrh	r2, [r7, #0]
 80073ca:	78f9      	ldrb	r1, [r7, #3]
 80073cc:	f7fa fd1f 	bl	8001e0e <HAL_PCD_EP_Open>
 80073d0:	4603      	mov	r3, r0
 80073d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80073d4:	7bfb      	ldrb	r3, [r7, #15]
 80073d6:	4618      	mov	r0, r3
 80073d8:	f000 f91c 	bl	8007614 <USBD_Get_USB_Status>
 80073dc:	4603      	mov	r3, r0
 80073de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80073e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3710      	adds	r7, #16
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}

080073ea <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80073ea:	b580      	push	{r7, lr}
 80073ec:	b084      	sub	sp, #16
 80073ee:	af00      	add	r7, sp, #0
 80073f0:	6078      	str	r0, [r7, #4]
 80073f2:	460b      	mov	r3, r1
 80073f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073f6:	2300      	movs	r3, #0
 80073f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073fa:	2300      	movs	r3, #0
 80073fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007404:	78fa      	ldrb	r2, [r7, #3]
 8007406:	4611      	mov	r1, r2
 8007408:	4618      	mov	r0, r3
 800740a:	f7fa fd68 	bl	8001ede <HAL_PCD_EP_Close>
 800740e:	4603      	mov	r3, r0
 8007410:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007412:	7bfb      	ldrb	r3, [r7, #15]
 8007414:	4618      	mov	r0, r3
 8007416:	f000 f8fd 	bl	8007614 <USBD_Get_USB_Status>
 800741a:	4603      	mov	r3, r0
 800741c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800741e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007420:	4618      	mov	r0, r3
 8007422:	3710      	adds	r7, #16
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}

08007428 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b084      	sub	sp, #16
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	460b      	mov	r3, r1
 8007432:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007434:	2300      	movs	r3, #0
 8007436:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007438:	2300      	movs	r3, #0
 800743a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007442:	78fa      	ldrb	r2, [r7, #3]
 8007444:	4611      	mov	r1, r2
 8007446:	4618      	mov	r0, r3
 8007448:	f7fa fe40 	bl	80020cc <HAL_PCD_EP_SetStall>
 800744c:	4603      	mov	r3, r0
 800744e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007450:	7bfb      	ldrb	r3, [r7, #15]
 8007452:	4618      	mov	r0, r3
 8007454:	f000 f8de 	bl	8007614 <USBD_Get_USB_Status>
 8007458:	4603      	mov	r3, r0
 800745a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800745c:	7bbb      	ldrb	r3, [r7, #14]
}
 800745e:	4618      	mov	r0, r3
 8007460:	3710      	adds	r7, #16
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}

08007466 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007466:	b580      	push	{r7, lr}
 8007468:	b084      	sub	sp, #16
 800746a:	af00      	add	r7, sp, #0
 800746c:	6078      	str	r0, [r7, #4]
 800746e:	460b      	mov	r3, r1
 8007470:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007472:	2300      	movs	r3, #0
 8007474:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007476:	2300      	movs	r3, #0
 8007478:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007480:	78fa      	ldrb	r2, [r7, #3]
 8007482:	4611      	mov	r1, r2
 8007484:	4618      	mov	r0, r3
 8007486:	f7fa fe85 	bl	8002194 <HAL_PCD_EP_ClrStall>
 800748a:	4603      	mov	r3, r0
 800748c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800748e:	7bfb      	ldrb	r3, [r7, #15]
 8007490:	4618      	mov	r0, r3
 8007492:	f000 f8bf 	bl	8007614 <USBD_Get_USB_Status>
 8007496:	4603      	mov	r3, r0
 8007498:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800749a:	7bbb      	ldrb	r3, [r7, #14]
}
 800749c:	4618      	mov	r0, r3
 800749e:	3710      	adds	r7, #16
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}

080074a4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b085      	sub	sp, #20
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
 80074ac:	460b      	mov	r3, r1
 80074ae:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80074b6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80074b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	da0b      	bge.n	80074d8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80074c0:	78fb      	ldrb	r3, [r7, #3]
 80074c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80074c6:	68f9      	ldr	r1, [r7, #12]
 80074c8:	4613      	mov	r3, r2
 80074ca:	00db      	lsls	r3, r3, #3
 80074cc:	4413      	add	r3, r2
 80074ce:	009b      	lsls	r3, r3, #2
 80074d0:	440b      	add	r3, r1
 80074d2:	333e      	adds	r3, #62	; 0x3e
 80074d4:	781b      	ldrb	r3, [r3, #0]
 80074d6:	e00b      	b.n	80074f0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80074d8:	78fb      	ldrb	r3, [r7, #3]
 80074da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80074de:	68f9      	ldr	r1, [r7, #12]
 80074e0:	4613      	mov	r3, r2
 80074e2:	00db      	lsls	r3, r3, #3
 80074e4:	4413      	add	r3, r2
 80074e6:	009b      	lsls	r3, r3, #2
 80074e8:	440b      	add	r3, r1
 80074ea:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80074ee:	781b      	ldrb	r3, [r3, #0]
  }
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	3714      	adds	r7, #20
 80074f4:	46bd      	mov	sp, r7
 80074f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fa:	4770      	bx	lr

080074fc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b084      	sub	sp, #16
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
 8007504:	460b      	mov	r3, r1
 8007506:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007508:	2300      	movs	r3, #0
 800750a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800750c:	2300      	movs	r3, #0
 800750e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007516:	78fa      	ldrb	r2, [r7, #3]
 8007518:	4611      	mov	r1, r2
 800751a:	4618      	mov	r0, r3
 800751c:	f7fa fc52 	bl	8001dc4 <HAL_PCD_SetAddress>
 8007520:	4603      	mov	r3, r0
 8007522:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007524:	7bfb      	ldrb	r3, [r7, #15]
 8007526:	4618      	mov	r0, r3
 8007528:	f000 f874 	bl	8007614 <USBD_Get_USB_Status>
 800752c:	4603      	mov	r3, r0
 800752e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007530:	7bbb      	ldrb	r3, [r7, #14]
}
 8007532:	4618      	mov	r0, r3
 8007534:	3710      	adds	r7, #16
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}

0800753a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800753a:	b580      	push	{r7, lr}
 800753c:	b086      	sub	sp, #24
 800753e:	af00      	add	r7, sp, #0
 8007540:	60f8      	str	r0, [r7, #12]
 8007542:	607a      	str	r2, [r7, #4]
 8007544:	603b      	str	r3, [r7, #0]
 8007546:	460b      	mov	r3, r1
 8007548:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800754a:	2300      	movs	r3, #0
 800754c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800754e:	2300      	movs	r3, #0
 8007550:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007558:	7af9      	ldrb	r1, [r7, #11]
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	687a      	ldr	r2, [r7, #4]
 800755e:	f7fa fd6b 	bl	8002038 <HAL_PCD_EP_Transmit>
 8007562:	4603      	mov	r3, r0
 8007564:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007566:	7dfb      	ldrb	r3, [r7, #23]
 8007568:	4618      	mov	r0, r3
 800756a:	f000 f853 	bl	8007614 <USBD_Get_USB_Status>
 800756e:	4603      	mov	r3, r0
 8007570:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007572:	7dbb      	ldrb	r3, [r7, #22]
}
 8007574:	4618      	mov	r0, r3
 8007576:	3718      	adds	r7, #24
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}

0800757c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b086      	sub	sp, #24
 8007580:	af00      	add	r7, sp, #0
 8007582:	60f8      	str	r0, [r7, #12]
 8007584:	607a      	str	r2, [r7, #4]
 8007586:	603b      	str	r3, [r7, #0]
 8007588:	460b      	mov	r3, r1
 800758a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800758c:	2300      	movs	r3, #0
 800758e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007590:	2300      	movs	r3, #0
 8007592:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800759a:	7af9      	ldrb	r1, [r7, #11]
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	687a      	ldr	r2, [r7, #4]
 80075a0:	f7fa fce7 	bl	8001f72 <HAL_PCD_EP_Receive>
 80075a4:	4603      	mov	r3, r0
 80075a6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80075a8:	7dfb      	ldrb	r3, [r7, #23]
 80075aa:	4618      	mov	r0, r3
 80075ac:	f000 f832 	bl	8007614 <USBD_Get_USB_Status>
 80075b0:	4603      	mov	r3, r0
 80075b2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80075b4:	7dbb      	ldrb	r3, [r7, #22]
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	3718      	adds	r7, #24
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd80      	pop	{r7, pc}

080075be <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80075be:	b580      	push	{r7, lr}
 80075c0:	b082      	sub	sp, #8
 80075c2:	af00      	add	r7, sp, #0
 80075c4:	6078      	str	r0, [r7, #4]
 80075c6:	460b      	mov	r3, r1
 80075c8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80075d0:	78fa      	ldrb	r2, [r7, #3]
 80075d2:	4611      	mov	r1, r2
 80075d4:	4618      	mov	r0, r3
 80075d6:	f7fa fd17 	bl	8002008 <HAL_PCD_EP_GetRxCount>
 80075da:	4603      	mov	r3, r0
}
 80075dc:	4618      	mov	r0, r3
 80075de:	3708      	adds	r7, #8
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd80      	pop	{r7, pc}

080075e4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b083      	sub	sp, #12
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80075ec:	4b03      	ldr	r3, [pc, #12]	; (80075fc <USBD_static_malloc+0x18>)
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	370c      	adds	r7, #12
 80075f2:	46bd      	mov	sp, r7
 80075f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f8:	4770      	bx	lr
 80075fa:	bf00      	nop
 80075fc:	20001354 	.word	0x20001354

08007600 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007600:	b480      	push	{r7}
 8007602:	b083      	sub	sp, #12
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]

}
 8007608:	bf00      	nop
 800760a:	370c      	adds	r7, #12
 800760c:	46bd      	mov	sp, r7
 800760e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007612:	4770      	bx	lr

08007614 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007614:	b480      	push	{r7}
 8007616:	b085      	sub	sp, #20
 8007618:	af00      	add	r7, sp, #0
 800761a:	4603      	mov	r3, r0
 800761c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800761e:	2300      	movs	r3, #0
 8007620:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007622:	79fb      	ldrb	r3, [r7, #7]
 8007624:	2b03      	cmp	r3, #3
 8007626:	d817      	bhi.n	8007658 <USBD_Get_USB_Status+0x44>
 8007628:	a201      	add	r2, pc, #4	; (adr r2, 8007630 <USBD_Get_USB_Status+0x1c>)
 800762a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800762e:	bf00      	nop
 8007630:	08007641 	.word	0x08007641
 8007634:	08007647 	.word	0x08007647
 8007638:	0800764d 	.word	0x0800764d
 800763c:	08007653 	.word	0x08007653
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007640:	2300      	movs	r3, #0
 8007642:	73fb      	strb	r3, [r7, #15]
    break;
 8007644:	e00b      	b.n	800765e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007646:	2303      	movs	r3, #3
 8007648:	73fb      	strb	r3, [r7, #15]
    break;
 800764a:	e008      	b.n	800765e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800764c:	2301      	movs	r3, #1
 800764e:	73fb      	strb	r3, [r7, #15]
    break;
 8007650:	e005      	b.n	800765e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007652:	2303      	movs	r3, #3
 8007654:	73fb      	strb	r3, [r7, #15]
    break;
 8007656:	e002      	b.n	800765e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007658:	2303      	movs	r3, #3
 800765a:	73fb      	strb	r3, [r7, #15]
    break;
 800765c:	bf00      	nop
  }
  return usb_status;
 800765e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007660:	4618      	mov	r0, r3
 8007662:	3714      	adds	r7, #20
 8007664:	46bd      	mov	sp, r7
 8007666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766a:	4770      	bx	lr

0800766c <__libc_init_array>:
 800766c:	b570      	push	{r4, r5, r6, lr}
 800766e:	4d0d      	ldr	r5, [pc, #52]	; (80076a4 <__libc_init_array+0x38>)
 8007670:	4c0d      	ldr	r4, [pc, #52]	; (80076a8 <__libc_init_array+0x3c>)
 8007672:	1b64      	subs	r4, r4, r5
 8007674:	10a4      	asrs	r4, r4, #2
 8007676:	2600      	movs	r6, #0
 8007678:	42a6      	cmp	r6, r4
 800767a:	d109      	bne.n	8007690 <__libc_init_array+0x24>
 800767c:	4d0b      	ldr	r5, [pc, #44]	; (80076ac <__libc_init_array+0x40>)
 800767e:	4c0c      	ldr	r4, [pc, #48]	; (80076b0 <__libc_init_array+0x44>)
 8007680:	f000 f820 	bl	80076c4 <_init>
 8007684:	1b64      	subs	r4, r4, r5
 8007686:	10a4      	asrs	r4, r4, #2
 8007688:	2600      	movs	r6, #0
 800768a:	42a6      	cmp	r6, r4
 800768c:	d105      	bne.n	800769a <__libc_init_array+0x2e>
 800768e:	bd70      	pop	{r4, r5, r6, pc}
 8007690:	f855 3b04 	ldr.w	r3, [r5], #4
 8007694:	4798      	blx	r3
 8007696:	3601      	adds	r6, #1
 8007698:	e7ee      	b.n	8007678 <__libc_init_array+0xc>
 800769a:	f855 3b04 	ldr.w	r3, [r5], #4
 800769e:	4798      	blx	r3
 80076a0:	3601      	adds	r6, #1
 80076a2:	e7f2      	b.n	800768a <__libc_init_array+0x1e>
 80076a4:	08007744 	.word	0x08007744
 80076a8:	08007744 	.word	0x08007744
 80076ac:	08007744 	.word	0x08007744
 80076b0:	08007748 	.word	0x08007748

080076b4 <memset>:
 80076b4:	4402      	add	r2, r0
 80076b6:	4603      	mov	r3, r0
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d100      	bne.n	80076be <memset+0xa>
 80076bc:	4770      	bx	lr
 80076be:	f803 1b01 	strb.w	r1, [r3], #1
 80076c2:	e7f9      	b.n	80076b8 <memset+0x4>

080076c4 <_init>:
 80076c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076c6:	bf00      	nop
 80076c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076ca:	bc08      	pop	{r3}
 80076cc:	469e      	mov	lr, r3
 80076ce:	4770      	bx	lr

080076d0 <_fini>:
 80076d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076d2:	bf00      	nop
 80076d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076d6:	bc08      	pop	{r3}
 80076d8:	469e      	mov	lr, r3
 80076da:	4770      	bx	lr
